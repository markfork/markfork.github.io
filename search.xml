<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[redis－伪分布式集群]]></title>
      <url>/2018/05/12/Redis%E4%B8%93%E9%A2%98-%E4%BC%AA%E9%9B%86%E7%BE%A4%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h2 id="教程大纲"><a href="#教程大纲" class="headerlink" title="教程大纲"></a>教程大纲</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">在虚拟机中安装CentOS</div><div class="line">在每个CentOS中都安装Java和Perl</div><div class="line">在4个虚拟机中安装CentOS集群</div><div class="line">配置4台CentOS为ssh免密码互相通信</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">从零开始，纯手工，一步一步搭建出一个4个节点的CentOS集群。</div><div class="line">为我们后面的课程做准备，后面会讲解大型的分布式的redis集群架构，一步一步纯手工搭建redis集群，集群部署，主从架构，分布式集群架构。</div><div class="line">后面的课程，会讲解一些实时计算技术的应用，包括storm，讲解一下storm的基础知识，对于java工程师来说，会用就可以了，用一些storm最基本的分布式实时计算的feature就ok了，搭建一个storm的集群。</div><div class="line">部署我们整套的系统，nginx，tomcat+java web应用，mysql。</div><div class="line">尽量以真实的网络拓扑的环境，去给大家演示一下整套系统的部署，不要所有东西，redis集群+storm集群+nginx+tomcat+mysql，全部放在一个节点上玩儿，也可以去试一试，但是作为课程来说，效果不是太理想。</div><div class="line">redis集群，独立的一套机器</div><div class="line">storm集群，独立的一套机器</div><div class="line">nginx，独立部署</div><div class="line">tomcat + java web应用，独立部署</div><div class="line">mysql，独立部署</div><div class="line">十几个机器，去部署整套系统，我在自己的笔记本电脑上来讲课的，这么玩儿撑不住的。</div><div class="line">i5，8G+Mac OS 凶他</div><div class="line">4台虚拟机，每台虚拟机是1G的内存，电脑基本还能撑住</div><div class="line">电脑本身就6个G内存的话，学习这种大型的系统架构的课程，是有点吃力，给大家建议，几个G的内存条，也就几百块钱，给自己最好加个内存条，至少到8G以上</div><div class="line">16G凑合，玩的很嗨。</div><div class="line">纯手工，从零开始。</div><div class="line">很多视频课程，里面讲师都是现成的虚拟机，自己都装好了，包括各种必要的软件</div><div class="line">讲课的时候直接基于自己的虚拟机就开始讲解了</div><div class="line">很多同学就会发现，想要做到跟讲师一样的环境都很难，自己可能照着样子装了个环境，但是发现，各种问题，各种报错，环境起不来。</div><div class="line">学习课程的过程很艰难</div><div class="line">学视频课程，肯定是要跟着视频的所有的东西自己去做一做，练一练，结果你却因为环境问题，做不了，连不了，那就太惨了</div><div class="line">从centos的镜像文件，到所有的需要使用的软件，全都给你，在自己电脑上，下载一个虚拟机管理软件，virtual box，就可以跟着玩儿了</div><div class="line">如果你一步一步跟着视频做，搭建起整个环境，应该问题不大</div><div class="line">环境问题，给大家弄成傻瓜式的。</div></pre></td></tr></table></figure>
<h2 id="1、在虚拟机中安装CentOS"><a href="#1、在虚拟机中安装CentOS" class="headerlink" title="1、在虚拟机中安装CentOS"></a>1、在虚拟机中安装CentOS</h2><p>动一个virtual box虚拟机管理软件（vmware，我早些年，发现不太稳定，主要是当时搭建一个hadoop大数据的集群，发现每次休眠以后再重启，集群就挂掉了）<br>virtual box，发现很稳定，集群从来不会随便乱挂，所以就一直用virtual box了.</p>
<h4 id="1-使用课程提供的CentOS-6-5镜像即可，CentOS-6-5-i386-minimal-iso。"><a href="#1-使用课程提供的CentOS-6-5镜像即可，CentOS-6-5-i386-minimal-iso。" class="headerlink" title="1.使用课程提供的CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。"></a>1.使用课程提供的CentOS 6.5镜像即可，CentOS-6.5-i386-minimal.iso。</h4><h4 id="2-创建虚拟机："><a href="#2-创建虚拟机：" class="headerlink" title="2.创建虚拟机："></a>2.创建虚拟机：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">打开Virtual Box</div><div class="line">点击“新建”按钮</div><div class="line">点击“下一步”</div><div class="line">输入虚拟机名称为eshop-cache01</div><div class="line">选择操作系统为Linux，选择版本为Red Hat，分配1024MB内存，后面的选项全部用默认。</div><div class="line">在Virtual Disk File location and size中，一定要自己选择一个目录来存放虚拟机文件，最后点击“create”按钮，</div><div class="line">开始创建虚拟机。</div></pre></td></tr></table></figure>
<h4 id="3-设置虚拟机网卡："><a href="#3-设置虚拟机网卡：" class="headerlink" title="3.设置虚拟机网卡："></a>3.设置虚拟机网卡：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">选择创建好的虚拟机，点击“设置”按钮，在网络一栏中，连接方式中，选择“Bridged Adapter”。</div></pre></td></tr></table></figure>
<h4 id="4-安装虚拟机中的CentOS"><a href="#4-安装虚拟机中的CentOS" class="headerlink" title="4.安装虚拟机中的CentOS"></a>4.安装虚拟机中的CentOS</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">6.5操作系统：选择创建好的虚拟机，点击“开始”按钮，选择安装介质（即本地的CentOS 6.5镜像文件），选择第一项开始安装-Skip-欢迎界面Next-选择默认语言-Baisc Storage Devices-Yes, discard any data-主机名:spark2upgrade01-选择时区-设置初始密码为hadoop-Replace Existing Linux System-Write changes to disk-CentOS 6.5自己开始安装。</div></pre></td></tr></table></figure>
<h4 id="5-Reboot"><a href="#5-Reboot" class="headerlink" title="5.Reboot"></a>5.Reboot</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安装完以后，CentOS会提醒你要重启一下，就是reboot，你就reboot就可以了。</div></pre></td></tr></table></figure>
<h4 id="6-配置网络"><a href="#6-配置网络" class="headerlink" title="6.配置网络"></a>6.配置网络</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</div></pre></td></tr></table></figure>
<p>配置内容如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">DEVICE=eth0</div><div class="line">TYPE=Ethernet</div><div class="line">ONBOOT=yes</div><div class="line">BOOTPROTO=dhcp</div><div class="line">service network restart</div><div class="line">ifconfig</div><div class="line"></div><div class="line">BOOTPROTO=static</div><div class="line">IPADDR=192.168.0.X</div><div class="line">NETMASK=255.255.255.0</div><div class="line">GATEWAY=192.168.0.1</div><div class="line">service network restart</div></pre></td></tr></table></figure></p>
<h4 id="7-配置hosts"><a href="#7-配置hosts" class="headerlink" title="7.配置hosts"></a>7.配置hosts</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /etc/hosts</div><div class="line">配置本机的hostname到ip地址的映射</div></pre></td></tr></table></figure>
<h4 id="8-关闭防火墙"><a href="#8-关闭防火墙" class="headerlink" title="8.关闭防火墙"></a>8.关闭防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">service iptables stop</div><div class="line">service ip6tables stop</div><div class="line">chkconfig iptables off</div><div class="line">chkconfig ip6tables off</div><div class="line"></div><div class="line">vi /etc/selinux/config</div><div class="line">SELINUX=disabled</div><div class="line"></div><div class="line">注意：一定要关闭本地宿主机上的防火墙。</div><div class="line">后面要搭建集群，有的大数据技术的集群之间需要通信，在本地你设置了防火墙的话，可能会导致集群之前没办法互相连接，相互通讯，会导致搭建失败。</div></pre></td></tr></table></figure>
<h4 id="9-配置yum"><a href="#9-配置yum" class="headerlink" title="9.配置yum"></a>9.配置yum</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum clean all</div><div class="line">yum makecache</div><div class="line">yum install wget</div></pre></td></tr></table></figure>
<h2 id="2、在每个CentOS中都安装Java和Perl"><a href="#2、在每个CentOS中都安装Java和Perl" class="headerlink" title="2、在每个CentOS中都安装Java和Perl"></a>2、在每个CentOS中都安装Java和Perl</h2><h4 id="1-安装JDK"><a href="#1-安装JDK" class="headerlink" title="1.安装JDK"></a>1.安装JDK</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">1、将jdk-7u60-linux-i586.rpm通过WinSCP上传到虚拟机中</div><div class="line">2、安装JDK：rpm -ivh jdk-7u65-linux-i586.rpm</div><div class="line">3、配置jdk相关的环境变量</div><div class="line">vi .bashrc</div><div class="line">export JAVA_HOME=/usr/java/latest</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin</div><div class="line">source .bashrc</div><div class="line">4、测试jdk安装是否成功：java -version</div></pre></td></tr></table></figure>
<h4 id="2-安装Perl"><a href="#2-安装Perl" class="headerlink" title="2.安装Perl"></a>2.安装Perl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">yum install -y gcc</div><div class="line">wget http://www.cpan.org/src/5.0/perl-5.16.1.tar.gz</div><div class="line">tar -xzf perl-5.16.1.tar.gz</div><div class="line">cd perl-5.16.1</div><div class="line">./Configure -des -Dprefix=/usr/local/perl</div><div class="line">make &amp;&amp; make test &amp;&amp; make install</div><div class="line">perl -v</div><div class="line">为什么要装perl？我们整个大型电商网站的详情页系统，复杂。java+nginx+lua，需要perl。</div><div class="line">perl，是一个基础的编程语言的安装，tomcat，跑java web应用</div></pre></td></tr></table></figure>
<h4 id="3-在4个虚拟机中安装CentOS集群"><a href="#3-在4个虚拟机中安装CentOS集群" class="headerlink" title="3.在4个虚拟机中安装CentOS集群"></a>3.在4个虚拟机中安装CentOS集群</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">（1）按照上述步骤，再安装三台一模一样环境的linux机器</div><div class="line">（2）另外三台机器的hostname分别设置为eshop-cache02，eshop-cache03，eshop-cache04</div><div class="line">（3）安装好之后，在每台机器的hosts文件里面，配置好所有的机器的ip地址到hostname的映射关系</div><div class="line"></div><div class="line">比如说，在eshop-cache01的hosts里面</div><div class="line"></div><div class="line">192.168.31.187 eshop-cache01</div><div class="line">192.168.31.xxx eshop-cache02</div><div class="line">192.168.31.xxx eshop-cache03</div><div class="line">192.168.31.xxx eshop-cache04</div></pre></td></tr></table></figure>
<h4 id="4、配置4台CentOS为ssh免密码互相通信"><a href="#4、配置4台CentOS为ssh免密码互相通信" class="headerlink" title="4、配置4台CentOS为ssh免密码互相通信"></a>4、配置4台CentOS为ssh免密码互相通信</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">4.1 </div><div class="line">首先在三台机器上配置对本机的ssh免密码登录</div><div class="line">ssh-keygen -t rsa</div><div class="line">生成本机的公钥，过程中不断敲回车即可，ssh-keygen命令默认会将公钥放在/root/.ssh目录下</div><div class="line">cd /root/.ssh</div><div class="line">cp id_rsa.pub authorized_keys</div><div class="line">将公钥复制为authorized_keys文件，此时使用ssh连接本机就不需要输入密码了</div><div class="line"></div><div class="line">4.2</div><div class="line">接着配置三台机器互相之间的ssh免密码登录</div><div class="line">使用ssh-copy-id -i hostname命令将本机的公钥拷贝到指定机器的authorized_keys文件中</div><div class="line">java，在公司里做项目，有几个人是自己去维护linux集群的啊？？？？？</div><div class="line">几乎没有，很少很少，类似这一讲要做的事情，其实都是SRE，运维的同学，去做的</div><div class="line">但是对于课程来说，我们只能自己一步一步做，才有环境去学习啊！！！</div><div class="line"></div><div class="line">基于虚拟机的linux集群环境，都准备好了，手上有4台机器，后面玩儿各种redis、kafka、storm、tomcat、nginx，都有机器了.</div></pre></td></tr></table></figure>
<p><strong>利其事，必先利其器！下节继续！</strong></p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
            <tag> 缓存中间件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[nginx－性能测试]]></title>
      <url>/2018/05/12/nginx-ab-test/</url>
      <content type="html"><![CDATA[<h2 id="章节目录"><a href="#章节目录" class="headerlink" title="章节目录"></a>章节目录</h2><ul>
<li>nginx 性能优化的点</li>
<li>当前系统性能的评估</li>
<li>ab 压力测试工具使用<a id="more"></a>
<h4 id="1-nginx-性能优化的点"><a href="#1-nginx-性能优化的点" class="headerlink" title="1.nginx 性能优化的点"></a>1.nginx 性能优化的点</h4><strong>当前系统结构瓶颈</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">可用方案：观察指标-top、压力测试-substatus、线上系统可以支撑的并发。</div><div class="line">清除当前架构、当前业务，每个服务可以支撑多少并发,多少QPS。</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>了解业务模式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">接口业务类型、系统层次化结构 是代理、动静分离、业务服务器？</div></pre></td></tr></table></figure></p>
<p><strong>性能与安全</strong></p>
<p><img src="https://upload-images.jianshu.io/upload_images/2836699-a4e471bff6c24af0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="性能优化的点"></p>
<h4 id="2-当前系统性能的评估"><a href="#2-当前系统性能的评估" class="headerlink" title="2.当前系统性能的评估"></a>2.当前系统性能的评估</h4><p><strong>系统监测、日志分析</strong></p>
<p><strong>ab接口压力测试</strong></p>
<ul>
<li>业务量还没有大幅度增长之前，就需要对接口的响应能力做一个压测，防止业务量增加的时候出现问题。</li>
<li>ab接口压力测试工具<br>在评估好当前业务的系统压力需求情况下面，工具检测当前的系统负载能力是否能满足对应的压力测试需求。</li>
</ul>
<h4 id="3-ab-接口压力测试工具使用"><a href="#3-ab-接口压力测试工具使用" class="headerlink" title="3.ab 接口压力测试工具使用"></a>3.ab 接口压力测试工具使用</h4><p><strong>安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpd-tools</div></pre></td></tr></table></figure></p>
<p><strong>使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ab -n 1000 -c 100 http://www.baidu.com/</div><div class="line">-n  总的请求数</div><div class="line">-c  并发数</div><div class="line">-k 是否开启长连接</div></pre></td></tr></table></figure></p>
<p><strong>实战演示</strong><br><strong>1.请求静态页面 <a href="http://eshop-cache04:82/test_proxy.html" target="_blank" rel="external">http://eshop-cache04:82/test_proxy.html</a></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ab -n 1000 -c 100 http://eshop-cache04:82/test_proxy.html</div></pre></td></tr></table></figure></p>
<p>-n 1000 总请求数1000<br>-c  100  单个时刻并发数100<br>资源： <a href="http://eshop-cache04:82/test_proxy.html" target="_blank" rel="external">http://eshop-cache04:82/test_proxy.html</a><br><strong>测验结果</strong><br><img src="https://upload-images.jianshu.io/upload_images/2836699-128588e42c3bea50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ab压测结果"></p>
]]></content>
      
        <categories>
            
            <category> Nginx </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 服务器中间件 </tag>
            
            <tag> 性能压测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[并发编程的挑战]]></title>
      <url>/2017/11/17/java_%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E7%9A%84%E8%89%BA%E6%9C%AF_%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0_chapter1/</url>
      <content type="html"><![CDATA[<h2 id="并发编程带来的问题"><a href="#并发编程带来的问题" class="headerlink" title="并发编程带来的问题"></a>并发编程带来的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.上下文切换问题</div><div class="line">2.死锁问题</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h2><h3 id="多线程不一定快"><a href="#多线程不一定快" class="headerlink" title="多线程不一定快"></a>多线程不一定快</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.线程有创建和上下文切换的开销</div></pre></td></tr></table></figure>
<h3 id="如何减少上下文切换"><a href="#如何减少上下文切换" class="headerlink" title="如何减少上下文切换"></a>如何减少上下文切换</h3><p>减少上下文切换的方法有<code>无锁编程</code>、<code>CAS算法</code>、<code>使用最小线程</code>、<code>使用协程</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.无锁并发编程，多线程竞争锁时，会引起上下文切换，所以多线程处理数据时，可以用一些办法来避免使用锁，如将数据的ID按照hash算法取模分段，不同的线程处理不同段的数据</div><div class="line">2.CAS算法。Java的Atomic包使用CAS算法来更新数据，而不需要加锁，其实也加了锁，只不过加锁于cpu上，系统开销可忽略不计</div><div class="line">3.使用最小线程。避免创建不需要的线程，比如任务很少，但是创建很多线程来处理，这样会造成大量线程处于等待状态</div><div class="line">4.协程，在单线程里实现多任务调度，并在单线程里维持多个任务间的切换</div></pre></td></tr></table></figure></p>
<h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>有如下代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fx.pattern.cor.handler;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String A = <span class="string">"A"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String B = <span class="string">"B"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> DeadLockDemo().deadLock();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">deadLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (A) &#123;</div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.currentThread().sleep(<span class="number">2000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">synchronized</span> (B) &#123;</div><div class="line">                        System.out.println(<span class="string">'1'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">synchronized</span> (B) &#123;</div><div class="line">                    <span class="keyword">synchronized</span> (A) &#123;</div><div class="line">                        System.out.println(<span class="string">'2'</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        t1.start();</div><div class="line">        t2.start();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这段代码运行之后会引起死锁，t1线程与t2线程互相等待对方释放锁。<br>待程序运行之后，我们采用如下方式来查看jvm对程序的跟踪栈信息：<br><strong>获取当前程序进程id</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.ps aux | grep DeadLockDemo</div></pre></td></tr></table></figure></p>
<p>进程id如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-6eca2941204e96b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DeadLockTest PID.png"></p>
<p><strong>获取当前程序产生的堆栈信息</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2.sudo -u root   jstack -F 32125 &gt; /Users/mark/Desktop/JAVA/dump</div></pre></td></tr></table></figure></p>
<p>获取到的堆栈信息如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-2aed0484ed579c12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="死锁信息.png"></p>
<p>idea中堆栈信息更加明确程序出现死锁的代码行数：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-0bb08fdcd2f2892e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="死锁分析.png"></p>
<h3 id="避免死锁的方法"><a href="#避免死锁的方法" class="headerlink" title="避免死锁的方法"></a>避免死锁的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.避免一个线程同时获取多个锁</div><div class="line">2.避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源</div><div class="line">3.尝试使用定时锁，使用lock.tryLock(timeout)来代替使用内部锁机制。</div><div class="line">4.对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。</div></pre></td></tr></table></figure>
<h2 id="资源限制的挑战"><a href="#资源限制的挑战" class="headerlink" title="资源限制的挑战"></a>资源限制的挑战</h2><h3 id="什么是资源限制"><a href="#什么是资源限制" class="headerlink" title="什么是资源限制"></a>什么是资源限制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">资源限制是指在并发编程时，程序的执行速度受限于计算机硬件资源或软件资源</div></pre></td></tr></table></figure>
<h3 id="资源限制引发的问题"><a href="#资源限制引发的问题" class="headerlink" title="资源限制引发的问题"></a>资源限制引发的问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">并发编程，将代码执行速度加快的原则是将代码中串行执行的部分变成并发执行，但将串行执行的代码演变成并发执行，需要考虑到资源限制，资源受限的情况下，串行到并发的演变反而会使程序执行变得更慢，因为增加了上下文切换和资源调度的时间。</div></pre></td></tr></table></figure>
<h3 id="如何解决资源限制问题"><a href="#如何解决资源限制问题" class="headerlink" title="如何解决资源限制问题"></a>如何解决资源限制问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">硬件资源限制，考虑使用集群并行执行程序，既然单机资源有限，那就让程序在多机上运行。</div><div class="line">软件资源限制，考虑使用资源池将资源复用，比如使用连接池将数据库和Socket连接复用，或者在调用对方webService接口获取数据时，只建立一个连接。</div></pre></td></tr></table></figure>
<h3 id="在资源限制情况下进行并发编程"><a href="#在资源限制情况下进行并发编程" class="headerlink" title="在资源限制情况下进行并发编程"></a>在资源限制情况下进行并发编程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.根据不同的资源限制调整程序的并发度。涉及数据库连接数的sql操作，如果sql语句执行非常快，但是线程数量比数据库连接大很多，则某些线程会被阻塞，等待数据库连接。</div></pre></td></tr></table></figure>
<blockquote>
<p>博客搬家：<a href="http://markfork.com/">大坤的个人博客</a><br>欢迎评论哦~</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 读书笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java并发编程的艺术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[优雅使用Mac]]></title>
      <url>/2017/11/16/%E4%BC%98%E9%9B%85%E4%BD%BF%E7%94%A8Mac/</url>
      <content type="html"><![CDATA[<h2 id="【教程大纲】"><a href="#【教程大纲】" class="headerlink" title="【教程大纲】"></a>【教程大纲】</h2><p>如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-f4af12f668e37ab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<a id="more"></a>
<h2 id="【操作手势设置】"><a href="#【操作手势设置】" class="headerlink" title="【操作手势设置】"></a>【操作手势设置】</h2><p>使用Mac后，可以不再使用鼠标，依靠不同手势动作即可方便操作电脑。</p>
<p><strong>1.点击系统偏好设置</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-c1b5531cf2cd0e2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>
<p><strong>2.点击触控板设置</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-e8779b6e3cf2f644.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png">像我一样设置就好了。</p>
<p><strong>3.设置光标与点按</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-472973f0a785a90a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>像我一样设置就好了。</p>
<p><strong>4.设置滚动缩放</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-aec46af9777d3309.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>像我一样设置就好了。</p>
<p><strong>5.更多手势</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-928906c87527cd96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br>像我一样设置就好了。</p>
<p><strong>手势设置完后，可以先自己尝试10分钟左右，熟悉之后，俺们进行下一步。</strong></p>
<h2 id="【操作系统简介】"><a href="#【操作系统简介】" class="headerlink" title="【操作系统简介】"></a>【操作系统简介】</h2><p>MacOS内核为unix,是区别于windows的一种操作系统内核。</p>
<h2 id="【软件安装】"><a href="#【软件安装】" class="headerlink" title="【软件安装】"></a>【软件安装】</h2><p><strong>输入法安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.打开链接：pinyin.sougou.com/mac/</div><div class="line">2.点击立即下载，下载完后是dmg文件</div><div class="line">3.双击dmg文件，安装。</div><div class="line">4.进入Application 点击搜狗拼音即打开程序。</div><div class="line">5.按压command+大空格键进行输入法的切换。</div></pre></td></tr></table></figure></p>
<p><code>搜狗拼音</code>安装状态如下所示:<br><img src="http://upload-images.jianshu.io/upload_images/2836699-c860ed7928392f9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="应用程序.png"></p>
<p><strong>浏览器安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.四指在触摸板上向下聚拢，打开应用程序聚集页面。</div><div class="line">2.在搜索中输入Safari,点按Safari,打开应用程序。</div><div class="line">3.在搜索框中输入Chrome</div><div class="line">4.点击下载chrome</div><div class="line">5.如上图安装搜狗拼音所示，安装并打开chrome</div></pre></td></tr></table></figure></p>
<p><strong>翻墙软件安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.在Safari 中输入 shadowsocks。</div><div class="line">2.下载安装。</div><div class="line">3.配置翻墙，此处配置非常简单，扫描我分享给你的二维码即可。</div></pre></td></tr></table></figure></p>
<p><strong>印象笔记安装</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.点击链接Safari</div><div class="line">2.输入Evernote，点击下载并安装。</div><div class="line">3.command+n 新建一篇笔记，编写笔记很方便，可以尝试一下。</div></pre></td></tr></table></figure></p>
<hr>
]]></content>
      
        <categories>
            
            <category> 操作系统 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 软件使用 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[k码特权中关于 Redis与MySQL DB 乐观锁应用]]></title>
      <url>/2017/11/14/kcode/</url>
      <content type="html"><![CDATA[<h2 id="1-【背景】"><a href="#1-【背景】" class="headerlink" title="1.【背景】"></a>1.【背景】</h2><hr>
<blockquote>
<p>斐讯路由App 需要新增k码特权模块。</p>
</blockquote>
<h2 id="2-【需求】"><a href="#2-【需求】" class="headerlink" title="2.【需求】"></a>2.【需求】</h2><blockquote>
<p>1.已通过k码激活状态验证的用户可免费领取k码特权商品<br>2.每个用户每天只能领取一张k码特权奖品</p>
</blockquote>
<h2 id="3-【应用场景及难点分析】"><a href="#3-【应用场景及难点分析】" class="headerlink" title="3.【应用场景及难点分析】"></a>3.【应用场景及难点分析】</h2><blockquote>
<p><strong>1.接口数据安全性要求：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.1 当某k码特权商品数据量为1，且高并发情况下，</div><div class="line">1.2 如何防止超卖(即多个用户都抢到了剩余的一个商品)</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a> 
<blockquote>
<p><strong>2.接口性能要求：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">斐讯路由App 现用户量为300w+，日活4w＋，2/8原则分析(**指80%的业务量在20%的时间里完成**)。</div><div class="line">经验可知用户使用斐讯路由App 的持续时间为12小时，</div><div class="line">所以2/8分析后，80%的日活在20%的时间内完成。</div><div class="line">即32000人免费领取k码特权商品要在2.4小时内完成，</div><div class="line">换算成每秒 完成请求数即 QPS = 3.7/s 。</div><div class="line">即每个接口响应请求时间至少要在 270ms 以内。才算是高性能。</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="4-问题分析："><a href="#4-问题分析：" class="headerlink" title="4.问题分析："></a>4.问题分析：</h2><blockquote>
<p><strong>1.读多写少</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">每个用户每日只能领取一个k码特权商品。即1个用户加入请求免费领取k码特权接口多次，在k码商品库存量充足的情况下，只能领取到1个商品，其余请求都应该返回“对不起，您今日已领取k码特权商品”。从这个方面来定义，其属于读多写少的问题。</div></pre></td></tr></table></figure></p>
<p><strong>2.并发量低</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">以斐讯路由现在日活情况为4w＋的数据量来估算、接口并发能力 QPS = 3.7/s ，</div><div class="line">属于低并发，但在k码特权模块优化程度达到一定量时，并发量是否会上升有待考察。</div><div class="line">但总体来说属于并发量不高的场景。</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>也就是说k码特权问题经过模型抽象，已经变成了读多写少、并发量不大，但要保证性能，和数据安全性一致性的问题。</strong></p>
<p>对于这类问题，乐观锁思想可以作为解决这类问题的指导思想。</p>
<h2 id="5-乐观锁思想"><a href="#5-乐观锁思想" class="headerlink" title="5.乐观锁思想"></a>5.乐观锁思想</h2><blockquote>
<p>网上文章对乐观锁理解的误区:</p>
<hr>
<p><strong>1.乐观锁是一种思想，并不是一种具体的技术实现。</strong><br><strong>2.乐观锁类似于CAS无锁编程技术(其实也加锁，只不过在cpu层面)</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">即当多个线程同时并发更新统一个变量，</div><div class="line">采用先select再update的方式，select出当前变量a的副本值b，然后用新值c去更新，</div><div class="line">更新时需要拿select 出来的变量值a的副本值b与当前非副本变量a的值做对比，</div><div class="line">若暂存副本值b与当前变量a非副本值相同，则正常更新，</div><div class="line">如果不同，则认为在当前线程更新之前已经有一个值将a变量更新，</div><div class="line">则更新失败，在并发情况不大的情况下，</div><div class="line">采用循环的方式去更新，总能更新成功，且循环更新次数不会太多。因此CAS也叫自旋锁。</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="6-k码特权-免费领取解决方案"><a href="#6-k码特权-免费领取解决方案" class="headerlink" title="6.k码特权-免费领取解决方案"></a>6.k码特权-免费领取解决方案</h2><hr>
<p><strong>1.用户每日成功领取k码特权商品次数的限制</strong></p>
<blockquote>
<p>采用redis 数据结构 String，记录用户每日免费领取成功次数。并且可以轻松使用redis 缓存的过期 (expire) 机制做每日领次数的控制），用户每日成功领取k码特权的次数次日凌晨清空。<br>为什么不使用数据库来进行用户成功领取k码特权商品次数的控制。当然建立好索引此问题也可以完美解决。<br>使用redis进行用户成功领取k码特权商品次数的控制原因有两个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.因为redis 纯粹的查询快，减轻数据库压力！不用每次都通过数据库二次索引，从磁盘找到目标记录并读入到内存。**</div><div class="line">2.线上配置的redis使用量10%都不到，为了更好的利用硬件资源。**</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>2.用户每日成功领取k码特权次数的并发更改</strong></p>
<blockquote>
<p>从接口安全性考虑，若有用户恶意领取、那么有可能产生一个用户在一天之内领取了多个k码特权奖品，这个是业务需求所不允许的。<br>这里我们使用到了redis 提供的 事务(multi)与watch(乐观锁实现) 机制来控制 用户每日成功领取k码特权次数的并发更改。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">watch机制：对键值进行监控，当被其他客户端改变时，</div><div class="line">当前的客户端的所有操作将会失败，抛出错误信息。</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>3.用户并发更新同一k码特权商品库存、同一商品的具体某个item</strong></p>
<blockquote>
<p>上述问题，属于对竟态资源的并发修改，在接口请求并发量不大、且读多写少的情况下，采用数据库乐观锁来解决问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">数据库乐观锁实现方式：</div><div class="line">在竞态资源(商品)记录上添加一列，update_version，表示更新次数。</div><div class="line">数据库乐观锁实现方式伪代码：</div><div class="line">for(;;)&#123;</div><div class="line">    //获取某k码商品库存，更新版本号 sql</div><div class="line">    $getRewardStcokSql = &apos;select reward_stock,reward_update_version from fx_platform_reward_amount where reward_type_id = &#123;$reward_type_id&#125;&apos;;</div><div class="line">    $getReardStockResult = $model-&gt;query($getRewardStcokSql);</div><div class="line">    if(!$getReardStockResult )&#123;</div><div class="line">        die;</div><div class="line">    &#125; </div><div class="line">    $reward_stock = getReardStockResult[&apos;reward_stock&apos;];</div><div class="line">    $reward_update_version = getReardStockResult[&apos;reward_update_version&apos;];</div><div class="line">    //如果库存量&gt;0</div><div class="line">    if($reward_stock&gt;0)&#123;</div><div class="line">      //更新k码商品库存，版本号需要进行对比，其实本质上是不再使用数据库提供的排它锁，而将排他控制的职责交给选择某条需要更新记录的过滤条件。</div><div class="line">        $updateRewardStockSql = &apos;update fx_platform_reward_amount set reward_stock = reward_stock-1 and reward_update_version = reward_update_version + 1 where reward_type_id = &#123;$reward_type_id&#125; reward_update_version = &#123;$reward_update_version&#125; &apos;;</div><div class="line">        $updateRewardStockResult = $model-&gt;excute($updateRewardStockSql);</div><div class="line">    &#125;</div><div class="line">    //并发更新失败，表示在此用户更新商品库存之前已经有用户更新成功，需要重新尝试更新。</div><div class="line">    if(!$updateRewardStockResult)&#123;</div><div class="line">        continue;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="7-测试结果"><a href="#7-测试结果" class="headerlink" title="7.测试结果"></a>7.测试结果</h2><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">7.1 并发测试，数据能保持一致性</div><div class="line">7.2 用户免费领取k码特权商品响应时间均值为 110ms 左右，</div><div class="line">      用户当日已领取过k码特权奖品的接口响应时间40-55ms左右。</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[UML关系图]]></title>
      <url>/2017/11/14/UML-%E7%BB%9F%E4%B8%80%E5%BB%BA%E6%A8%A1%E8%AF%AD%E8%A8%80/</url>
      <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><hr>
<p>指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系；在Java中此类关系通过关键字extends明确标识，在设计时一般没有争议性；<br><img src="http://upload-images.jianshu.io/upload_images/2836699-3d8208926b18a88d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="继承.jpg"><br>注意：实心线条，实心三角箭头<br><a id="more"></a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><hr>
<p>指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系；在Java中此类关系通过关键字implements明确标识，在设计时一般没有争议性； </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-ba9d49aa7f2765d8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实现.jpg"><br>注意：虚线线条，实心三角箭头</p>
<h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><hr>
<p>可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用；</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-279d58e258f695f5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依赖.jpg"><br>注意：虚心线条，实心普通箭头</p>
<h2 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h2><hr>
<p>他体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，比如我和我的朋友；这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的、关联可以是单向、双向的；表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量； </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-2d4ec4e36dad515d.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="关联.jpg"></p>
<p>注意：实心线条，实心普通箭头</p>
<h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><hr>
<p>聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即has-a的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享；比如计算机与CPU、公司与员工的关系等；表现在代码层面，和关联关系是一致的，只能从语义级别来区分； </p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-219b366246e47f2f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="聚合.jpg"></p>
<h2 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h2><hr>
<p>组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；比如你和你的大脑；表现在代码层面，和关联关系是一致的，只能从语义级别来区分</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-af8aa9c10b6ea61f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="组合.jpg"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-e579a9b3a3e73993.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UML总图.jpg"></p>
<p>完。</p>
]]></content>
      
        <categories>
            
            <category> UML </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThinkPHP 静态资源，公共模板引用方法]]></title>
      <url>/2017/11/14/ThinkPHP%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E7%BB%84%E7%BB%87/</url>
      <content type="html"><![CDATA[<h2 id="ThinkPHP-静态资源引入"><a href="#ThinkPHP-静态资源引入" class="headerlink" title="ThinkPHP 静态资源引入"></a>ThinkPHP 静态资源引入</h2><hr>
<p>ThinkPHP 项目中静态资源一般放置在项目root目录下的Public文件夹下：<br><a id="more"></a><br><img src="http://upload-images.jianshu.io/upload_images/2836699-7962fad5d39f0cd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目目录结构"></p>
<p>在 template文件夹中放置的是一些静态资源，包含js,css，fronts,img.<br>一般情况下比如说网站首页，网站后台，都是采用引入公共模板的方式，传统的方式是采用frame，现在基本上是将Index页面进行拆分，确定不变的部分并拆分成为独立的公共模板，比如header,slider,footer等。</p>
<h2 id="1-引入公共模板"><a href="#1-引入公共模板" class="headerlink" title="1 引入公共模板"></a>1<include file="模板表达式，绝对路径"> 引入公共模板</include></h2><p>在ThinkPHP项目当中，我们采用<include file="">标签将公共模板引入进去。<br>file 属性的内容可以是：’模板表达式/相对路径/绝对路径’’ 三种。</include></p>
<p><1.但是使用模板表达式需要符合thinkphp规范 ：一般是view="" index(控制器)="" header(操作名).html="" ，在这种情况下，我们采用="" ：<include="" file="Public:header">就可以将文件引入，假如现在的文件组织方式是：view/Index(控制器)/xxx/header(操作名).html ,那么引入方式为<include file="Public:xxx:header">。</include></1.但是使用模板表达式需要符合thinkphp规范></p>
<p><2.使用绝对路径：默认情况下我们在index.html 可以通过<include="" file="./Public/common/header.html">将公共头文件引入进去。因为./表示在根目录下，这种引入方式是在项目根目录下Public文件夹中存在项目需要的静态资源时，可以起效。</2.使用绝对路径：默认情况下我们在index.html></p>
<p>####2 公共静态资源，js,css,引入<br>这个我们可以在项目每个模块中的common文件夹中设置config.php 添加’TMPL_PARSE_STRING’：比如Admin模块中的config.php设置如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-99ae0831e789eee0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="需要设置静态资源路径的配置文件"></p>
<p>设置如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-50a302900bf4e2a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="静态资源文件路径配置"><br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&apos;TMPL_PARSE_STRING&apos;=&gt;array( </div><div class="line">   &apos;__CSS__&apos; =&gt; __ROOT__.&apos;/Public/template/assets/css&apos;, </div><div class="line">   &apos;__JS__&apos; =&gt; __ROOT__.&apos;/Public/template/assets/js&apos;,  </div><div class="line">  &apos;__IMG__&apos; =&gt; __ROOT__.&apos;/Public/template/assets/img&apos;,  </div><div class="line">  &apos;__FRONTS__&apos; =&gt; __ROOT__.&apos;/Public/template/assets/front&apos;</div></pre></td></tr></table></figure></p>
<p>可以直接复制。<br>这些css，js 静态文件是被header，footer.html文件所需要的，header中引入项目所需要的css，footer中引入项目所需要的js文件。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-61baf8643e34805a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="静态资源引入方式"></p>
<p>完。</p>
]]></content>
      
        <categories>
            
            <category> ThinkPHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ThinkPHP 接入 SeasLog 日志组件]]></title>
      <url>/2017/11/14/thinkphp-SeasLog%E6%97%A5%E5%BF%97%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>##【背景】</p>
<hr>
<p>  为实现开发前期联调bug 定位、线上bug快速定位、快速响应，遂暂为斐讯路由后台 Api 模块添加日志记录支持。</p>
<a id="more"></a>
<p>##【SeasLog 简介】</p>
<hr>
<pre><code>1. 国产log组件
2. 简洁配置

3.应用简单、性能强劲
4.分模块、分级别记录日志。
   分模块：如斐讯路由后台分为 Api 模块、后台Admin模块。
   分级别：支持8种日志记录级别，对斐讯路由后台来说日志记录级别定义为—debug、info、emergency 即可。
5.日志记录策略：日志-&gt;内存-&gt;文件
更详细介绍，github主页：https://github.com/Neeke/SeasLog
</code></pre><p>##【SeasLog安装流程】</p>
<hr>
<pre><code>1.打开网址 http://pecl.php.net/
2.选择seaslog 并点击获取箭头
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/2836699-35ca6ce40369d0ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="09BF40A1-1A0C-4BF8-8589-8E690F97922B.png"></p>
<pre><code>3.点击seaslog
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/2836699-48c69df592dcb26c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="770A85EE-4100-4C46-BA92-E80842B06D51.png"></p>
<p>4.下载最新版本SeasLog</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-a7854e70a2a521cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3401D24C-3075-467F-A9C1-BE9E23ED2D05.png"></p>
<p>5.安装php seaslog 扩展<br>5.1解压压缩包</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-ae861f881255cfff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="EDCC1B98-A9E4-465D-89E4-9C22475AB90F.png"></p>
<p>5.2使用phpize 编译安装seaslog 外挂模块<br>  什么是phpize？链接如下：<a href="http://blog.csdn.net/czhphp/article/details/68067324" target="_blank" rel="external">http://blog.csdn.net/czhphp/article/details/68067324</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-cc8e33c8535f316f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="C91A3F7A-227F-4E80-8992-49C9D122A7F5.png"></p>
<p>由上至下之行前两个命令，执行完phpize 命令之后，会看到文件夹下多出了 configure 文件夹</p>
<p>5.3执行如下命令 ./configure — with-php-config=(服务器上php安装路径)/usr/local/php/bin/php-config<br>“＝” 后面的路径为本地php-config 目录<br><img src="http://upload-images.jianshu.io/upload_images/2836699-a85c33691bce2de3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="074D8E5A-59B8-48FB-B0EE-2F28557447DA.png"></p>
<p>5.4执行如下命令 <strong>make &amp;&amp; make install</strong> 编译 SeasLog 模块</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-456d8f4043ffb701.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="F1A69EF8-776E-4E3A-84D2-B515268E9E59.png"></p>
<p>5.5 安装成功，安装成功之后，扩展模块所在文件路径如下图所示<br>/usr/local/Cellar/php55/5.5.38_11/lib/php/extensions/no-debug-non-zts-20121212/ 本机</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-12fab8255aa3c44f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="E54236A9-7D7F-4C33-82EB-0D4423B651DE.png"></p>
<p>5.6在php.ini 中配置 seaslog.so 扩展，应该是在etc文件夹下<br><img src="http://upload-images.jianshu.io/upload_images/2836699-efd918b4f4139d6c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="8DBF1CE2-CBEA-47DD-8A56-16207B849913.png"></p>
<p>5.7 重启php应用服务器</p>
<p>5.8 验证 seaslog有没有安装成功，访问phpInfo.php 文件</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-da859d5f30ed4680.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B30137BC-6914-4FD3-B9B1-FAC9C1B724EC.png"></p>
<p>SeasLog 为国产日志软件，支持！<br>gitHub 地址:<a href="https://github.com/Neeke/SeasLog" target="_blank" rel="external">https://github.com/Neeke/SeasLog</a><br>作者自述：<a href="https://github.com/Neeke/SeasLog/blob/master/README.md" target="_blank" rel="external">https://github.com/Neeke/SeasLog/blob/master/README.md</a></p>
<p>5.9 在 php.ini 中配置 seaslog 基础配置<br>      关于 SeasLog 的配置跟统一开发环境一致。</p>
<p>5.10 重新访问php info 看是否配置成功</p>
<p>##【现阶段SeasLog实践情况】</p>
<hr>
<p>  已在统一开发环境实现斐讯路由App 5.0.0 新增接口的日志记录。<br>  若测试环境配置通过，可立即接入。</p>
<p>##【SeasLog  对 接口响应性能的影响】</p>
<hr>
<p>   理论上SeasLog 对接口响应时间肯定会有延迟影响。</p>
<pre><code>但因SeasLog 对应用系统产生的日志是先写入存储到内存，当内存中写入的日志达到阀值(内存中日志达到1000行刷新一次，一次访问结束刷新一次),便刷新日志内容到文件当中。（缓冲区）
</code></pre><p>  性能测试：</p>
<p>  虽有理论支持， 建议仍需要做性能测试。</p>
<p>##【SeasLog 与 Kibana 结合】</p>
<hr>
<p>  SeasLog 负责生产日志。</p>
<p>   Kibana负责消费、分析日志。</p>
<p>   烦请运维同事先在测试环境配置、多谢！</p>
]]></content>
      
        <categories>
            
            <category> ThinkPHP </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Controller层设置AOP]]></title>
      <url>/2017/11/14/Spring-Controller%E5%B1%82%E8%AE%BE%E7%BD%AEAop/</url>
      <content type="html"><![CDATA[<blockquote>
<p>近期公司需要做一个web项目，项目中有需求是需要记录特定管理员的操作。操作属性包括：操作时间、操作人、触发数据量等。<br>自然而然的就想到了<strong>面向切面编程(AOP)</strong>。<br><a id="more"></a><br>项目初步的技术选型是：<br>Intellij idea+gradle+spring+spring security+hibernate+spring aop+jsp完成项目需求。</p>
</blockquote>
<p>项目结构图如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-7e8a82434485de28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目结构图"><br>项目创建初期没有web.xml设置如下：<br>file-&gt;project structs-&gt;facets-&gt;web-&gt;Deployment Descriptors-&gt;➕<br>注意创建的web.xml存在位置与上图中的项目结构图是对应的。</p>
<h2 id="1-各配置文件："><a href="#1-各配置文件：" class="headerlink" title="1.各配置文件："></a>1.各配置文件：</h2><hr>
<p><strong>1.1 build.gradle 脚本文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">group &apos;com.fxmms&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;idea&apos;</div><div class="line">apply plugin: &apos;war&apos;</div><div class="line">sourceCompatibility = 1.8</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line"></div><div class="line">    mavenLocal()</div><div class="line">    maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</div><div class="line">    maven &#123; url &quot;http://repo.maven.apache.org/maven2/&quot;&#125;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    // servlet-api</div><div class="line">    compile group: &apos;javax.servlet&apos;, name: &apos;servlet-api&apos;, version: &apos;2.5&apos;</div><div class="line">    //spring相关</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-webmvc&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-orm&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-aspects&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    //hibernate jpa相关</div><div class="line">    compile group: &apos;org.jboss.spec.javax.transaction&apos;, name: &apos;jboss-transaction-api_1.2_spec&apos;, version: &apos;1.0.1.Final&apos;</div><div class="line">    compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-entitymanager&apos;, version: &apos;5.2.2.Final&apos;</div><div class="line">    //c3p0连接池</div><div class="line">    compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-c3p0&apos;, version: &apos;5.2.2.Final&apos;</div><div class="line">    //ehcahe二级缓存</div><div class="line">    compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-ehcache&apos;, version: &apos;5.2.2.Final&apos;</div><div class="line">    //mysql</div><div class="line">    compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;5.1.39&apos;</div><div class="line">    //springData</div><div class="line">    compile group: &apos;org.springframework.data&apos;, name: &apos;spring-data-jpa&apos;, version: &apos;1.10.3.RELEASE&apos;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.2 web.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></div><div class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--配置启动IOC容器的Listener--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置字符编码过滤器  必须配置在所有过滤器的最前面 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 配置看可以把POST请求转为PUT，DELETE请求的Filter --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 配置 OpenEntityManagerInViewFilter. 可以解决懒加载异常的问题 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenEntityManagerInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>OpenEntityManagerInViewFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!--配置SpringMVC的DispatcherServlet--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span><span class="comment">&lt;!--这里&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;param-name&lt;/span&gt;名称必须为&lt;span style="font-family: Arial, Helvetica, sans-serif;"&gt;contextConfigLocation&lt;/span&gt;--&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:dispatcher-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.3  Spring 配置文件－applicationContext.xml</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</div><div class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</div><div class="line">       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</div><div class="line">       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</div><div class="line">       xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</div><div class="line">       xmlns:jpa=&quot;http://www.springframework.org/schema/data/jpa&quot;</div><div class="line">       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       http://www.springframework.org/schema/tx</div><div class="line">       http://www.springframework.org/schema/tx/spring-tx.xsd</div><div class="line">       http://www.springframework.org/schema/data/jpa</div><div class="line">       http://www.springframework.org/schema/data/jpa/spring-jpa.xsd</div><div class="line">       &quot;&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置自动扫描的包 --&gt;</div><div class="line">    &lt;context:component-scan base-package=&quot;com.fxmms&quot;&gt;</div><div class="line">        &lt;context:exclude-filter type=&quot;annotation&quot;</div><div class="line">                                expression=&quot;org.springframework.stereotype.Controller&quot; /&gt;</div><div class="line">        &lt;!--&lt;context:exclude-filter type=&quot;annotation&quot;--&gt;</div><div class="line">                                &lt;!--expression=&quot;org.springframework.web.bind.annotation.ControllerAdvice&quot; /&gt;--&gt;</div><div class="line">    &lt;/context:component-scan&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置数据源 --&gt;</div><div class="line">    &lt;context:property-placeholder location=&quot;classpath:db.properties&quot; /&gt;</div><div class="line">    &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</div><div class="line">        &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.user&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driverClass&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.jdbcUrl&#125;&quot;&gt;&lt;/property&gt;</div><div class="line"></div><div class="line">        &lt;!-- 配置其他属性 --&gt;</div><div class="line">        &lt;property name=&quot;initialPoolSize&quot; value=&quot;$&#123;jdbc.initPoolSize&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;maxPoolSize&quot; value=&quot;$&#123;jdbc.maxPoolSize&#125;&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;!-- 配置JPA部分 --&gt;</div><div class="line">    &lt;!-- 配置JPA的EntityManagerFactory --&gt;</div><div class="line">    &lt;bean id=&quot;entityManagerFactory&quot;</div><div class="line">          class=&quot;org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean&quot;&gt;</div><div class="line">        &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;jpaVendorAdapter&quot;&gt;</div><div class="line">            &lt;bean class=&quot;org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter&quot;&gt;&lt;/bean&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;property name=&quot;packagesToScan&quot; value=&quot;com.fxmms&quot;&gt;&lt;/property&gt;</div><div class="line">        &lt;property name=&quot;jpaProperties&quot;&gt;</div><div class="line">            &lt;props&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.ejb.naming_strategy&quot;&gt;org.hibernate.cfg.ImprovedNamingStrategy&lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;update&lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.show_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.format_sql&quot;&gt;true&lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.dialect&quot;&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/prop&gt;</div><div class="line"></div><div class="line">                &lt;prop key=&quot;hibernate.cache.use_second_level_cache&quot;&gt;true&lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.cache.region.factory_class&quot;&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory</div><div class="line">                &lt;/prop&gt;</div><div class="line">                &lt;prop key=&quot;hibernate.cache.use_query_cache&quot;&gt;true&lt;/prop&gt;</div><div class="line">            &lt;/props&gt;</div><div class="line">        &lt;/property&gt;</div><div class="line">        &lt;!--使用二級緩存--&gt;</div><div class="line">        &lt;property name=&quot;sharedCacheMode&quot; value=&quot;ENABLE_SELECTIVE&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置事务 --&gt;</div><div class="line">    &lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;&gt;</div><div class="line">        &lt;property name=&quot;entityManagerFactory&quot; ref=&quot;entityManagerFactory&quot;&gt;&lt;/property&gt;</div><div class="line">    &lt;/bean&gt;</div><div class="line">    &lt;!-- 配置支持基于注解的事务 --&gt;</div><div class="line">    &lt;tx:annotation-driven transaction-manager=&quot;transactionManager&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;!-- 配置SpringData部分 --&gt;</div><div class="line">    &lt;jpa:repositories base-package=&quot;com.fxmms&quot;</div><div class="line">                      entity-manager-factory-ref=&quot;entityManagerFactory&quot;&gt;</div><div class="line"></div><div class="line">    &lt;/jpa:repositories&gt;</div><div class="line">&lt;/beans&gt;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.4 Spring mvc配置文件－dispatcher-servlet.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop-4.3.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms"</span> <span class="attr">use-default-filters</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--&lt;context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/&gt;--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置视图解析器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;!– 配置 MultipartResolver 文件上传–&gt;</span></div><div class="line"><span class="comment">     &lt;bean id="multipartResolver"</span></div><div class="line"><span class="comment">           class="org.springframework.web.multipart.commons.CommonsMultipartResolver"&gt;</span></div><div class="line"><span class="comment">         &lt;property name="defaultEncoding" value="UTF-8"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">         &lt;property name="maxUploadSize" value="1024000000"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">     &lt;/bean&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 把切面类交由Spring容器来管理 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logAspectBean"</span> <span class="attr">class</span>=<span class="string">"com.fxmms.aspect.LogAnnotationAspect"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 启用spring对AspectJ注解的支持 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.5 数据库连接文件jdbc－db.properties </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jdbc.user=root</div><div class="line">jdbc.password=</div><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">jdbc.jdbcUrl=jdbc:mysql://localhost/fxmms?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line"></div><div class="line">jdbc.initPoolSize=5</div><div class="line">jdbc.maxPoolSize=20</div></pre></td></tr></table></figure></p>
<p> <strong>1.6 aspect包中切面（封装横切关注点）文件－ LogAnnotationAspect.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/10/31.</span></div><div class="line"><span class="comment"> * 日志切面类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAnnotationAspect</span> </span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</div><div class="line">    <span class="comment">//定义切入点</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.fxmms.controller.*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">allMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//针对指定的切入点表达式选择的切入点应用前置通知</span></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.fxmms.controller.*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint call)</span> </span>&#123;</div><div class="line"></div><div class="line">        String className = call.getTarget().getClass().getName();</div><div class="line">        String methodName = call.getSignature().getName();</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"【注解-前置通知】:"</span> + className + <span class="string">"类的"</span></div><div class="line">                + methodName + <span class="string">"方法开始了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//访问命名切入点来应用后置通知</span></div><div class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"allMethod()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturn</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"【注解-后置通知】:方法正常结束了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//应用最终通知</span></div><div class="line">    <span class="meta">@After</span>(<span class="string">"allMethod()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"【注解-最终通知】:不管方法有没有正常执行完成,"</span></div><div class="line">                + <span class="string">"一定会返回的"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//应用异常抛出后通知</span></div><div class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"allMethod()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterThrowing</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"【注解-异常抛出后通知】:方法执行时出异常了"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//应用周围通知</span></div><div class="line">    <span class="comment">//@Around("allMethod()")</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint call)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">this</span>.before(call);<span class="comment">//相当于前置通知</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            result = call.proceed();</div><div class="line">            <span class="keyword">this</span>.afterReturn(); <span class="comment">//相当于后置通知</span></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            <span class="keyword">this</span>.afterThrowing();  <span class="comment">//相当于异常抛出后通知</span></div><div class="line">            <span class="keyword">throw</span> e;</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">this</span>.after();  <span class="comment">//相当于最终通知</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.7 dao包中数据库访问文件－AccountDao.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">package com.fxmms.dao;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by mark on 16/10/31.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class AccountDao &#123;</div><div class="line">    public void save(String loginname, String password) &#123;</div><div class="line">        //Do data access</div><div class="line">        System.out.println(&quot;进行数据操作&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.8 业务逻辑层(service)-AccountService.java 其中注入AccountDao.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.fxmms.service;</div><div class="line">import com.fxmms.dao.AccountDao;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Component;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by mark on 16/10/31.</div><div class="line"> */</div><div class="line">@Component</div><div class="line">public class AccountService &#123;</div><div class="line">    @Autowired</div><div class="line">    private AccountDao accountDao;</div><div class="line"></div><div class="line">    public void save(String loginname, String password) &#123;</div><div class="line">        accountDao.save(loginname, password);</div><div class="line">        /*throw new RuntimeException(&quot;故意抛出一个异常。。。。&quot;);*/</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p><strong>1.9 Controller层 IndexController.java 其中注入AccountService.java </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.fxmms.controller;</div><div class="line"></div><div class="line">import com.fxmms.service.AccountService;</div><div class="line">import org.springframework.beans.factory.annotation.Autowired;</div><div class="line">import org.springframework.stereotype.Controller;</div><div class="line">import org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by mark on 16/10/31.</div><div class="line"> */</div><div class="line">@Controller</div><div class="line">public class IndexController &#123;</div><div class="line">    @Autowired(required = true)</div><div class="line">    AccountService accountService;</div><div class="line"></div><div class="line">    @RequestMapping(&quot;/index&quot;)</div><div class="line">    public String index() &#123;</div><div class="line">        accountService.save(&quot;张晓&quot;,&quot;asdasdas&quot;);</div><div class="line">        return &quot;index&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h2 id="2-测试用例"><a href="#2-测试用例" class="headerlink" title="2.测试用例"></a>2.测试用例</h2><hr>
<blockquote>
<p>采用junit进行单元测试<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import com.fxmms.controller.IndexController;</div><div class="line">import org.junit.Test;</div><div class="line">import org.springframework.context.ApplicationContext;</div><div class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div class="line">/**</div><div class="line"> * Created by mark on 16/10/31.</div><div class="line"> */</div><div class="line">public class SpringAopTest &#123;</div><div class="line">    @Test</div><div class="line">    public void inteceptorTest() &#123;</div><div class="line">        ApplicationContext ctx = new ClassPathXmlApplicationContext(&quot;dispatcher-servlet.xml&quot;);</div><div class="line">        IndexController bean = (IndexController) ctx.getBean(&quot;indexController&quot;);</div><div class="line">        bean.index();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">【注解-前置通知】:com.fxmms.controller.IndexController类的index方法开始了</div><div class="line">进行数据操作</div><div class="line">【注解-最终通知】:不管方法有没有正常执行完成,一定会返回的</div><div class="line">【注解-后置通知】:方法正常结束了</div></pre></td></tr></table></figure></p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><hr>
<p>当需要在Controller层设置AOP时，那么需要将  <strong><aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy></strong> 配置到dispatcher-servlet.xml(MVC文件当中)当中并且设置包扫描规则为<strong>“use-default-filters=”true”</strong>。<br>将横切关注点封装为切面，切面中方法的注入是根据切点表达式来决定的。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义注解与Spring AOP实现日志组件(可重用)]]></title>
      <url>/2017/11/14/Spring-Aop%E6%B7%BB%E5%8A%A0%E9%A1%B9%E7%9B%AE%E6%97%A5%E5%BF%97%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="项目需求"><a href="#项目需求" class="headerlink" title="项目需求"></a>项目需求</h2><hr>
<blockquote>
<p><strong>需求1: </strong>web项目一般而言都需要日志记录，比较常用的是实用log4j来记录项目的异常日志，将日志单独存储于文件当中，这样有利于我们快速进行bug 排解。<br><strong>需求2: </strong>异常的记录一般就是将异常的堆栈保存在文件中，这样文件大小会急剧上升，有效异常信息也不能被立即定位，有没有一种方式可以可以让我们重写异常记录，并保存在异常日志文件当中呢。<br><strong>需求3: </strong>在异常日志之上，我们一般还需要对系统中各角色的各个重要操作进行一些日志记录，以方便我们找到操作人，以及责任人。</p>
</blockquote>
<p>针对1中的需求，我们大家熟悉的是实用log4j进行日志记录。配置简单，实现快速。<br>针对2，3中的需求我们一般采用的是基于拦截器实现（Aop思想的一种实现方式）在方法操作之前进行一定的处理，获取操作人、操作方法名、操作参数，异常捕获与记录，这样实现也是完全可以的。<br>今天记录的是基于<strong>自定义注解</strong>和<strong>面向切面(AOP)</strong>进行统一<strong>操作日志</strong>以及<strong>异常日志</strong>记录的实现。<br><a id="more"></a></p>
<h2 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h2><hr>
<p>项目中代码如下所示：<br>1.首先定义两个注解：分别为<strong>SystemControllerLog</strong>(用于拦截Controller层操作注解，起切点表达式作用，明确切面应该从哪里注入),<strong>SystemServiceLog</strong>(用于拦截Service层操作注解，起切点表达式作用，明确切面应该从哪里注入)<br>这两个注解在切面中定义切点表达式的时候会用到。<br><strong>SystemControllerLog.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.log.logannotation;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/25.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 自定义注解，拦截Controller</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemControllerLog &#123;</div><div class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>SystemServiceLog</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.log.logannotation;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/25.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 自定义注解 拦截service</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SystemServiceLog &#123;</div><div class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.接下来定义切面类，这里面主要定义了几个通知，在调用被代理对象目标方法前后，或目标方法抛出异常之后使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.log.logaspect;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.log.logannotation.SystemControllerLog;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.log.logannotation.SystemServiceLog;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.security.ScottSecurityUtil;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.slf4j.Logger;</div><div class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestContextHolder;</div><div class="line"><span class="keyword">import</span> org.springframework.web.context.request.ServletRequestAttributes;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 切点类</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span> tiangai</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span> 2014-08-05 Pm 20:35</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemLogAspect</span> </span>&#123;</div><div class="line">    <span class="comment">//注入Service用于把日志保存数据库 nodo service 层实现</span></div><div class="line"></div><div class="line">    <span class="comment">//本地异常日志记录对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SystemLogAspect.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Service层切点 使用到了我们定义的 SystemServiceLog 作为切点表达式。</span></div><div class="line"><span class="comment">     * 而且我们可以看出此表达式基于 annotation。</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.fxmms.common.log.logannotation.SystemServiceLog)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serviceAspect</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Controller层切点 使用到了我们定义的 SystemControllerLog 作为切点表达式。</span></div><div class="line"><span class="comment">     * 而且我们可以看出此表达式是基于 annotation 的。</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.fxmms.common.log.logannotation.SystemControllerLog)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">controllerAspect</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 前置通知 用于拦截Controller层记录用户的操作</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 连接点</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"controllerAspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBefore</span><span class="params">(JoinPoint joinPoint)</span> </span>&#123;</div><div class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</div><div class="line">        <span class="comment">//请求的IP</span></div><div class="line">        String ip = request.getRemoteAddr();</div><div class="line">        System.out.println(ip+<span class="string">"sdsdsdsdsd"</span>);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//控制台输出</span></div><div class="line">            System.out.println(<span class="string">"=====前置通知开始====="</span>);</div><div class="line">            Object object = joinPoint.getTarget();</div><div class="line">            System.out.println(<span class="string">"请求方法:"</span> + (joinPoint.getTarget().getClass().getName() + <span class="string">"."</span> + joinPoint.getSignature().getName() + <span class="string">"()"</span>));</div><div class="line">            System.out.println(<span class="string">"方法描述:"</span> + getControllerMethodDescription(joinPoint));</div><div class="line">            System.out.println(<span class="string">"请求人:"</span> + ScottSecurityUtil.getLoginName());</div><div class="line">            System.out.println(<span class="string">"请求IP:"</span> + ip);</div><div class="line">            <span class="comment">//构造数据库日志对象</span></div><div class="line"></div><div class="line">            <span class="comment">//保存数据库</span></div><div class="line"></div><div class="line">            System.out.println(<span class="string">"=====前置通知结束====="</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="comment">//记录本地异常日志</span></div><div class="line">            logger.error(<span class="string">"==前置通知异常=="</span>);</div><div class="line">            logger.error(<span class="string">"异常信息:&#123;&#125;"</span>, e.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 异常通知 用于拦截service层记录异常日志</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@AfterThrowing</span>(pointcut = <span class="string">"serviceAspect()"</span>, throwing = <span class="string">"e"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAfterThrowing</span><span class="params">(JoinPoint joinPoint, Throwable e)</span> </span>&#123;</div><div class="line">        HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();</div><div class="line">        <span class="comment">//获取请求ip</span></div><div class="line">        String ip = request.getRemoteAddr();</div><div class="line">        <span class="comment">//获取用户请求方法的参数并组织成字符串</span></div><div class="line">        String params = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (joinPoint.getArgs() != <span class="keyword">null</span> &amp;&amp; joinPoint.getArgs().length &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; joinPoint.getArgs().length; i++) &#123;</div><div class="line">                params += joinPoint.getArgs()[i]+ <span class="string">","</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//控制台输出</span></div><div class="line">            System.out.println(<span class="string">"=====异常通知开始====="</span>);</div><div class="line">            System.out.println(<span class="string">"异常代码:"</span> + e.getClass().getName());</div><div class="line">            System.out.println(<span class="string">"异常信息:"</span> + e.getMessage());</div><div class="line">            System.out.println(<span class="string">"异常方法:"</span> + (joinPoint.getTarget().getClass().getName() + <span class="string">"."</span> + joinPoint.getSignature().getName() + <span class="string">"()"</span>));</div><div class="line">            System.out.println(<span class="string">"方法描述:"</span> + getServiceMthodDescription(joinPoint));</div><div class="line">            System.out.println(<span class="string">"请求人:"</span> + ScottSecurityUtil.getLoginName());</div><div class="line">            System.out.println(<span class="string">"请求IP:"</span> + ip);</div><div class="line">            System.out.println(<span class="string">"请求参数:"</span> + params);</div><div class="line">            <span class="comment">//构造数据库日志对象</span></div><div class="line"></div><div class="line">            <span class="comment">//保存数据库</span></div><div class="line"></div><div class="line">            System.out.println(<span class="string">"=====异常通知结束====="</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="comment">//记录本地异常日志</span></div><div class="line">            logger.error(<span class="string">"==异常通知异常=="</span>);</div><div class="line">            logger.error(<span class="string">"异常信息:&#123;&#125;"</span>, ex);</div><div class="line">        &#125;</div><div class="line">         <span class="comment">//录本地异常日志</span></div><div class="line">        logger.error(<span class="string">"异常方法:&#123;&#125;异常代码:&#123;&#125;异常信息:&#123;&#125;参数:&#123;&#125;"</span>, joinPoint.getTarget().getClass().getName() + joinPoint.getSignature().getName(), e.getClass().getName(), e.getMessage(), params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取注解中对方法的描述信息 用于service层注解</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 方法描述</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getServiceMthodDescription</span><span class="params">(JoinPoint joinPoint)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String targetName = joinPoint.getTarget().getClass().getName();</div><div class="line">        String methodName = joinPoint.getSignature().getName();</div><div class="line">        Object[] arguments = joinPoint.getArgs();</div><div class="line">        Class targetClass = Class.forName(targetName);</div><div class="line">        Method[] methods = targetClass.getMethods();</div><div class="line">        String description = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</div><div class="line">                Class[] clazzs = method.getParameterTypes();</div><div class="line">                <span class="keyword">if</span> (clazzs.length == arguments.length) &#123;</div><div class="line">                    description = method.getAnnotation(SystemServiceLog.class).description();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取注解中对方法的描述信息 用于Controller层注解</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切点</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 方法描述</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getControllerMethodDescription</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        String targetName = joinPoint.getTarget().getClass().getName();</div><div class="line">        String methodName = joinPoint.getSignature().getName();</div><div class="line">        Object[] arguments = joinPoint.getArgs();</div><div class="line">        Class targetClass = Class.forName(targetName);</div><div class="line">        Method[] methods = targetClass.getMethods();</div><div class="line">        String description = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</div><div class="line">            <span class="keyword">if</span> (method.getName().equals(methodName)) &#123;</div><div class="line">                Class[] clazzs = method.getParameterTypes();</div><div class="line">                <span class="keyword">if</span> (clazzs.length == arguments.length) &#123;</div><div class="line">                    description = method.getAnnotation(SystemControllerLog.class).description();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> description;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面的切面类中定义了公共切点 <strong>serviceAspect</strong>、<strong>serviceAspect</strong>，并实现了Controller层的前置通知，Service业务逻辑层的异常通知。<br>其中预留了保存日志到数据库的代码段，我们可以根据业务自行进行填充。<br>3.创建好切点、切面类之后，如何让他起作用呢，我们需要在配置文件中进行配置了。我将web项目中关于不同层的配置文件进行的切割，数据访问层配置文件是data-access.xml、业务逻辑层是service-application.xml、控制层是defalut-servlet.xml<br>首先看defalut-servlet.xml中的配置文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--开启aop--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--json解析--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.www.controller"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--扫描日志记录切面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.log"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置异常处理器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.exception_handler"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--因为web.xml中defaultDispatcherServlet对所有请求进行了拦截，所以对一些.css .jpg .html .jsp也进行了拦截，所以此配置项</span></div><div class="line"><span class="comment">    保证对对静态资源不拦截--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置文件上上传--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意:</strong>以上配置有两个重要的点：</p>
<blockquote>
<p>1.<!--扫描日志记录切面-->项，<br>2.<!--开启aop--> <aop:aspectj-autoproxy proxy-target-class="true"><br><strong>proxy-target-class=”true”</strong>默认是false,更改为true时使用的是cglib动态代理。这样只能实现对Controller层的日志记录。</aop:aspectj-autoproxy></p>
</blockquote>
<p><strong>service-application.xml</strong>配置AOP，实现对Service层的日志记录.</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task/spring-task.xsd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--开启AOP--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--设置定时任务--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.www"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--ioc管理切面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.log"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样Service也是可以实现操作、异常日志记录了。<br>4.在代码中使用自定义注解，相当于在目标方法上设置了一个切点，通过切点注入切面。<br>Controller层上运用SystemControllerLog注解:<br>TestNullPointExceptionController.java(验证Controller层中异常，Controller中调用Service层代码)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.controller.admin;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.log.logannotation.SystemControllerLog;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.service.TestExceptionLog;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/25.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestNullPointExceptionController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(TestNullPointExceptionController.class);</div><div class="line">    <span class="comment">//自动注入一个Service层类对象</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    TestExceptionLog testExceptionLog;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/admin/testexcption"</span>)</div><div class="line">    <span class="meta">@SystemControllerLog</span>(description = <span class="string">"testException"</span>)<span class="comment">//使用   SystemControllerLog注解，此为切点</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testException</span><span class="params">(String str)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> testExceptionLog.equalStr(str);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong> TestExceptionLog.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.log.logannotation.SystemServiceLog;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/25.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestExceptionLog</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Log logger = LogFactory.getLog(TestExceptionLog.class);</div><div class="line"></div><div class="line">    <span class="meta">@SystemServiceLog</span>(description = <span class="string">"equalstr"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">equalStr</span><span class="params">(String str)</span> </span>&#123;</div><div class="line">        str = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (str.equals(<span class="string">"sd"</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"sd"</span>;</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"sd"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>我在其中手动设置str = null，用于模拟前台输入。<br>程序在运行时会报运行时异常。<br>最终启动项目项目console日志输出如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-243b37509dacd30e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志控制台输出"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-5596ec8f84564523.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error.log输出"></p>
<p>这样就完成了自定义注解&amp;Aop&amp;自定义异常&amp;操作日志的记录，而且自定义的注解与切面可以进行重用，操作日志与异常日志可以进行数据库记录，后期甚至可以做一个关于异常分析的系统，我们可以直接从日志后台系统中查看异常出现的频率，以及定位异常的发声位置，明确操作人等。<br>完。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[自定义注解与Spring AOP实现为原程序加入Redis缓存支持(可重用)]]></title>
      <url>/2017/11/14/Spring-Aop/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><blockquote>
<ul>
<li>数据访问采用ORM方式（Hibernate） 直接访问数据库，在访问量小、并发性小、数据量小时，可正常访问，反之则服务响应能力低。</li>
</ul>
</blockquote>
<h2 id="目标-amp-要解决的问题"><a href="#目标-amp-要解决的问题" class="headerlink" title="目标&amp;要解决的问题"></a>目标&amp;要解决的问题</h2><blockquote>
<ul>
<li>自定义注解&amp;Spring AOP为项目加入Redis缓存依赖提高应用程序的响应能力(可重用)</li>
</ul>
</blockquote>
<p>项目扩充承接于<a href="http://www.jianshu.com/p/25039d901ac2" target="_blank" rel="external">http://www.jianshu.com/p/25039d901ac2</a></p>
<a id="more"></a>
<h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><blockquote>
<p>设置缓存的失效策略，缓存数据的Struct选取，切面(Aspect)的编写</p>
</blockquote>
<h2 id="方法-amp-扩充步骤"><a href="#方法-amp-扩充步骤" class="headerlink" title="方法&amp;扩充步骤"></a>方法&amp;扩充步骤</h2><p><strong>1.扩充build.gradle 脚本文件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//https://mvnrepository.com/artifact/org.springframework.data/spring-data-redis 项目添加redis支持</div><div class="line">    compile group: &apos;org.springframework.data&apos;, name: &apos;spring-data-redis&apos;, version: &apos;1.4.1.RELEASE&apos;</div><div class="line">    // https://mvnrepository.com/artifact/redis.clients/jedis redis 基于java的Redis客户端调用实现</div><div class="line">    compile group: &apos;redis.clients&apos;, name: &apos;jedis&apos;, version: &apos;2.6.1&apos;</div><div class="line">    // https://mvnrepository.com/artifact/com.alibaba/fastjson</div><div class="line">    // 采用阿里巴巴fastjson 进行对象&amp;json字符串的序列化与反序列化</div><div class="line">    compile group: &apos;com.alibaba&apos;, name: &apos;fastjson&apos;, version: &apos;1.2.21&apos;</div></pre></td></tr></table></figure></p>
<p><strong>2.扩充Spring 配置文件，添加Redis相关Java Bean 到Ioc容器中</strong><br>为了符合开闭原则，重新创建Spring 配置文件 spring-redis.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"</span></span></div><div class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPoolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></div><div class="line">       <span class="comment">&lt;!-- &lt;property name="max" value="$&#123;redis.maxActive&#125;" /&gt;</span></div><div class="line"><span class="comment">        &lt;property name="maxWait" value="$&#123;redis.maxWait&#125;" /&gt;--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.connection.jedis.JedisConnectionFactory"</span></span></div><div class="line"><span class="tag">          <span class="attr">p:host-name</span>=<span class="string">"127.0.0.1"</span> <span class="attr">p:port</span>=<span class="string">"6379"</span> <span class="attr">p:password</span>=<span class="string">"ls"</span>  <span class="attr">p:pool-config-ref</span>=<span class="string">"jedisPoolConfig"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"redisTemplateForString"</span> <span class="attr">class</span>=<span class="string">"org.springframework.data.redis.core.StringRedisTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span>   <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>3.自定义两个注解</strong></p>
<blockquote>
<ul>
<li><strong>RedisCahe:</strong> 标识缓存 注解</li>
<li><strong>RedisEvit:</strong> 标识缓存清除 注解</li>
</ul>
</blockquote>
<p>代码如下：<br><strong>RedisCahe.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.rediscache.redisannotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/29.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span>  缓存注解类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisCache &#123;</div><div class="line">    <span class="function">Class <span class="title">type</span><span class="params">()</span></span>;<span class="comment">//被代理类的全类名，在之后会做为redis hash 的key</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>RedisEvit.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.rediscache.redisannotation;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</div><div class="line"><span class="keyword">import</span> java.lang.annotation.Target;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/29.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 清除过期缓存注解，放置于update delete insert 类型逻辑之上</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RedisEvict &#123;</div><div class="line">    <span class="function">Class <span class="title">type</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>4.RedisCacheAspect.java 切面程序</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.rediscache.redisaspect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.rediscache.redisannotation.RedisCache;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.rediscache.redisannotation.RedisEvict;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.util.FastJsonUtil;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.util.JsonUtil;</div><div class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</div><div class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/29.</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(value = &#123;<span class="string">"rawtypes"</span>, <span class="string">"unchecked"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCacheAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(RedisCacheAspect.class);</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 分隔符 生成key 格式为 类全类名|方法名|参数所属类全类名</span></div><div class="line"><span class="comment">     **/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELIMITER = <span class="string">"|"</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * spring-redis.xml配置连接池、连接工厂、Redis模板</span></div><div class="line"><span class="comment">     **/</span></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="meta">@Qualifier</span>(<span class="string">"redisTemplateForString"</span>)</div><div class="line">    StringRedisTemplate srt;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Service层切点 使用到了我们定义的 RedisCache 作为切点表达式。</span></div><div class="line"><span class="comment">     * 而且我们可以看出此表达式基于 annotation。</span></div><div class="line"><span class="comment">     * 并且用于内建属性为查询的方法之上</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.fxmms.common.rediscache.redisannotation.RedisCache)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisCacheAspect</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Service层切点 使用到了我们定义的 RedisEvict 作为切点表达式。</span></div><div class="line"><span class="comment">     * 而且我们可以看出此表达式是基于 annotation 的。</span></div><div class="line"><span class="comment">     * 并且用于内建属性为非查询的方法之上，用于更新表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.fxmms.common.rediscache.redisannotation.RedisEvict)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">redisCacheEvict</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"redisCacheAspect()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">cache</span><span class="params">(ProceedingJoinPoint joinPoint)</span> </span>&#123;</div><div class="line">        <span class="comment">// 得到类名、方法名和参数</span></div><div class="line">        String clazzName = joinPoint.getTarget().getClass().getName();</div><div class="line">        String methodName = joinPoint.getSignature().getName();</div><div class="line">        Object[] args = joinPoint.getArgs();</div><div class="line"></div><div class="line">        <span class="comment">// 根据类名、方法名和参数生成Key</span></div><div class="line">        logger.info(<span class="string">"key参数: "</span> + clazzName + <span class="string">"."</span> + methodName);</div><div class="line">        <span class="comment">//System.out.println("key参数: " + clazzName + "." + methodName);</span></div><div class="line">        String key = getKey(clazzName, methodName, args);</div><div class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(<span class="string">"生成key: "</span> + key);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 得到被代理的方法</span></div><div class="line">        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();</div><div class="line"></div><div class="line">        <span class="comment">// 得到被代理的方法上的注解</span></div><div class="line">        Class modelType = method.getAnnotation(RedisCache.class).type();</div><div class="line"></div><div class="line">        <span class="comment">// 检查Redis中是否有缓存</span></div><div class="line">        String value = (String) srt.opsForHash().get(modelType.getName(), key);</div><div class="line"></div><div class="line">        <span class="comment">// 得到被代理方法的返回值类型</span></div><div class="line">        Class returnType = ((MethodSignature) joinPoint.getSignature()).getReturnType();</div><div class="line"></div><div class="line">        <span class="comment">// result是方法的最终返回结果</span></div><div class="line">        Object result = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == value) &#123;</div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                    logger.info(<span class="string">"缓存未命中"</span>);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="comment">// 调用数据库查询方法</span></div><div class="line">                result = joinPoint.proceed(args);</div><div class="line"></div><div class="line">                <span class="comment">// 序列化查询结果</span></div><div class="line">                String json = FastJsonUtil.toJsonString(result);</div><div class="line">                <span class="comment">//String json = GsonUtil.toJson(result);</span></div><div class="line">                System.out.println(<span class="string">"打印："</span>+json);</div><div class="line"></div><div class="line">                <span class="comment">// 序列化结果放入缓存</span></div><div class="line">                srt.opsForHash().put(modelType.getName(), key, json);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">                <span class="comment">// 缓存命中</span></div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                    logger.info(<span class="string">"缓存命中, value = "</span> + value);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                result = value;</div><div class="line">                <span class="comment">// 反序列化 从缓存中拿到的json字符串</span></div><div class="line">                result = FastJsonUtil.toObject(value, returnType);</div><div class="line">                <span class="comment">//result = GsonUtil.fromJson(value,returnType);</span></div><div class="line">                System.out.println(result.toString());</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">                    logger.info(<span class="string">"gson反序列化结果 = "</span> + result);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            logger.error(<span class="string">"解析异常"</span>,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *      * 在方法调用前清除缓存，然后调用业务方法</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@param</span> joinPoint</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     *      * <span class="doctag">@throws</span> Throwable</span></div><div class="line"><span class="comment">     *      </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"redisCacheEvict()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">evictCache</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="comment">// 得到被代理的方法</span></div><div class="line">        Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();</div><div class="line">        <span class="comment">// 得到被代理的方法上的注解</span></div><div class="line">        Class modelType = method.getAnnotation(RedisEvict.class).type();</div><div class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(<span class="string">"清空缓存 = "</span> + modelType.getName());</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 清除对应缓存</span></div><div class="line">        srt.delete(modelType.getName());</div><div class="line">        <span class="keyword">return</span> joinPoint.proceed(joinPoint.getArgs());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> modelType</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 反序列化json字符串</span></div><div class="line"><span class="comment">     * Question 遇到问题，如何将复杂json字符串解析为复杂java object</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">deserialize</span><span class="params">(String json, Class clazz, Class modelType)</span> </span>&#123;</div><div class="line">        <span class="comment">// 序列化结果是List对象</span></div><div class="line">        <span class="keyword">if</span> (clazz.isAssignableFrom(List.class)) &#123;</div><div class="line">            <span class="keyword">return</span> JsonUtil.jsonToList(json, modelType);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 序列化结果是普通对象</span></div><div class="line">        <span class="keyword">return</span> JsonUtil.jsonToPojo(json, clazz);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">serialize</span><span class="params">(Object result, Class clazz)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JsonUtil.objectToJson(result);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *      * 根据类名、方法名和参数生成Key</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@param</span> clazzName</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@param</span> methodName</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@param</span> args</span></div><div class="line"><span class="comment">     *      * <span class="doctag">@return</span> key格式：全类名|方法名｜参数类型</span></div><div class="line"><span class="comment">     *      </span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getKey</span><span class="params">(String clazzName, String methodName, Object[] args)</span> </span>&#123;</div><div class="line">        StringBuilder key = <span class="keyword">new</span> StringBuilder(clazzName);</div><div class="line">        key.append(DELIMITER);</div><div class="line">        key.append(methodName);</div><div class="line">        key.append(DELIMITER);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (Object obj : args) &#123;</div><div class="line">            key.append(obj.getClass().getSimpleName());</div><div class="line">            key.append(DELIMITER);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> key.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>5.FastJsonUtil.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">package</span> com.fxmms.common.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</div><div class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.ValueFilter;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/30.</span></div><div class="line"><span class="comment"> * 采用阿里巴巴fastjson 进行对象&amp;json字符串的序列化与反序列化</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonUtil</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 将java对象转化为json字符串</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toJsonString</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JSON.toJSONString(object,filter,SerializerFeature.DisableCircularReferenceDetect);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 添加过滤器使数据库中字段为NULL的字段为""</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ValueFilter filter = <span class="keyword">new</span> ValueFilter() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">process</span><span class="params">(Object obj, String s, Object v)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (v == <span class="keyword">null</span>)</div><div class="line">                <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> json</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> cla</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 将json字符串转化为java对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">toObject</span><span class="params">(String json, Class&lt;T&gt; cla)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JSON.parseObject(json, cla);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(String json, Class&lt;T&gt; t)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> JSON.parseArray(json, t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>6.业务逻辑层设置缓存即扩充service-applicationContext.xml加入切面支持</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task/spring-task.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--设置定时任务--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.www"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--扫描日志切面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.log"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--扫描redis切面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.rediscache.redisaspect"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Component"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:include-filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>7.业务逻辑层应用缓存</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.service;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.jniutil.GetDownloadIDUtil;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.macutil.CountBetweenMacByMacStr;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.poiutil.ReadExcelUtil;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.rediscache.redisannotation.RedisCache;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.rediscache.redisannotation.RedisEvict;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.ControllerResult;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.DtoResultWithPageInfo;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.dao.AdminDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.dao.MacDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.dao.TaskDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.domain.Admin;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.domain.Mac;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.domain.Task;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.dto.MacDto;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.qo.MacQo;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.thunderinterfaceutil.VisitThunderInterface;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</div><div class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.File;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.Date;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/7.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> Mac地址操作业务逻辑层</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacService</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    MacDao macDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    AdminDao adminDao;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    TaskDao taskDao;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> macStr</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> mac</span></div><div class="line"><span class="comment">     * <span class="doctag">@usage</span> 判断数据库中是否已经存储过对应的mac</span></div><div class="line"><span class="comment">     * 防止数据库中存储多个同样的mac地址</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@RedisEvict</span>(type=Mac.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> Mac <span class="title">doJudgementBySingleMacStr</span><span class="params">(String macStr, String username)</span> </span>&#123;</div><div class="line">        Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">        <span class="keyword">if</span> (mac == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="comment">//1.单个mac地址转化为downloadId</span></div><div class="line">            String downLoadId = GetDownloadIDUtil.getDownLoadId(macStr);</div><div class="line">            Task task = <span class="keyword">new</span> Task();<span class="comment">//单个mac所属task's id</span></div><div class="line">            task.setDate(<span class="keyword">new</span> Date());</div><div class="line">            task.setFlag(<span class="number">0</span>);<span class="comment">//录入未成功</span></div><div class="line">            taskDao.save(task);</div><div class="line">            Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">            mac = <span class="keyword">new</span> Mac();</div><div class="line">            mac.setDownLoadId(downLoadId);</div><div class="line">            mac.setAdmin(admin);</div><div class="line">            mac.setMacAddr(macStr);</div><div class="line">            mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">            <span class="comment">//设置mac状态为init状态</span></div><div class="line">            mac.setStatus(<span class="number">0</span>);</div><div class="line">            mac.setTask(task);</div><div class="line">            macDao.save(mac);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mac;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> macStrList</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@usage</span> 判断数据库中是否已经存储过对应的mac</span></div><div class="line"><span class="comment">     * 防止数据库中存储多个同样的mac地址</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@RedisEvict</span>(type=Mac.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doJudgementBySeriseMacStr</span><span class="params">(List&lt;String&gt; macStrList, String username)</span> </span>&#123;</div><div class="line">        Task task = <span class="keyword">new</span> Task();<span class="comment">//单个mac所属task's id</span></div><div class="line">        task.setDate(<span class="keyword">new</span> Date());</div><div class="line">        task.setFlag(<span class="number">0</span>);<span class="comment">//初始化task 状态为录入未成功</span></div><div class="line">        <span class="keyword">for</span> (String macStr : macStrList) &#123;</div><div class="line">            Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">            <span class="keyword">if</span> (mac == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//1.单个mac地址转化为downloadId</span></div><div class="line">                String downLoadId = GetDownloadIDUtil.getDownLoadId(macStr);</div><div class="line">                taskDao.save(task);</div><div class="line">                Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">                mac = <span class="keyword">new</span> Mac();</div><div class="line">                mac.setDownLoadId(downLoadId);</div><div class="line">                mac.setAdmin(admin);</div><div class="line">                mac.setMacAddr(macStr);</div><div class="line">                mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                <span class="comment">//设置mac状态为init状态</span></div><div class="line">                mac.setStatus(<span class="number">0</span>);</div><div class="line">                mac.setTask(task);</div><div class="line">                macDao.save(mac);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> macStr</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 1.单个mac地址转化为downloadId, 并调用迅雷方接口</span></div><div class="line"><span class="comment">     * 2.调用接口之前先将地址存储为数据库中一条记录，状态置为0-初始化状态</span></div><div class="line"><span class="comment">     * 3.调用完接口根据返回状态，将返回状态为success的数据置为1-正在录入</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@RedisEvict</span>(type=Mac.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">addSingleMac</span><span class="params">(String macStr, String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (macStr == <span class="keyword">null</span> || (<span class="string">""</span>.equals(macStr))) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，MAC地址不能为空"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!CountBetweenMacByMacStr.matchMacAddrByregex(macStr)) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，MAC地址格式不正确"</span>);</div><div class="line">        &#125;</div><div class="line">        List&lt;String&gt; macStrList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        macStrList.add(macStr);</div><div class="line">        Mac mac = doJudgementBySingleMacStr(macStr, username);</div><div class="line">        <span class="comment">//调用迅雷录入接口。</span></div><div class="line">        <span class="keyword">if</span> (VisitThunderInterface.addDownLoadId(macStrList)) &#123;</div><div class="line">            Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">            <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                mac.setStatus(<span class="number">1</span>);</div><div class="line">                mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                mac.setAdmin(admin);</div><div class="line">                macDao.update(mac);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.SUCCESS, <span class="string">"迅雷录入接口请求成功"</span>, mac);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">            <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                mac.setStatus(<span class="number">3</span>);</div><div class="line">                mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                mac.setAdmin(admin);</div><div class="line">                macDao.update(mac);</div><div class="line">                <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起,请求迅雷录入接口失败!&lt;a href='admin/addsinglemac'&gt;重新录入&lt;/a&gt;"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"此条mac地址已经录入成功"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> startMacStr</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> endMacStr</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@usage</span> 批量区间录入业务逻辑方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@RedisEvict</span>(type=Mac.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">addSeriseMac</span><span class="params">(String startMacStr, String endMacStr, String username)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (startMacStr == <span class="keyword">null</span> || (<span class="string">""</span>.equals(startMacStr)) || endMacStr == <span class="keyword">null</span> || (<span class="string">""</span>.equals(endMacStr))) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，MAC地址不能为空"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!CountBetweenMacByMacStr.matchMacAddrByregex(startMacStr) || !CountBetweenMacByMacStr.matchMacAddrByregex(endMacStr)) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，MAC地址格式不正确"</span>);</div><div class="line">        &#125;</div><div class="line">        List&lt;String&gt; macStrList = CountBetweenMacByMacStr.countBetweenMacByMacStr(startMacStr, endMacStr);</div><div class="line">        <span class="keyword">if</span> (macStrList.size() &gt; <span class="number">1000</span>) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，MAC区间太长，请拆分后录入。&lt;a href='admin/addserisemacs'&gt;重新录入&lt;/a&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">        doJudgementBySeriseMacStr(macStrList, username);</div><div class="line">        <span class="keyword">if</span> (VisitThunderInterface.addDownLoadId(macStrList)) &#123;</div><div class="line">            <span class="keyword">for</span> (String macStr : macStrList) &#123;</div><div class="line">                Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">                Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">                <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                    mac.setStatus(<span class="number">1</span>);</div><div class="line">                    mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                    mac.setAdmin(admin);</div><div class="line">                    macDao.update(mac);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.SUCCESS, <span class="string">"录入成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">for</span> (String macStr : macStrList) &#123;</div><div class="line">                Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">                Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">                <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                    mac.setStatus(<span class="number">3</span>);</div><div class="line">                    mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                    mac.setAdmin(admin);</div><div class="line">                    macDao.update(mac);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起,请求迅雷录入接口失败!&lt;a href='admin/addserisemacs'&gt;重新录入&lt;/a&gt;"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> macQo</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@usage</span> 获取所有的mac录入状态数据业务逻辑方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@RedisCache</span>(type=Mac.class)</div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">getAllMacStatus</span><span class="params">(MacQo macQo)</span> </span>&#123;</div><div class="line">        DtoResultWithPageInfo&lt;MacDto&gt; info = macDao.queryPageListByCriteriaWithQo(macQo, MacDto.class);</div><div class="line">        <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.SUCCESS, <span class="string">"获取mac录入状态成功"</span>, info);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> serverFile</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@usage</span> 非连续mac地址录入逻辑方法</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@RedisEvict</span>(type=Mac.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ControllerResult <span class="title">addNoOrderMac</span><span class="params">(File serverFile, String username)</span> </span>&#123;</div><div class="line">        ReadExcelUtil readExcelUtil = <span class="keyword">new</span> ReadExcelUtil();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            List&lt;String&gt; macStrList = readExcelUtil.readUploadMacFile(serverFile);</div><div class="line">            <span class="keyword">if</span> (macStrList.size() == <span class="number">0</span> || macStrList == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，文件中MAC数据不能为空"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (macStrList.size() &gt; <span class="number">1000</span>) &#123;</div><div class="line">                <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，文件中数据超过1000条，请进行拆分后上传！"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (String inFilemacStr : macStrList) &#123;</div><div class="line">                <span class="keyword">if</span> (!CountBetweenMacByMacStr.matchMacAddrByregex(inFilemacStr)) &#123;</div><div class="line">                    <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起，文件中有不合法的MAC地址"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            doJudgementBySeriseMacStr(macStrList, username);</div><div class="line">            <span class="keyword">if</span> (VisitThunderInterface.addDownLoadId(macStrList)) &#123;</div><div class="line">                <span class="keyword">for</span> (String macStr : macStrList) &#123;</div><div class="line">                    Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">                    Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">                    <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                        mac.setStatus(<span class="number">1</span>);</div><div class="line">                        mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                        mac.setAdmin(admin);</div><div class="line">                        macDao.update(mac);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.SUCCESS, <span class="string">"请求迅雷录入接口成功"</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (String macStr : macStrList) &#123;</div><div class="line">                    Mac mac = macDao.getByUniqueKey(<span class="string">"macAddr"</span>, macStr);</div><div class="line">                    Admin admin = adminDao.getByUniqueKey(<span class="string">"userName"</span>, username);</div><div class="line">                    <span class="keyword">if</span> (mac.getStatus() != <span class="number">2</span>) &#123;</div><div class="line">                        mac.setStatus(<span class="number">3</span>);</div><div class="line">                        mac.setAdmin(admin);</div><div class="line">                        mac.setDate(<span class="keyword">new</span> Date());</div><div class="line">                        macDao.update(mac);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"对不起,请求迅雷录入接口失败!&lt;a href='admin/loadnoordermacs'&gt;重新录入&lt;/a&gt;"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> ControllerResult.valueOf(ControllerResult.ERROR, <span class="string">"文件上传失败"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：</p>
<ul>
<li>上述程序中为非查询方法上加上了 @RedisEvict注解，表示删除旧的缓存。</li>
<li>上述程序中为查询方法上加上了 @RedisCache注解，表示为查询业务逻辑应用缓存，应用逻辑为：项目中缓存数据的Struct为Hash，每张表对应的实体类使用一个名为Key的Hash结构来存储数据，当访问的key 存在时，直接从缓存中取出数据，不存在时第一步先从数据库中查询数据，再生成key，并生成对应的filed与value。</li>
</ul>
</blockquote>
<p>程序运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">2016-12-03 20:16:05,212 [INFO]-[com.fxmms.common.rediscache.redisaspect.RedisCacheAspect.cache(RedisCacheAspect.java:67)] key参数: com.fxmms.www.service.MacService.getAllMacStatus</div><div class="line">2016-12-03 20:16:05,219 [INFO]-[com.fxmms.common.rediscache.redisaspect.RedisCacheAspect.cache(RedisCacheAspect.java:71)] 生成key: com.fxmms.www.service.MacService|getAllMacStatus|MacQo|</div><div class="line">2016-12-03 20:16:05,357 [INFO]-[com.fxmms.common.rediscache.redisaspect.RedisCacheAspect.cache(RedisCacheAspect.java:108)] 缓存命中, value = &#123;&quot;msg&quot;:&quot;获取mac录入状态成功&quot;,&quot;result&quot;:&quot;success&quot;,&quot;rows&quot;:&#123;&quot;emptyResult&quot;:false,&quot;pageInfo&quot;:&#123;&quot;firstPage&quot;:true,&quot;firstResultNum&quot;:0,&quot;lastPage&quot;:false,&quot;lastResultNum&quot;:10,&quot;pageNo&quot;:1,&quot;pageSize&quot;:10,&quot;totalPage&quot;:49,&quot;totalQuantity&quot;:488&#125;,&quot;results&quot;:[&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479913221000,&quot;dateStr&quot;:&quot;2016-11-23 23:00:21&quot;,&quot;deviceId&quot;:&quot;730CBAEA-6954-000A-2D77-BAF544E6F192&quot;,&quot;downLoadId&quot;:&quot;11123E566745FB30FE5C9AC094A1BAA0&quot;,&quot;id&quot;:488,&quot;macAddr&quot;:&quot;11:12:3e:56:67:45&quot;,&quot;status&quot;:2,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-success\&quot;&gt;录入成功&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479913220000,&quot;flag&quot;:1,&quot;id&quot;:29&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479448899000,&quot;dateStr&quot;:&quot;2016-11-18 14:01:39&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;34BDF9C0B2C1EC6B5CA3B81DCB05241D&quot;,&quot;id&quot;:487,&quot;macAddr&quot;:&quot;34:BD:F9:C0:B2:c1&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479448898000,&quot;flag&quot;:0,&quot;id&quot;:28&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479448476000,&quot;dateStr&quot;:&quot;2016-11-18 13:54:36&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;11123E586745088C6CAF8E6C2EBDB7A5&quot;,&quot;id&quot;:486,&quot;macAddr&quot;:&quot;11:12:3e:58:67:45&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479448476000,&quot;flag&quot;:0,&quot;id&quot;:27&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479447598000,&quot;dateStr&quot;:&quot;2016-11-18 13:39:58&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;34BDFAC0B2F01A731572C0BCEC4D26F0&quot;,&quot;id&quot;:485,&quot;macAddr&quot;:&quot;34:BD:FA:C0:B2:F0&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479447598000,&quot;flag&quot;:0,&quot;id&quot;:26&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479447575000,&quot;dateStr&quot;:&quot;2016-11-18 13:39:35&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;3EBDF9C0B2F02D7F2A6CAC4F2B5121E8&quot;,&quot;id&quot;:484,&quot;macAddr&quot;:&quot;3e:BD:F9:C0:B2:F0&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479447575000,&quot;flag&quot;:0,&quot;id&quot;:25&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479446783000,&quot;dateStr&quot;:&quot;2016-11-18 13:26:23&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;11128E566749F8776504253D15D8B001&quot;,&quot;id&quot;:483,&quot;macAddr&quot;:&quot;11:12:8e:56:67:49&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479446783000,&quot;flag&quot;:0,&quot;id&quot;:24&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479446754000,&quot;dateStr&quot;:&quot;2016-11-18 13:25:54&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;11128E566745B130B2E6C6AA8E52EB4A&quot;,&quot;id&quot;:482,&quot;macAddr&quot;:&quot;11:12:8e:56:67:45&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479446753000,&quot;flag&quot;:0,&quot;id&quot;:23&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479446736000,&quot;dateStr&quot;:&quot;2016-11-18 13:25:36&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;341DF9C0B2F11E391DDA8EDAB78B4162&quot;,&quot;id&quot;:481,&quot;macAddr&quot;:&quot;34:1D:F9:C0:B2:F1&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479446736000,&quot;flag&quot;:0,&quot;id&quot;:22&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479437904000,&quot;dateStr&quot;:&quot;2016-11-18 10:58:24&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;11446633889613659EE26ABE4FBE28CD&quot;,&quot;id&quot;:480,&quot;macAddr&quot;:&quot;11:44:66:33:88:96&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479437904000,&quot;flag&quot;:0,&quot;id&quot;:21&#125;&#125;,&#123;&quot;admin&quot;:&#123;&quot;enable&quot;:1,&quot;id&quot;:1,&quot;isDelete&quot;:0,&quot;password&quot;:&quot;11&quot;,&quot;role&quot;:&quot;admin&quot;,&quot;userName&quot;:&quot;ls&quot;&#125;,&quot;date&quot;:1479437899000,&quot;dateStr&quot;:&quot;2016-11-18 10:58:19&quot;,&quot;deviceId&quot;:&quot;&quot;,&quot;downLoadId&quot;:&quot;1144663388947CCC987231F802C72F83&quot;,&quot;id&quot;:479,&quot;macAddr&quot;:&quot;11:44:66:33:88:94&quot;,&quot;status&quot;:3,&quot;statusStr&quot;:&quot;&lt;span class=\&quot;label label-danger\&quot;&gt;录入失败&lt;/span&gt;&quot;,&quot;task&quot;:&#123;&quot;date&quot;:1479437899000,&quot;flag&quot;:0,&quot;id&quot;:20&#125;&#125;]&#125;,&quot;total&quot;:0&#125;</div><div class="line">`</div></pre></td></tr></table></figure></p>
<p>完。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 项目实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单工厂模式]]></title>
      <url>/2017/11/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/</url>
      <content type="html"><![CDATA[<p>创建型设计模式：</p>
<p>简单工厂模式、工厂方法模式、抽象工厂模式、单例模式、原型模式和建造者模式。 统共六种。</p>
<p>本此分享三种工厂模式中的简单工厂模式。</p>
<p>记录结构：</p>
<p>–1.实际问题引入（需求）</p>
<p>–2.传统解决办法</p>
<p>–3.传统解决办法带来的问题</p>
<p>–4.使用xx模式解决问题</p>
<p>–4.1xx模式简述</p>
<p>–4.2xx模式类图表示</p>
<p>–4.3xx模式完整解决方案</p>
<p>–5.方案改进</p>
<p>–6.模式总结<br><a id="more"></a><br>1.简单工厂模式：</p>
<p>1.1实际问题引入</p>
<p>YY软件公司欲基于 Java 语言开发一套图表库,该图表库可以为应用系统提供各种不同外观的图表,例如柱 状图、饼状图、折线图等。Sunny 软件公司图表库设计人员希望为应用系统开发人员提供一套灵活易用的图表 库,而且可以较为方便地对图表库进行扩展,以便能够在将来增加一些新类型的图表。</p>
<p>2.2传统解决办法：</p>
<p>Sunny 软件公司图表库设计人员提出了一个初始设计方案,将所有图表的实现代码封装在一个 Chart 类中,其框 架代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>class Chart {</p>
<p>private String type; //图表类型</p>
<p>public Chart(Object[][] data, String type) {</p>
<p>this.type = type;</p>
<p>if (type.equalsIgnoreCase(“histogram”)) {</p>
<p>//初始化柱状图</p>
<p>} else if (type.equalsIgnoreCase(“pie”)) {</p>
<p>//初始化饼状图</p>
<p>} else if (type.equalsIgnoreCase(“line”)) {</p>
<p>//初始化折线图</p>
<p>}</p>
<p>}</p>
<p>public void display() {</p>
<p>if (this.type.equalsIgnoreCase(“histogram”)) {</p>
<p>//显示柱状图</p>
<p>} else if (this.type.equalsIgnoreCase(“pie”)) {</p>
<p>//显示饼状图</p>
<p>} else if (this.type.equalsIgnoreCase(“line”)) {</p>
<p>//显示折线图</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>客户端代码通过调用 Chart 类的构造函数来创建图表对象,根据参数 type 的不同可以得到不同类型的图表,然 后再调用 display() 方法来显示相应的图表。</p>
<p>3.传统解决办法带来的问题</p>
<p>不难看出,Chart 类是一个“巨大的”类,在该类的设计中存在如下几个问题:</p>
<p>(1) 在 Chart 类中包含很多if…else…代码块,整个类的代码相当冗长,代码越长,阅读难度、维护难度和测试 难度也越大;而且大量条件语句的存在还将影响系统的性能,程序在执行过程中需要做大量的条件判断。</p>
<p>(2) Chart 类的职责过重,它负责初始化和显示所有的图表对象,将各种图表对象的初始化代码和显示代码集中在 一个类中实现,违反了“单一职责原则”,不利于类的重用和维护;而且将大量的对象初始化代码都写在构造函 数中将导致构造函数非常庞大,对象在创建时需要进行条件判断,降低了对象创建的效率。</p>
<p>(3) 当需要增加新类型的图表时,必须修改 Chart 类的源代码,违反了“开闭原则”。</p>
<p>(4) 客户端只能通过 new 关键字来直接创建 Chart 对象,Chart 类与客户端类耦合度较高,对象的创建和使用无 法分离。</p>
<p>(5) 客户端在创建 Chart 对象之前可能还需要进行大量初始化设置,例如设置柱状图的颜色、高度等,如果在 Chart 类的构造函数中没有提供一个默认设置,那就只能由客户端来完成初始设置,这些代码在每次创建 Chart 对 象时都会出现,导致代码的重复。</p>
<p>面对一个如此巨大、职责如此重,且与客户端代码耦合度非常高的类,我们应该怎么办?本章将要介绍的简单工厂模式将在一定程度上解决上述问题。</p>
<p>4.使用简单工厂模式解决问题</p>
<p>4.1简单工厂模式简述：</p>
<p>简单工厂模式并不属于 GoF 23 个经典设计模式,但通常将它作为学习其他工厂模式的基础,它的设计思想很简单,其基本流程如下:</p>
<p>首先将需要创建的各种不同对象(例如各种不同的 Chart 对象)的相关代码封装到不同的类中,这些类称为具体 产品类,而将它们公共的代码进行抽象和提取后封装在一个抽象产品类中,每一个具体产品类都是抽象产品类的子类;然后提供一个工厂类用于创建各种产品,在工厂类中提供一个创建产品的工厂方法,该方法可以根据所传入的参数不同创建不同的具体产品对象;客户端只需调用工厂类的工厂方法并传入相应的参数即可得到一个产品对象。</p>
<p>4.2简单工厂模式类图表示</p>
<p>简单工厂模式类图<br>在简单工厂模式结构图中包含如下几个角色:</p>
<p>Factory(工厂角色):工厂角色即工厂类,它是简单工厂模式的核心,负责实现创建所有产品实例的内部逻 辑;工厂类可以被外界直接调用,创建所需的产品对象;在工厂类中提供了静态的工厂方法 factoryMethod(),它的返回类型为抽象产品类型 Product。</p>
<p>Product(抽象产品角色):它是工厂类所创建的所有对象的父类,封装了各种产品对象的公有方法,它的 引入将提高系统的灵活性,使得在工厂类中只需定义一个通用的工厂方法,因为所有创建的具体产品对象都 是其子类对象。</p>
<p>ConcreteProduct(具体产品角色):它是简单工厂模式的创建目标,所有被创建的对象都充当这个角色的 某个具体类的实例。每一个具体产品角色都继承了抽象产品角色,需要实现在抽象产品中声明的抽象方法。</p>
<p>在简单工厂模式中,客户端通过工厂类来创建一个产品类的实例,而无须直接使用 new 关键字来创建对象,它是工厂模式家族中最简单的一员。</p>
<p>分部代码展示：</p>
<p>1.在使用简单工厂模式时,首先需要对产品类进行重构,不能设计一个包罗万象的产品类,而需根据实际情况设计 一个产品层次结构,将所有产品类公共的代码移至抽象产品类,并在抽象产品类中声明一些抽象方法,以供不同 的具体产品类来实现,典型的抽象产品类代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>abstract class Product {</p>
<p>//所有产品类的公共业务方法</p>
<p>public void methodSame() {</p>
<p>//公共方法的实现</p>
<p>}</p>
<p>//声明抽象业务方法</p>
<p>public abstract void methodDiff();</p>
<p>}</p>
<p>2.在具体产品类中实现了抽象产品类中声明的抽象业务方法,不同的具体产品类可以提供不同的实现,典型的具体 产品类代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>class ConcreteProduct extends Product {</p>
<p>//实现业务方法</p>
<p>public void methodDiff() {</p>
<p>//业务方法的实现</p>
<p>}</p>
<p>｝</p>
<p>3.简单工厂模式的核心是工厂类,在没有工厂类之前,客户端一般会使用 new 关键字来直接创建产品对象,而在引 入工厂类之后,客户端可以通过工厂类来创建产品,在简单工厂模式中,工厂类提供了一个静态工厂方法供客户 端使用,根据所传入的参数不同可以创建不同的产品对象,典型的工厂类代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>class Factory {</p>
<p>//静态工厂方法</p>
<p>public static Product getProduct(String arg) {</p>
<p>Product product = null;</p>
<p>if (arg.equalsIgnoreCase(“A”)) {</p>
<p>//初始化设置productA</p>
<p>product = new ConcreteProductA();</p>
<p>} else if (arg.equalsIgnoreCase(“B”)) {</p>
<p>//初始化设置productB</p>
<p>product = new ConcreteProductB();</p>
<p>}</p>
<p>return product;</p>
<p>}</p>
<p>}</p>
<p>4.在客户端代码中,我们通过调用工厂类的工厂方法即可得到产品对象,典型代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>class Client {</p>
<p>public static void main(String args[]) {</p>
<p>Product product;</p>
<p>//通过工厂类创建产品对象，没有通过new关键字</p>
<p>product = Factory.getProduct(“A”);</p>
<p>product.methodSame();</p>
<p>product.methodDiff();</p>
<p>}</p>
<p>}</p>
<p>4.3简单工厂模式完整解决方案</p>
<p>完整解决方案：</p>
<p>为了将 Chart 类的职责分离,同时将 Chart 对象的创建和使用分离,Sunny 软件公司开发人员决定使用简单工 厂模式对图表库进行重构,重构后的结构如图所示:</p>
<p>图片 1.2 图表库结构图</p>
<p>在图中,Chart 接口充当抽象产品类,其子类HistogramChart、PieChart 和 LineChart 充当具体产品类,Ch artFactory 充当工厂类。完整代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>//抽象图表接口：抽象产品类</p>
<p>interface Chart {</p>
<p>public void display();</p>
<p>}</p>
<p>//柱状图类：具体产品类</p>
<p>class HistogramChart implements Chart {</p>
<p>public HistogramChart() {</p>
<p>System.out.println(“创建柱状图！”);</p>
<p>}</p>
<p>public void display() {</p>
<p>System.out.println(“显示柱状图！”);</p>
<p>}</p>
<p>}</p>
<p>//饼状图类：具体产品类</p>
<p>class PieChart implements Chart {</p>
<p>public PieChart() {</p>
<p>System.out.println(“创建饼状图！”);</p>
<p>}</p>
<p>public void display() {</p>
<p>System.out.println(“显示饼状图！”);</p>
<p>}</p>
<p>}</p>
<p>//折线图类：具体产品类</p>
<p>class LineChart implements Chart {</p>
<p>public LineChart() {</p>
<p>System.out.println(“创建折线图！”);</p>
<p>}</p>
<p>public void display() {</p>
<p>System.out.println(“显示折线图！”);</p>
<p>}</p>
<p>}</p>
<p>//图表工厂类：工厂类</p>
<p>class ChartFactory {</p>
<p>//静态工厂方法</p>
<p>public static Chart getChart(String type) {</p>
<p>Chart chart = null;</p>
<p>if (type.equalsIgnoreCase(“histogram”)) {</p>
<p>chart = new HistogramChart();</p>
<p>System.out.println(“初始化设置柱状图！”);</p>
<p>} else if (type.equalsIgnoreCase(“pie”)) {</p>
<p>chart = new PieChart();</p>
<p>System.out.println(“初始化设置饼状图！”);</p>
<p>} else if (type.equalsIgnoreCase(“line”)) {</p>
<p>chart = new LineChart();</p>
<p>System.out.println(“初始化设置折线图！”);</p>
<p>}</p>
<p>return chart;</p>
<p>}</p>
<p>}</p>
<p>编写如下客户端测试代码:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>class Client {</p>
<p>public static void main(String args[]) {</p>
<p>Chart chart;</p>
<p>chart = ChartFactory.getChart(“histogram”); //通过静态工厂方法创建产品</p>
<p>chart.display();</p>
<p>}</p>
<p>}</p>
<p>编译并运行程序,输出结果如下：</p>
<p>创建柱状图！</p>
<p>初始化设置柱状图！</p>
<p>显示柱状图！</p>
<p>在客户端测试类中,我们使用工厂类的静态工厂方法创建产品对象,如果需要更换产品,只需修改静态工厂方法 中的参数即可,例如将柱状图改为饼状图,只需将代码:</p>
<p>chart = ChartFactory.getChart(“histogram”);</p>
<p>//改为</p>
<p>chart = ChartFactory.getChart(“pie”);</p>
<p>编译程序，运行结果是：</p>
<p>创建饼状图！</p>
<p>初始化设置饼状图！</p>
<p>显示饼状图！</p>
<p>5.方案改进</p>
<p>YY软件公司开发人员发现在创建具体 Chart 对象时,每更换一个 Chart 对象都需要修改客户端代码中静态 工厂方法的参数,客户端代码将要重新编译,这对于客户端而言,违反了“开闭原则”,有没有一种方法能够在 不修改客户端代码的前提下更换具体产品对象呢?答案是肯定的,下面将介绍一种常用的实现方式。</p>
<p>我们可以将静态工厂方法的参数存储在 XML 或 properties 格式的配置文件中,如下 config.xml 所示:</p>
<p>histogram</p>
<p>再通过一个工具类 XMLUtil 来读取配置文件中的字符串参数,XMLUtil 类的代码如下所示:</p>
<p>/**</p>
<ul>
<li>Created by tao.liu on 16/10/18.</li>
</ul>
<p>*/</p>
<p>import javax.xml.parsers.*;</p>
<p>import org.w3c.dom.*;</p>
<p>import org.xml.sax.SAXException;</p>
<p>import java.io.*;</p>
<p>public class XMLUtil {</p>
<p>//该方法用于从XML配置文件中提取图表类型，并返回类型名</p>
<p>public static String getChartType() {</p>
<p>try {</p>
<p>//创建文档对象</p>
<p>DocumentBuilderFactory dFactory = DocumentBuilderFactory.newInstance();</p>
<p>DocumentBuilder builder = dFactory.newDocumentBuilder();</p>
<p>Document doc;</p>
<p>doc = builder.parse(new File(“config.xml”));</p>
<p>//获取包含图表类型的文本节点</p>
<p>NodeList nl = doc.getElementsByTagName(“chartType”);</p>
<p>Node classNode = nl.item(0).getFirstChild();</p>
<p>String chartType = classNode.getNodeValue().trim();</p>
<p>return chartType;</p>
<p>} catch(Exception e) {</p>
<p>e.printStackTrace();</p>
<p>return null;</p>
<p>}</p>
<p>}</p>
<p>}</p>
<p>修改之后客户端调用代码如下所示：</p>
<p>class Client {</p>
<p>public static void main(String args[]) {</p>
<p>Chart chart;</p>
<p>String type = XMLUtil.getChartType(); //读取配置文件中的参数</p>
<p>chart = ChartFactory.getChart(type); //创建产品对象</p>
<p>chart.display();</p>
<p>}</p>
<p>}</p>
<p>不难发现，在上述客户端代码中不包含任何与具体图表对象相关的信息，如果需要更换具体图表对象，只需修改配置文件 config.xml，无须修改任何源代码，符合“开闭原则”。</p>
<p>6.模式总结：</p>
<p>简单工厂模式提供了专门的工厂类用于创建对象，将对象的创建和对象的使用分离开，它作为一种最简单的工厂模式在软件开发中得到了较为广泛的应用。</p>
<p>简单工厂模式的主要优点如下：</p>
<p>(1) 工厂类包含必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的职责，而仅仅“消费”产品，简单工厂模式实现了对象创建和使用的分离。</p>
<p>(2) 客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以在一定程度减少使用者的记忆量。</p>
<p>(3) 通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性。</p>
<p>简单工厂模式的主要缺点如下：</p>
<p>(1) 由于工厂类集中了所有产品的创建逻辑，职责过重，一旦不能正常工作，整个系统都要受到影响。</p>
<p>(2) 使用简单工厂模式势必会增加系统中类的个数（引入了新的工厂类），增加了系统的复杂度和理解难度。</p>
<p>(3) 系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。</p>
<p>(4) 简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。</p>
<p>适用场景</p>
<p>在以下情况下可以考虑使用简单工厂模式：</p>
<p>(1) 工厂类负责创建的对象比较少，由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。</p>
<p>(2) 客户端只知道传入工厂类的参数，对于如何创建对象并不关心。</p>
]]></content>
      
        <categories>
            
            <category> design pattern </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Ioc 源码分析(二)--refresh()]]></title>
      <url>/2017/11/14/original_code_Spring_anylize_springIoc_load/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>1.目标：</strong><br>这篇记录debug 追溯源码的过程，大概分三个篇幅，这是第一篇，现整体了解一下运行流程，定位资源加载，资源解析，bean 注册发生的位置。<br>  2.<strong>记录结构：</strong><br>      1.调试栈截图<br>      2.整体流程<br>      3.bean.xml的处理<br><strong>每段代码下面有相应的讲解</strong><br><a id="more"></a></p>
<h2 id="1-调试栈截图"><a href="#1-调试栈截图" class="headerlink" title="1.调试栈截图"></a>1.调试栈截图</h2><hr>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-f869abb0045bb989.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-24 下午6.51.56.png"><br>每个栈帧中方法的行号都有标明，按照行号追溯源码，然后配合教程能够快速学习。</p>
<h2 id="2-整体流程"><a href="#2-整体流程" class="headerlink" title="2.整体流程"></a>2.整体流程</h2><hr>
<p>ioc容器实例化代码<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"bean.xml"</span>);</div></pre></td></tr></table></figure></p>
<p>进入代码中一步步追溯，发现重要方法：refresh();<br>如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">public void refresh() throws BeansException, IllegalStateException &#123;</div><div class="line"></div><div class="line">        synchronized (this.startupShutdownMonitor) &#123;</div><div class="line">            // Prepare this context for refreshing.</div><div class="line">            prepareRefresh();</div><div class="line">            //beanFactory实例化方法 单步调试入口</div><div class="line">            // Tell the subclass to refresh the internal bean factory.</div><div class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line"></div><div class="line">            // Prepare the bean factory for use in this context.</div><div class="line">            prepareBeanFactory(beanFactory);</div><div class="line"></div><div class="line">            try &#123;</div><div class="line">                // Allows post-processing of the bean factory in context subclasses.</div><div class="line">                postProcessBeanFactory(beanFactory);</div><div class="line"></div><div class="line">                // Invoke factory processors registered as beans in the context.</div><div class="line">                invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                // Register bean processors that intercept bean creation.</div><div class="line">                registerBeanPostProcessors(beanFactory);</div><div class="line"></div><div class="line">                // Initialize message source for this context.</div><div class="line">                initMessageSource();</div><div class="line"></div><div class="line">                // Initialize event multicaster for this context.</div><div class="line">                initApplicationEventMulticaster();</div><div class="line"></div><div class="line">                // Initialize other special beans in specific context subclasses.</div><div class="line">                onRefresh();</div><div class="line"></div><div class="line">                // Check for listener beans and register them.</div><div class="line">                registerListeners();</div><div class="line"></div><div class="line">                // Instantiate all remaining (non-lazy-init) singletons.</div><div class="line">                finishBeanFactoryInitialization(beanFactory);</div><div class="line"></div><div class="line">                // Last step: publish corresponding event.</div><div class="line">                finishRefresh();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            catch (BeansException ex) &#123;</div><div class="line">                // Destroy already created singletons to avoid dangling resources.</div><div class="line">                destroyBeans();</div><div class="line"></div><div class="line">                // Reset &apos;active&apos; flag.</div><div class="line">                cancelRefresh(ex);</div><div class="line"></div><div class="line">                // Propagate exception to caller.</div><div class="line">                throw ex;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>首先这个方法是同步的，以避免重复刷新。然后刷新的每个步骤，都放在单独的方法里，比较清晰，可以按顺序一个个看</p>
<p>首先是prepareRefresh()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">protected void prepareRefresh() &#123;</div><div class="line">        this.startupDate = System.currentTimeMillis();</div><div class="line"></div><div class="line">        synchronized (this.activeMonitor) &#123;</div><div class="line">            this.active = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(&quot;Refreshing &quot; + this);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // Initialize any placeholder property sources in the context environment</div><div class="line">        initPropertySources();</div><div class="line"></div><div class="line">        // Validate that all properties marked as required are resolvable</div><div class="line">        // see ConfigurablePropertyResolver#setRequiredProperties</div><div class="line">        this.environment.validateRequiredProperties();</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法里做的事情不多，记录了开始时间，输出日志，另外initPropertySources()方法和validateRequiredProperties()方法一般都没有做什么事。</p>
<p>然后是核心的obtainFreshBeanFactory()方法，这个方法是初始化BeanFactory，是整个refresh()方法的核心，其中完成了配置文件的加载、解析、注册，后面会专门详细说 。</p>
<p>这里要说明一下，ApplicationContext实现了BeanFactory接口，并实现了ResourceLoader、MessageSource等接口，可以认为是增强的BeanFactory。但是ApplicationContext并不自己重复实现BeanFactory定义的方法，而是委托给DefaultListableBeanFactory来实现。这种设计思路也是值得学习的。<br>后面的  prepareBeanFactory()、postProcessBeanFactory()、invokeBeanFactoryPostProcessors()、registerBeanPostProcessors()、initMessageSource()、initApplicationEventMulticaster()、onRefresh()、registerListeners()、finishBeanFactoryInitialization()、finishRefresh()等方法，是添加一些后处理器、广播、拦截器等，就不一个个细说了</p>
<p>其中的关键方法是finishBeanFactoryInitialization()，在这个方法中，会对刚才注册的Bean（不延迟加载的），进行实例化，所以也是一个核心方法。</p>
<h2 id="3-bean-xml的处理"><a href="#3-bean-xml的处理" class="headerlink" title="3.bean.xml的处理"></a>3.bean.xml的处理</h2><hr>
<p>从整体上介绍完了流程，接下来就重点看obtainFreshBeanFactory()方法，上文说到，在这个方法里，完成了配置文件的加载、解析、注册<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected ConfigurableListableBeanFactory obtainFreshBeanFactory() &#123;</div><div class="line">        refreshBeanFactory();</div><div class="line">        ConfigurableListableBeanFactory beanFactory = getBeanFactory();</div><div class="line">        if (logger.isDebugEnabled()) &#123;</div><div class="line">            logger.debug(&quot;Bean factory for &quot; + getDisplayName() + &quot;: &quot; + beanFactory);</div><div class="line">        &#125;</div><div class="line">        return beanFactory;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法做了2件事，首先通过refreshBeanFactory()方法，创建了DefaultListableBeanFactory的实例，并进行初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">protected final void refreshBeanFactory() throws BeansException &#123;</div><div class="line">        if (hasBeanFactory()) &#123;</div><div class="line">            destroyBeans();</div><div class="line">            closeBeanFactory();</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            DefaultListableBeanFactory beanFactory = createBeanFactory();</div><div class="line">            beanFactory.setSerializationId(getId());</div><div class="line">            customizeBeanFactory(beanFactory);</div><div class="line">            loadBeanDefinitions(beanFactory);</div><div class="line">            synchronized (this.beanFactoryMonitor) &#123;</div><div class="line">                this.beanFactory = beanFactory;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        catch (IOException ex) &#123;</div><div class="line">            throw new ApplicationContextException(&quot;I/O error parsing bean definition source for &quot; + getDisplayName(), ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>首先如果已经有BeanFactory实例，就先清空。然后通过createBeanFactory()方法，创建一个DefaultListableBeanFactory的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">protected DefaultListableBeanFactory createBeanFactory() &#123;</div><div class="line">        return new DefaultListableBeanFactory(getInternalParentBeanFactory());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>接下来设置ID唯一标识<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">beanFactory.setSerializationId(getId());</div></pre></td></tr></table></figure></p>
<p>然后允许用户进行一些自定义的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) &#123;</div><div class="line">        if (this.allowBeanDefinitionOverriding != null) &#123;</div><div class="line">            beanFactory.setAllowBeanDefinitionOverriding(this.allowBeanDefinitionOverriding);</div><div class="line">        &#125;</div><div class="line">        if (this.allowCircularReferences != null) &#123;</div><div class="line">            beanFactory.setAllowCircularReferences(this.allowCircularReferences);</div><div class="line">        &#125;</div><div class="line">        beanFactory.setAutowireCandidateResolver(new QualifierAnnotationAutowireCandidateResolver());</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>最后，就是核心的loadBeanDefinitions()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">protected void loadBeanDefinitions(DefaultListableBeanFactory beanFactory) throws BeansException, IOException &#123;</div><div class="line">        // Create a new XmlBeanDefinitionReader for the given BeanFactory.</div><div class="line">        XmlBeanDefinitionReader beanDefinitionReader = new XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">        // Configure the bean definition reader with this context&apos;s</div><div class="line">        // resource loading environment.</div><div class="line">        beanDefinitionReader.setEnvironment(this.getEnvironment());</div><div class="line">        beanDefinitionReader.setResourceLoader(this);</div><div class="line">        beanDefinitionReader.setEntityResolver(new ResourceEntityResolver(this));</div><div class="line"></div><div class="line">        // Allow a subclass to provide custom initialization of the reader,</div><div class="line">        // then proceed with actually loading the bean definitions.</div><div class="line">        initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">        loadBeanDefinitions(beanDefinitionReader);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里首先会创建一个XmlBeanDefinitionReader的实例，然后进行初始化。这个XmlBeanDefinitionReader中其实传递的BeanDefinitionRegistry类型的实例，为什么可以传递一个beanFactory呢，因为DefaultListableBeanFactory实现了BeanDefinitionRegistry接口，这里是多态的使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException </span>&#123;</div><div class="line">        <span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></div><div class="line">        XmlBeanDefinitionReader beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader(beanFactory);</div><div class="line"></div><div class="line">        <span class="comment">// Configure the bean definition reader with this context's</span></div><div class="line">        <span class="comment">// resource loading environment.</span></div><div class="line">        beanDefinitionReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</div><div class="line">        beanDefinitionReader.setResourceLoader(<span class="keyword">this</span>);</div><div class="line">        beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(<span class="keyword">this</span>));</div><div class="line"></div><div class="line">        <span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></div><div class="line">        <span class="comment">// then proceed with actually loading the bean definitions.</span></div><div class="line">        initBeanDefinitionReader(beanDefinitionReader);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里要说明一下，ApplicationContext并不自己负责配置文件的加载、解析、注册，而是将这些工作委托给XmlBeanDefinitionReader来做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">loadBeanDefinitions(beanDefinitionReader);</div></pre></td></tr></table></figure></p>
<p>这行代码，就是Bean定义读取实际发生的地方。这里的工作，主要是XmlBeanDefinitionReader来完成的，下一篇博客会详细介绍这个过程。</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Ioc 源码分析(四)--parseBeanDefinitions()与BeanDefinitionParserDelegate]]></title>
      <url>/2017/11/14/original_code_Spring_anyliz_parseBeanDefinitions_BeanDefinitionParserDelegate_4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>上一篇博客说到，BeanDefinition的解析,已经走到了DefaultBeanDefinitionDocumentR<br>eader里，这时候配置文件已经被加载，并解析成w3c的Document对象。这篇博客就接着介绍，DefaultBeanDefinitionDocumentReader和BeanDefinitionParserDelegate类，是怎么协同完成bean的解析和注册的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BeanDefinitionParserDelegate parent = <span class="keyword">this</span>.delegate;</div><div class="line"><span class="keyword">this</span>.delegate = createHelper(readerContext, root, parent);</div><div class="line">preProcessXml(root);</div><div class="line">parseBeanDefinitions(root, <span class="keyword">this</span>.delegate);</div><div class="line">postProcessXml(root);</div><div class="line"><span class="keyword">this</span>.delegate = parent;</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<p>这段代码，创建了一个BeanDefinitionParserDelegate组件，然后就是preProcessXml()、parseBeanDefinitions()、postProcessXml()方法<br>其中preProcessXml()和postProcessXml()默认是空方法，接下来就看下parseBeanDefinitions()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseBeanDefinitions</span><span class="params">(Element root, BeanDefinitionParserDelegate delegate)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (delegate.isDefaultNamespace(root)) &#123;</div><div class="line">            NodeList nl = root.getChildNodes();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nl.getLength(); i++) &#123;</div><div class="line">                Node node = nl.item(i);</div><div class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> Element) &#123;</div><div class="line">                    Element ele = (Element) node;</div><div class="line">                    <span class="keyword">if</span> (delegate.isDefaultNamespace(ele)) &#123;</div><div class="line">                        parseDefaultElement(ele, delegate);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        delegate.parseCustomElement(ele);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            delegate.parseCustomElement(root);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>从这个方法开始，BeanDefinitionParserDelegate就开始发挥作用了，判断当前解析元素是否属于默认的命名空间，如果是的话，就调用parseDefaultElement()方法，否则调用delegate上parseCustomElement()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public boolean isDefaultNamespace(String namespaceUri) &#123;</div><div class="line">        return (!StringUtils.hasLength(namespaceUri) || BEANS_NAMESPACE_URI.equals(namespaceUri));</div><div class="line">    &#125;</div><div class="line">    public boolean isDefaultNamespace(Node node) &#123;</div><div class="line">        return isDefaultNamespace(getNamespaceURI(node));</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>只有<strong><a href="http://www.springframework.org/schema/beans" target="_blank" rel="external">http://www.springframework.org/schema/beans</a></strong>，会被认为是默认的命名空间。也就是说，beans、bean这些元素，会认为属于默认的命名空间，而像task:scheduled这些，就认为不属于默认命名空间。<br>根节点beans的一个子节点bean，是属于默认命名空间的，所以会进入parseDefaultElement()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) &#123;</div><div class="line">        if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) &#123;</div><div class="line">            importBeanDefinitionResource(ele);</div><div class="line">        &#125;</div><div class="line">        else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) &#123;</div><div class="line">            processAliasRegistration(ele);</div><div class="line">        &#125;</div><div class="line">        else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) &#123;</div><div class="line">            processBeanDefinition(ele, delegate);</div><div class="line">        &#125;</div><div class="line">        else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) &#123;</div><div class="line">            // recurse</div><div class="line">            doRegisterBeanDefinitions(ele);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里可能会有4种情况，import、alias、bean、beans，分别有一个方法与之对应，这里解析的是bean元素，所以会进入processBeanDefinition()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">protected void processBeanDefinition(Element ele, BeanDefinitionParserDelegate delegate) &#123;</div><div class="line">        BeanDefinitionHolder bdHolder = delegate.parseBeanDefinitionElement(ele);</div><div class="line">        if (bdHolder != null) &#123;</div><div class="line">            bdHolder = delegate.decorateBeanDefinitionIfRequired(ele, bdHolder);</div><div class="line">            try &#123;</div><div class="line">                // Register the final decorated instance.</div><div class="line">                BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, getReaderContext().getRegistry());</div><div class="line">            &#125;</div><div class="line">            catch (BeanDefinitionStoreException ex) &#123;</div><div class="line">                getReaderContext().error(&quot;Failed to register bean definition with name &apos;&quot; +</div><div class="line">                        bdHolder.getBeanName() + &quot;&apos;&quot;, ele, ex);</div><div class="line">            &#125;</div><div class="line">            // Send registration event.</div><div class="line">            getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里主要有3个步骤，先是委托delegate对bean进行解析，然后委托delegate对bean进行装饰，最后由一个工具类来完成BeanDefinition的注册<br>可以看出来，DefaultBeanDefinitionDocumentReader不负责任何具体的bean解析，它面向的是xml Document对象，根据其元素的命名空间和名称，起一个类似路由的作用（不过，命名空间的判断，也是委托给delegate来做的）。所以这个类的命名，是比较贴切的，突出了其面向Document的特性。具体的工作，是由BeanDefinitionParserDelegate来完成的<br>下面就看下parseBeanDefinitionElement()方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">parseBeanDefinitionElement</span><span class="params">(Element ele, BeanDefinition containingBean)</span> </span>&#123;</div><div class="line">        String id = ele.getAttribute(ID_ATTRIBUTE);</div><div class="line">        String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</div><div class="line">        List&lt;String&gt; aliases = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasLength(nameAttr)) &#123;</div><div class="line">            String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">            aliases.addAll(Arrays.asList(nameArr));</div><div class="line">        &#125;</div><div class="line">        String beanName = id;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</div><div class="line">            beanName = aliases.remove(<span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"No XML 'id' specified - using '"</span> + beanName +</div><div class="line">                        <span class="string">"' as bean name and "</span> + aliases + <span class="string">" as aliases"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (containingBean == <span class="keyword">null</span>) &#123;</div><div class="line">            checkNameUniqueness(beanName, aliases, ele);</div><div class="line">        &#125;</div><div class="line">        AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</div><div class="line">        <span class="keyword">if</span> (beanDefinition != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (!StringUtils.hasText(beanName)) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (containingBean != <span class="keyword">null</span>) &#123;</div><div class="line">                        beanName = BeanDefinitionReaderUtils.generateBeanName(</div><div class="line">                                beanDefinition, <span class="keyword">this</span>.readerContext.getRegistry(), <span class="keyword">true</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        beanName = <span class="keyword">this</span>.readerContext.generateBeanName(beanDefinition);</div><div class="line">                        <span class="comment">// Register an alias for the plain bean class name, if still possible,</span></div><div class="line">                        <span class="comment">// if the generator returned the class name plus a suffix.</span></div><div class="line">                        <span class="comment">// This is expected for Spring 1.2/2.0 backwards compatibility.</span></div><div class="line">                        String beanClassName = beanDefinition.getBeanClassName();</div><div class="line">                        <span class="keyword">if</span> (beanClassName != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                                beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;                      !<span class="keyword">this</span>.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</div><div class="line">                            aliases.add(beanClassName);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(<span class="string">"Neither XML 'id' nor 'name' specified - "</span> +</div><div class="line">                                <span class="string">"using generated bean name ["</span> + beanName + <span class="string">"]"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">                    error(ex.getMessage(), ele);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            String[] aliasesArray = StringUtils.toStringArray(aliases);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法很长，可以分成三段来看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">String id = ele.getAttribute(ID_ATTRIBUTE);</div><div class="line">        String nameAttr = ele.getAttribute(NAME_ATTRIBUTE);</div><div class="line">        List&lt;String&gt; aliases = new ArrayList&lt;String&gt;();</div><div class="line">        if (StringUtils.hasLength(nameAttr)) &#123;</div><div class="line">            String[] nameArr = StringUtils.tokenizeToStringArray(nameAttr, MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">            aliases.addAll(Arrays.asList(nameArr));</div><div class="line">        &#125;</div><div class="line">        String beanName = id;</div><div class="line">        if (!StringUtils.hasText(beanName) &amp;&amp; !aliases.isEmpty()) &#123;</div><div class="line">            beanName = aliases.remove(0);</div><div class="line">            if (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(&quot;No XML &apos;id&apos; specified - using &apos;&quot; + beanName +</div><div class="line">                        &quot;&apos; as bean name and &quot; + aliases + &quot; as aliases&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (containingBean == null) &#123;</div><div class="line">            checkNameUniqueness(beanName, aliases, ele);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这一段，主要是处理一些跟alias，id等标识相关的东西<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AbstractBeanDefinition beanDefinition = parseBeanDefinitionElement(ele, beanName, containingBean);</div></pre></td></tr></table></figure></p>
<p>这一行是核心，进行实际的解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">if (beanDefinition != null) &#123;</div><div class="line">            if (!StringUtils.hasText(beanName)) &#123;</div><div class="line">                try &#123;</div><div class="line">                    if (containingBean != null) &#123;</div><div class="line">                        beanName = BeanDefinitionReaderUtils.generateBeanName(</div><div class="line">                                beanDefinition, this.readerContext.getRegistry(), true);</div><div class="line">                    &#125;</div><div class="line">                    else &#123;</div><div class="line">                        beanName = this.readerContext.generateBeanName(beanDefinition);</div><div class="line">                        // Register an alias for the plain bean class name, if still possible,</div><div class="line">                        // if the generator returned the class name plus a suffix.</div><div class="line">                        // This is expected for Spring 1.2/2.0 backwards compatibility.</div><div class="line">                        String beanClassName = beanDefinition.getBeanClassName();</div><div class="line">                        if (beanClassName != null &amp;&amp;</div><div class="line">                                beanName.startsWith(beanClassName) &amp;&amp; beanName.length() &gt; beanClassName.length() &amp;&amp;</div><div class="line">                                !this.readerContext.getRegistry().isBeanNameInUse(beanClassName)) &#123;</div><div class="line">                            aliases.add(beanClassName);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    if (logger.isDebugEnabled()) &#123;</div><div class="line">                        logger.debug(&quot;Neither XML &apos;id&apos; nor &apos;name&apos; specified - &quot; +</div><div class="line">                                &quot;using generated bean name [&quot; + beanName + &quot;]&quot;);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                catch (Exception ex) &#123;</div><div class="line">                    error(ex.getMessage(), ele);</div><div class="line">                    return null;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            String[] aliasesArray = StringUtils.toStringArray(aliases);</div><div class="line">            return new BeanDefinitionHolder(beanDefinition, beanName, aliasesArray);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这段是后置处理，对beanName进行处理<br>前置处理和后置处理，不是核心，就不细看了，重点看下核心的那一行调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> AbstractBeanDefinition <span class="title">parseBeanDefinitionElement</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            Element ele, String beanName, BeanDefinition containingBean)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</div><div class="line">        String className = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</div><div class="line">            className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            String parent = <span class="keyword">null</span>;</div><div class="line">            <span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</div><div class="line">                parent = ele.getAttribute(PARENT_ATTRIBUTE);</div><div class="line">            &#125;</div><div class="line">            AbstractBeanDefinition bd = createBeanDefinition(className, parent);</div><div class="line">            parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);</div><div class="line">            bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</div><div class="line">            parseMetaElements(ele, bd);</div><div class="line">            parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</div><div class="line">            parseReplacedMethodSubElements(ele,   bd.getMethodOverrides());</div><div class="line">            parseConstructorArgElements(ele, bd);</div><div class="line">            parsePropertyElements(ele, bd);</div><div class="line">            parseQualifierElements(ele, bd);</div><div class="line">            bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</div><div class="line">            bd.setSource(extractSource(ele));</div><div class="line">            <span class="keyword">return</span> bd;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</div><div class="line">            error(<span class="string">"Bean class ["</span> + className + <span class="string">"] not found"</span>, ele, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</div><div class="line">            error(<span class="string">"Class that bean class ["</span> + className + <span class="string">"] depends on not found"</span>, ele, err);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</div><div class="line">            error(<span class="string">"Unexpected failure during bean definition parsing"</span>, ele, ex);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">this</span>.parseState.pop();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个方法也挺长的，拆开看看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.parseState.push(<span class="keyword">new</span> BeanEntry(beanName));</div><div class="line">        String className = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (ele.hasAttribute(CLASS_ATTRIBUTE)) &#123;</div><div class="line">            className = ele.getAttribute(CLASS_ATTRIBUTE).trim();</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这段是从配置中抽取出类名。接下来的长长一段，把异常处理先抛开，看看实际的业务<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">String parent = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">if</span> (ele.hasAttribute(PARENT_ATTRIBUTE)) &#123;</div><div class="line">    parent = ele.getAttribute(PARENT_ATTRIBUTE);</div><div class="line">&#125;</div><div class="line">AbstractBeanDefinition bd = createBeanDefinition(className, parent);</div><div class="line">parseBeanDefinitionAttributes(ele, beanName, containingBean, bd);                  </div><div class="line">bd.setDescription(DomUtils.getChildElementValueByTagName(ele, DESCRIPTION_ELEMENT));</div><div class="line">parseMetaElements(ele, bd);</div><div class="line">parseLookupOverrideSubElements(ele, bd.getMethodOverrides());</div><div class="line">parseReplacedMethodSubElements(ele, bd.getMethodOverrides());</div><div class="line">parseConstructorArgElements(ele, bd);</div><div class="line">parsePropertyElements(ele, bd);</div><div class="line">parseQualifierElements(ele, bd);</div><div class="line">bd.setResource(<span class="keyword">this</span>.readerContext.getResource());</div><div class="line">bd.setSource(extractSource(ele));</div><div class="line"><span class="keyword">return</span> bd;</div></pre></td></tr></table></figure></p>
<p>这里每个方法的命名，就说明了是要干什么，可以一个个跟进去看，本文就不细说了。总之，经过这里的解析，就得到了一个完整的BeanDefinitionHolder。只是说明一下，如果在配置文件里，没有对一些属性进行设置，比如autowire-candidate等，那么这个解析生成的BeanDefinition，都会得到一个默认值<br><strong>然后，对这个Bean做一些必要的装饰</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> BeanDefinitionHolder <span class="title">decorateBeanDefinitionIfRequired</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            Element ele, BeanDefinitionHolder definitionHolder, BeanDefinition containingBd)</span> </span>&#123;</div><div class="line">        BeanDefinitionHolder finalDefinition = definitionHolder;</div><div class="line">        <span class="comment">// Decorate based on custom attributes first.</span></div><div class="line">        NamedNodeMap attributes = ele.getAttributes();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; attributes.getLength(); i++) &#123;</div><div class="line">            Node node = attributes.item(i);</div><div class="line">            finalDefinition = decorateIfRequired(node, finalDefinition, containingBd);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Decorate based on custom nested elements.</span></div><div class="line">        NodeList children = ele.getChildNodes();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.getLength(); i++) &#123;</div><div class="line">            Node node = children.item(i);</div><div class="line">            <span class="keyword">if</span> (node.getNodeType() == Node.ELEMENT_NODE) &#123;</div><div class="line">                finalDefinition = decorateIfRequired(node, finalDefinition, containingBd);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> finalDefinition;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>持续单步调试，代码继续运行到DefaultBeanDefinitionDocumentReader中的processBeanDefinition中的registerBeanDefinition()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BeanDefinitionReaderUtils.registerBeanDefinition(bdHolder, </div><div class="line">getReaderContext().getRegistry());</div></pre></td></tr></table></figure></p>
<p>单步进入代码发现BeanDefinitionReaderUtils静态方法registerBeanDefinition()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            BeanDefinitionHolder definitionHolder, BeanDefinitionRegistry registry)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        <span class="comment">// Register bean definition under primary name.</span></div><div class="line">        String beanName = definitionHolder.getBeanName();</div><div class="line">        <span class="comment">// 其实调用的是DefaultListableBeanFactory中的registerBeanDefinition方法</span></div><div class="line">        registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());</div><div class="line">        <span class="comment">// Register aliases for bean name, if any.</span></div><div class="line">        String[] aliases = definitionHolder.getAliases();</div><div class="line">        <span class="keyword">if</span> (aliases != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String aliase : aliases) &#123;</div><div class="line">                registry.registerAlias(beanName, aliase);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>解释一下<strong>其实调用的是DefaultListableBeanFactory中的registerBeanDefinition方法</strong>这句话，因为DefaultListableBeanFactory实现BeanDefinitionRegistry接口，BeanDefinitionRegistry接口中定义了registerBeanDefinition()方法<br>看下DefaultListableBeanFactory中registerBeanDefinition()实例方法的具体实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span></div><div class="line"><span class="function">            <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        Assert.hasText(beanName, <span class="string">"Bean name must not be empty"</span>);</div><div class="line">        Assert.notNull(beanDefinition, <span class="string">"BeanDefinition must not be null"</span>);</div><div class="line">        <span class="keyword">if</span> (beanDefinition <span class="keyword">instanceof</span> AbstractBeanDefinition) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                ((AbstractBeanDefinition) beanDefinition).validate();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (BeanDefinitionValidationException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">                        <span class="string">"Validation of bean definition failed"</span>, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.beanDefinitionMap) &#123;</div><div class="line">            Object oldBeanDefinition = <span class="keyword">this</span>.beanDefinitionMap.get(beanName);</div><div class="line">            <span class="keyword">if</span> (oldBeanDefinition != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.allowBeanDefinitionOverriding) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,</div><div class="line">                            <span class="string">"Cannot register bean definition ["</span> + beanDefinition + <span class="string">"] for bean '"</span> + beanName +</div><div class="line">                            <span class="string">"': There is already ["</span> + oldBeanDefinition + <span class="string">"] bound."</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isInfoEnabled()) &#123;</div><div class="line">                        <span class="keyword">this</span>.logger.info(<span class="string">"Overriding bean definition for bean '"</span> + beanName +</div><div class="line">                                <span class="string">"': replacing ["</span> + oldBeanDefinition + <span class="string">"] with ["</span> + beanDefinition + <span class="string">"]"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">this</span>.beanDefinitionNames.add(beanName);</div><div class="line">                <span class="keyword">this</span>.frozenBeanDefinitionNames = <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</div><div class="line">            resetBeanDefinition(beanName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>代码追溯之后发现这个方法里，最关键的是以下2行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.beanDefinitionNames.add(beanName);</div><div class="line"><span class="keyword">this</span>.beanDefinitionMap.put(beanName, beanDefinition);</div></pre></td></tr></table></figure></p>
<p>前者是把beanName放到队列里，后者是把BeanDefinition放到map中，到此注册就完成了。在后面实例化的时候，就是把beanDefinitionMap中的BeanDefinition取出来，逐一实例化<br>BeanFactory准备完毕之后，代码又回到了ClassPathXmlApplicationContext里<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public void refresh() throws BeansException, IllegalStateException &#123;</div><div class="line">        synchronized (this.startupShutdownMonitor) &#123;</div><div class="line">            // Prepare this context for refreshing.</div><div class="line">            prepareRefresh();</div><div class="line">            // Tell the subclass to refresh the internal bean factory.</div><div class="line">            ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();</div><div class="line">            // Prepare the bean factory for use in this context.</div><div class="line">            prepareBeanFactory(beanFactory);</div><div class="line">            try &#123;</div><div class="line">                // Allows post-processing of the bean factory in context subclasses.</div><div class="line">                postProcessBeanFactory(beanFactory);</div><div class="line">                // Invoke factory processors registered as beans in the context.</div><div class="line">                invokeBeanFactoryPostProcessors(beanFactory);</div><div class="line">                // Register bean processors that intercept bean creation.</div><div class="line">                registerBeanPostProcessors(beanFactory);</div><div class="line">                // Initialize message source for this context.</div><div class="line">                initMessageSource();</div><div class="line">                // Initialize event multicaster for this context.</div><div class="line">                initApplicationEventMulticaster();</div><div class="line">                // Initialize other special beans in specific context subclasses.</div><div class="line">                onRefresh();</div><div class="line">                // Check for listener beans and register them.</div><div class="line">                registerListeners();</div><div class="line">                // Instantiate all remaining (non-lazy-init) singletons.</div><div class="line">                finishBeanFactoryInitialization(beanFactory);</div><div class="line">                // Last step: publish corresponding event.</div><div class="line">                finishRefresh();</div><div class="line">            &#125;</div><div class="line">            catch (BeansException ex) &#123;</div><div class="line">                // Destroy already created singletons to avoid dangling resources.</div><div class="line">                destroyBeans();</div><div class="line">                // Reset &apos;active&apos; flag.</div><div class="line">                cancelRefresh(ex);</div><div class="line">                // Propagate exception to caller.</div><div class="line">                throw ex;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>也就是obtainFreshBeanFactory()方法执行之后，再进行下面的步骤。<br>总结来说，ApplicationContext将解析配置文件的工作委托给BeanDefinitionReader，然后BeanDefinitionReader将配置文件读取为xml的Document文档之后，又委托给BeanDefinitionDocumentReader<br>BeanDefinitionDocumentReader这个组件是根据xml元素的命名空间和元素名，起到一个路由的作用，实际的解析工作，是委托给BeanDefinitionParserDelegate来完成的<br>BeanDefinitionParserDelegate的解析工作完成以后，会返回BeanDefinitionHolder给BeanDefinitionDocumentReader，在这里，会委托给DefaultListableBeanFactory完成bean的注册<br>XmlBeanDefinitionReader（计数、解析XML文档），BeanDefinitionDocumentReader（依赖xml文档，进行解析和注册），BeanDefinitionParserDelegate（实际的解析工作）。可以看出，在解析bean的过程中，这3个组件的分工是比较清晰的，各司其职，这种设计思想值得学习<br>到此为止，bean的解析、注册、spring ioc 容器的实例化过程就基本分析结束了。</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Ioc 源码分析(三)--loadBeanDefinitions]]></title>
      <url>/2017/11/14/original_code_Spring_anyliz_loadBeanDefinitions/</url>
      <content type="html"><![CDATA[<blockquote>
<p>上一篇博客说到，ApplicationContext将解析BeanDefinition的工作委托给BeanDefinitionReader组件，这篇就接着分析一下BeanDefinition的解析过程。<br><a id="more"></a></p>
<h2 id="loadBeanDefinitions-源码阅读"><a href="#loadBeanDefinitions-源码阅读" class="headerlink" title="loadBeanDefinitions: 源码阅读"></a>loadBeanDefinitions: 源码阅读</h2><hr>
<p>入口是loadBeanDefinitions方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> </span></div><div class="line"><span class="function"><span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        String[] configLocations = getConfigLocations();</div><div class="line">        <span class="keyword">if</span> (configLocations != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String configLocation : configLocations) &#123;</div><div class="line">                reader.loadBeanDefinitions(configLocation);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>这是解析过程最外围的代码，首先要获取到配置文件的路径，这在之前已经完成了。<br>然后将每个配置文件的路径，作为参数传给BeanDefinitionReader的loadBeanDefinitions方法里<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        <span class="keyword">return</span> loadBeanDefinitions(location, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法又调用了重载方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(String location, Set&lt;Resource&gt; actualResources)</span> </span></div><div class="line"><span class="function"><span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        ResourceLoader resourceLoader = getResourceLoader();</div><div class="line">        <span class="keyword">if</span> (resourceLoader == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                    <span class="string">"Cannot import bean definitions from location ["</span> + location + <span class="string">"]: no ResourceLoader available"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (resourceLoader <span class="keyword">instanceof</span> ResourcePatternResolver) &#123;</div><div class="line">            <span class="comment">// Resource pattern matching available.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Resource[] resources = ((ResourcePatternResolver) resourceLoader).getResources(location);</div><div class="line">                <span class="keyword">int</span> loadCount = loadBeanDefinitions(resources);</div><div class="line">                <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</div><div class="line">                    <span class="keyword">for</span> (Resource resource : resources) &#123;</div><div class="line">                        actualResources.add(resource);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                    logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location pattern ["</span> + location + <span class="string">"]"</span>);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> loadCount;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">catch</span> (IOException ex) &#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> BeanDefinitionStoreException(</div><div class="line">                        <span class="string">"Could not resolve bean definition resource pattern ["</span> + location + <span class="string">"]"</span>, ex);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Can only load single resources by absolute URL.</span></div><div class="line">            Resource resource = resourceLoader.getResource(location);</div><div class="line">            <span class="keyword">int</span> loadCount = loadBeanDefinitions(resource);</div><div class="line">            <span class="keyword">if</span> (actualResources != <span class="keyword">null</span>) &#123;</div><div class="line">                actualResources.add(resource);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</div><div class="line">                logger.debug(<span class="string">"Loaded "</span> + loadCount + <span class="string">" bean definitions from location ["</span> + location + <span class="string">"]"</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> loadCount;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>首先getResourceLoader()的实现的前提条件是因为XmlBeanDefinitionReader在实例化的时候已经确定了创建了实例ResourceLoader实例, 代码位于 AbstractBeanDefinitionReader<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="title">AbstractBeanDefinitionReader</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;   </div><div class="line">     Assert.notNull(registry, <span class="string">"BeanDefinitionRegistry must not be null"</span>); </div><div class="line">     <span class="keyword">this</span>.registry = registry;   </div><div class="line">     <span class="comment">// Determine ResourceLoader to use.  </span></div><div class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.registry <span class="keyword">instanceof</span> ResourceLoader) &#123;     </div><div class="line">         <span class="keyword">this</span>.resourceLoader = (ResourceLoader) <span class="keyword">this</span>.registry;   </div><div class="line">      &#125;  <span class="keyword">else</span> &#123;      </div><div class="line">         <span class="keyword">this</span>.resourceLoader = <span class="keyword">new</span> PathMatchingResourcePatternResolver();  </div><div class="line">      &#125;   </div><div class="line">     <span class="comment">// Inherit Environment if possible   </span></div><div class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.registry <span class="keyword">instanceof</span> EnvironmentCapable) &#123;      </div><div class="line">          <span class="keyword">this</span>.environment = ((EnvironmentCapable)<span class="keyword">this</span>.registry).getEnvironment();  </div><div class="line">      &#125;  <span class="keyword">else</span> &#123;      </div><div class="line">          <span class="keyword">this</span>.environment = <span class="keyword">new</span> StandardEnvironment(); </div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法比较长，BeanDefinitionReader不能直接加载配置文件，需要把配置文件封装成Resource，然后才能调用重载方法loadBeanDefinitions()。所以这个方法其实就是2段，第一部分是委托ResourceLoader将配置文件封装成Resource，第二部分是调用loadBeanDefinitions()，对Resource进行解析</p>
<p>而这里的ResourceLoader，就是前面的XmlWebApplicationContext，因为ApplicationContext接口，是继承自ResourceLoader接口的</p>
<p>Resource也是一个接口体系，在web环境下，这里就是ServletContextResource</p>
<p>接下来进入重载方法loadBeanDefinitions()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        Assert.notNull(resources, <span class="string">"Resource array must not be null"</span>);</div><div class="line">        <span class="keyword">int</span> counter = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (Resource resource : resources) &#123;</div><div class="line">            counter += loadBeanDefinitions(resource);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> counter;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这里就不用说了，就是把每一个Resource作为参数，继续调用重载方法。读spring源码，会发现重载方法特别多。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">loadBeanDefinitions</span><span class="params">(Resource resource)</span>  <span class="keyword">throws</span></span></div><div class="line"><span class="function"> BeanDefinitionStoreException </span>&#123;</div><div class="line">        <span class="keyword">return</span> loadBeanDefinitions(<span class="keyword">new</span> EncodedResource(resource));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>还是重载方法，不过这里对传进来的Resource又进行了一次封装，变成了编码后的Resource。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public int loadBeanDefinitions(EncodedResource encodedResource) </div><div class="line">throws BeanDefinitionStoreException &#123;</div><div class="line">        Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;);</div><div class="line">        if (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</div><div class="line">        if (currentResources == null) &#123;</div><div class="line">            currentResources = new HashSet&lt;EncodedResource&gt;(4);</div><div class="line">            this.resourcesCurrentlyBeingLoaded.set(currentResources);</div><div class="line">        &#125;</div><div class="line">        if (!currentResources.add(encodedResource)) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(</div><div class="line">                    &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            InputStream inputStream = encodedResource.getResource().getInputStream();</div><div class="line">            try &#123;</div><div class="line">                InputSource inputSource = new InputSource(inputStream);</div><div class="line">                if (encodedResource.getEncoding() != null) &#123;</div><div class="line">                    inputSource.setEncoding(encodedResource.getEncoding());</div><div class="line">                &#125;</div><div class="line">                return doLoadBeanDefinitions(inputSource, encodedResource.getResource());</div><div class="line">            &#125;</div><div class="line">            finally &#123;</div><div class="line">                inputStream.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        catch (IOException ex) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(</div><div class="line">                    &quot;IOException parsing XML document from &quot; + encodedResource.getResource(), ex);</div><div class="line">        &#125;</div><div class="line">        finally &#123;</div><div class="line">            currentResources.remove(encodedResource);</div><div class="line">            if (currentResources.isEmpty()) &#123;</div><div class="line">                this.resourcesCurrentlyBeingLoaded.remove();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这个就是loadBeanDefinitions()的最后一个重载方法，比较长，可以拆看来看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Assert.notNull(encodedResource, &quot;EncodedResource must not be null&quot;);</div><div class="line">        if (logger.isInfoEnabled()) &#123;</div><div class="line">            logger.info(&quot;Loading XML bean definitions from &quot; + encodedResource.getResource());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Set&lt;EncodedResource&gt; currentResources = this.resourcesCurrentlyBeingLoaded.get();</div><div class="line">        if (currentResources == null) &#123;</div><div class="line">            currentResources = new HashSet&lt;EncodedResource&gt;(4);</div><div class="line">            this.resourcesCurrentlyBeingLoaded.set(currentResources);</div><div class="line">        &#125;</div><div class="line">        if (!currentResources.add(encodedResource)) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(</div><div class="line">                    &quot;Detected cyclic loading of &quot; + encodedResource + &quot; - check your import definitions!&quot;);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这第一部分，是处理线程相关的工作，把当前正在解析的Resource，设置为当前Resource。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">            InputStream inputStream = encodedResource.getResource().getInputStream();</div><div class="line">            try &#123;</div><div class="line">                InputSource inputSource = new InputSource(inputStream);</div><div class="line">                if (encodedResource.getEncoding() != null) &#123;</div><div class="line">                    inputSource.setEncoding(encodedResource.getEncoding());</div><div class="line">                &#125;</div><div class="line">                return doLoadBeanDefinitions(inputSource, encodedResource.getResource());</div><div class="line">            &#125;</div><div class="line">            finally &#123;</div><div class="line">                inputStream.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>这里是第二部分，是核心，首先把Resource还原为InputStream，然后调用实际解析的方法doLoadBeanDefinitions()。<strong>可以看到，这种命名方式是很值得学习的，一种业务方法，比如parse()，可能需要做一些外围的工作，然后实际解析的方法，可以命名为doParse()。这种doXXX()的命名方法，在很多开源框架中都有应用，比如logback等。</strong><br>接下来就看一下这个doLoadBeanDefinitions()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">protected int doLoadBeanDefinitions(InputSource inputSource, Resource resource)</div><div class="line">            throws BeanDefinitionStoreException &#123;</div><div class="line">        try &#123;</div><div class="line">            Document doc = doLoadDocument(inputSource, resource);return registerBeanDefinitions(doc, resource);</div><div class="line">            return registerBeanDefinitions(doc, resource);</div><div class="line">        &#125;</div><div class="line">        catch (BeanDefinitionStoreException ex) &#123;</div><div class="line">            throw ex;</div><div class="line">        &#125;</div><div class="line">        catch (SAXParseException ex) &#123;</div><div class="line">            throw new XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                    &quot;Line &quot; + ex.getLineNumber() + &quot; in XML document from &quot; + resource + &quot; is invalid&quot;, ex);</div><div class="line">        &#125;</div><div class="line">        catch (SAXException ex) &#123;</div><div class="line">            throw new XmlBeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                    &quot;XML document from &quot; + resource + &quot; is invalid&quot;, ex);</div><div class="line">        &#125;</div><div class="line">        catch (ParserConfigurationException ex) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                    &quot;Parser configuration exception parsing XML from &quot; + resource, ex);</div><div class="line">        &#125;</div><div class="line">        catch (IOException ex) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                    &quot;IOException parsing XML document from &quot; + resource, ex);</div><div class="line">        &#125;</div><div class="line">        catch (Throwable ex) &#123;</div><div class="line">            throw new BeanDefinitionStoreException(resource.getDescription(),</div><div class="line">                    &quot;Unexpected exception parsing XML document from &quot; + resource, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>抛开异常处理：核心代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> Document doc = doLoadDocument(inputSource, resource);</div><div class="line"> <span class="keyword">return</span>  registerBeanDefinitions(doc, resource);</div><div class="line">``` </div><div class="line">doLoadDocument方法将InputStream读取成标准的Document对象，然后调用registerBeanDefinitions()，进行解析工作。</div><div class="line">```java</div><div class="line"><span class="function"><span class="keyword">protected</span> Document <span class="title">doLoadDocument</span><span class="params">(InputSource inputSource, Resource resource)</span> <span class="keyword">throws</span> Exception </span>&#123;   </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.documentLoader.loadDocument(inputSource,  </div><div class="line">                                            getEntityResolver(), <span class="keyword">this</span>.errorHandler,  </div><div class="line">                                            getValidationModeForResource(resource),  </div><div class="line">                                            isNamespaceAware());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来就看一下这个核心方法registerBeanDefinitions<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException </span>&#123;</div><div class="line">        <span class="comment">//创建的其实是DefaultBeanDefinitionDocumentReader 的实例，利用反射创建的。</span></div><div class="line">        BeanDefinitionDocumentReader documentReader = createBeanDefinitionDocumentReader();</div><div class="line">        documentReader.setEnvironment(<span class="keyword">this</span>.getEnvironment());</div><div class="line">        <span class="keyword">int</span> countBefore = getRegistry().getBeanDefinitionCount();</div><div class="line">        documentReader.registerBeanDefinitions(doc, createReaderContext(resource));</div><div class="line">        <span class="keyword">return</span> getRegistry().getBeanDefinitionCount() - countBefore;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>这里注意两点 :</strong></p>
<blockquote>
<p><strong>1.Document对象</strong><br>首先这个Document对象，是W3C定义的标准XML对象，跟spring无关。其次这个registerBeanDefinitions方法，我觉得命名有点误导性。因为这个时候实际上解析还没有开始，怎么直接就注册了呢。比较好的命名，我觉得可以是parseAndRegisterBeanDefinitions()。<br><strong>2.documentReader的创建时使用反射创建的，代码如下</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">protected BeanDefinitionDocumentReader    </div><div class="line"> createBeanDefinitionDocumentReader() &#123;   </div><div class="line">          return BeanDefinitionDocumentReader.class.cast(BeanUtils.</div><div class="line">            instantiateClass(this.documentReaderClass));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>instantiateClass方法中传入了一个Class类型的参数。追溯发现下述代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">private Class&lt;?&gt; documentReaderClass = </div><div class="line">DefaultBeanDefinitionDocumentReader.class;</div></pre></td></tr></table></figure></p>
<p>所以创建的documentReaderClass是DefaultBeanDefinitionDocumentReader类的实例。<br>接下来就进入BeanDefinitionDocumentReader 中定义的registerBeanDefinitions()方法看看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(Document doc, XmlReaderContext readerContext)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.readerContext = readerContext;</div><div class="line">        logger.debug(<span class="string">"Loading bean definitions"</span>);</div><div class="line">        Element root = doc.getDocumentElement();</div><div class="line">        doRegisterBeanDefinitions(root);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>处理完外围事务之后，进入doRegisterBeanDefinitions()方法，这种命名规范，上文已经介绍过了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">protected void doRegisterBeanDefinitions(Element root) &#123;</div><div class="line">        String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line">        if (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">            Assert.state(this.environment != null, &quot;environment property must not be null&quot;);</div><div class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">            if (!this.environment.acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // any nested &lt;beans&gt; elements will cause recursion in this method. In</div><div class="line">        // order to propagate and preserve &lt;beans&gt; default-* attributes correctly,</div><div class="line">        // keep track of the current (parent) delegate, which may be null. Create</div><div class="line">        // the new (child) delegate with a reference to the parent for fallback purposes,</div><div class="line">        // then ultimately reset this.delegate back to its original (parent) reference.</div><div class="line">        // this behavior emulates a stack of delegates without actually necessitating one.</div><div class="line">        BeanDefinitionParserDelegate parent = this.delegate;</div><div class="line">        this.delegate = createHelper(readerContext, root, parent);</div><div class="line">        preProcessXml(root);</div><div class="line">        parseBeanDefinitions(root, this.delegate);</div><div class="line">        postProcessXml(root);</div><div class="line">        this.delegate = parent;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法也比较长，拆开来看<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String profileSpec = root.getAttribute(PROFILE_ATTRIBUTE);</div><div class="line">        <span class="keyword">if</span> (StringUtils.hasText(profileSpec)) &#123;</div><div class="line">            Assert.state(<span class="keyword">this</span>.environment != <span class="keyword">null</span>, <span class="string">"environment property must not be null"</span>);</div><div class="line">            String[] specifiedProfiles = StringUtils.tokenizeToStringArray(profileSpec, BeanDefinitionParserDelegate.MULTI_VALUE_ATTRIBUTE_DELIMITERS);</div><div class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.environment.acceptsProfiles(specifiedProfiles)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果配置文件中元素，配有profile属性，就会进入这一段，不过一般都是不会的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">BeanDefinitionParserDelegate parent = this.delegate;</div><div class="line">this.delegate = createHelper(readerContext, root, parent);</div><div class="line">preProcessXml(root);</div><div class="line">parseBeanDefinitions(root, this.delegate);</div><div class="line">postProcessXml(root);</div><div class="line">this.delegate = parent;</div></pre></td></tr></table></figure></p>
<p>然后这里创建了BeanDefinitionParserDelegate对象，preProcessXml()和postProcessXml()都是空方法，核心就是parseBeanDefinitions()方法。这里又把BeanDefinition解析和注册的工作，委托给了BeanDefinitionParserDelegate对象，在parseBeanDefinitions()方法中完成<br>总的来说，解析工作的委托链是这样的：ClassPathXmlApplicationContext，XmlBeanDefinitionReader，DefaultBeanDefinitionDocumentReader，BeanDefinitionParserDelegate<br>ClassPathXmlApplicationContext作为最外围的组件，发起解析的请求<br>XmlBeanDefinitionReader将配置文件路径封装为Resource，读取出w3c定义的Document对象，然后委托给DefaultBeanDefinitionDocumentReader<br>DefaultBeanDefinitionDocumentReader就开始做实际的解析工作了，但是涉及到bean的具体解析，它还是会继续委托给BeanDefinitionParserDelegate来做。<br>接下来在parseBeanDefinitions()方法中发生了什么，以及BeanDefinitionParserDelegate类完成的工作，在下一篇博客中继续介绍</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Spring Ioc 源码分析(一)--Spring Ioc容器的加载]]></title>
      <url>/2017/11/14/original_code_Spring_anyliz_1/</url>
      <content type="html"><![CDATA[<p><strong>1.目标：</strong>熟练使用spring，并分析其源码，了解其中的思想。这篇主要介绍spring ioc 容器的加载<br><strong>2.前提条件：</strong>会使用debug<br><strong>3.源码分析方法：</strong>Intellj idea debug 模式下源码追溯<br>通过ClassPathXmlApplicationContext 进行xml 件的读取，从每个堆栈中读取程序的运行信息<br><strong>4.注意：</strong>由于Spring的类继承体系比较复杂,不能全部贴图，所以只将分析源码之后发现的最主要的类继承结构类图贴在下方。<br><strong>5.关于Spring Ioc Demo：</strong>我们从demo入手一步步进行代码追溯。<br><a id="more"></a></p>
<h2 id="1-Spring-Ioc-Demo"><a href="#1-Spring-Ioc-Demo" class="headerlink" title="1.Spring Ioc Demo"></a>1.Spring Ioc Demo</h2><hr>
<blockquote>
<p>1.定义数据访问接口IUserDao.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IUserDao &#123;  </div><div class="line">    public void InsertUser(String username,String password);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>2.定义IUserDao.java实现类IUserDaoImpl.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class UserDaoImpl implements IUserDao &#123;    </div><div class="line">    @Override    </div><div class="line">    public void InsertUser(String username, String password) &#123; </div><div class="line">        System.out.println(&quot;----UserDaoImpl --addUser----&quot;);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.定义业务逻辑接口UserService.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface UserService &#123;    </div><div class="line">    public void addUser(String username,String password);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>4.定义UserService.java实现类UserServiceImpl.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class UserServiceImpl implements UserService &#123;    </div><div class="line">    private     IUserDao  userDao;    //set方法  </div><div class="line">    public void  setUserDao(IUserDao  userDao) &#123;        </div><div class="line">        this.userDao = userDao;   </div><div class="line">    &#125;    </div><div class="line">    @Override    </div><div class="line">    public void addUser(String username,String password) &#123; </div><div class="line">        userDao.InsertUser(username,password);    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>bean.xml配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>  </span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>    </span></div><div class="line"><span class="tag">   <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans  </span></span></div><div class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd         "</span>&gt;</span>  </div><div class="line"> <span class="comment">&lt;!--id名字自己取，class表示他代表的类，如果在包里的话需要加上包名--&gt;</span>    </div><div class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span>  <span class="attr">class</span>=<span class="string">"UserServiceImpl"</span> &gt;</span>      </div><div class="line">        <span class="comment">&lt;!--property代表是通过set方法注入,ref的值表示注入的内容--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span>  <span class="attr">name</span>=<span class="string">"userDao"</span>  <span class="attr">ref</span>=<span class="string">"userDao"</span>/&gt;</span>  </div><div class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span>  <span class="attr">class</span>=<span class="string">"UserDaoImpl"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="2-ApplicationContext-继承结构："><a href="#2-ApplicationContext-继承结构：" class="headerlink" title="2.ApplicationContext 继承结构："></a>2.ApplicationContext 继承结构：</h2><hr>
<blockquote>
<p>1.顶层接口：ApplicationContext<br>2.ClassPathXmlApplicationContext实现类继承AbstractXmlApplication 抽象类<br>3.AbstractXmlApplication 继承AbstractRefreshableConfigApplicationContext<br>4.AbstractRefreshableConfigApplicationContext抽象类继承AbstractRefreshableApplicationContext<br>5.AbstractRefreshableApplicationContext 继承 AbstractApplicationContext<br>6.AbstractApplicationContext 实现ConfigurableApplicationContext 接口<br>7.ConfigurableApplicationContext  接口继承<br>ApplicationContext接口<br>总体来说继承实现结构较深，内部使用了大量适配器模式。<br>以ClassPathXmlApplicationContext为例，继承类图如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-357e2bd46ff6f5fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Spring ioc .png"></p>
</blockquote>
<h2 id="3-Spring-Ioc容器加载过程源码详解"><a href="#3-Spring-Ioc容器加载过程源码详解" class="headerlink" title="3.Spring Ioc容器加载过程源码详解"></a>3.Spring Ioc容器加载过程源码详解</h2><hr>
<p>在开始之前，先介绍一个整体的概念。即spring ioc容器的加载，大体上经过以下几个过程：<br>资源文件定位、解析、注册、实例化</p>
<blockquote>
<p><strong>1.资源文件定位</strong><br>其中资源文件定位，一般是在ApplicationContext的实现类里完成的，因为ApplicationContext接口继承ResourcePatternResolver 接口，ResourcePatternResolver接口继承ResourceLoader接口，ResourceLoader其中的getResource()方法，可以将外部的资源，读取为Resource类。</p>
<hr>
<p><strong>2.解析</strong>DefaultBeanDefinitionDocumentReader，<br>解析主要是在BeanDefinitionReader中完成的，最常用的实现类是XmlBeanDefinitionReader，其中的loadBeanDefinitions()方法，负责读取Resource，并完成后续的步骤。ApplicationContext完成资源文件定位之后，是将解析工作委托给XmlBeanDefinitionReader来完成的<br>解析这里涉及到很多步骤，最常见的情况，资源文件来自一个XML配置文件。首先是BeanDefinitionReader，将XML文件读取成w3c的Document文档。<br>DefaultBeanDefinitionDocumentReader对Document进行进一步解析。然后DefaultBeanDefinitionDocumentReader又委托给BeanDefinitionParserDelegate进行解析。如果是标准的xml namespace元素，会在Delegate内部完成解析，如果是非标准的xml namespace元素，则会委托合适的NamespaceHandler进行解析最终解析的结果都封装为BeanDefinitionHolder，至此解析就算完成。<br><strong>后续会进行细致讲解。</strong></p>
<hr>
<p><strong>3.注册</strong><br>然后bean的注册是在BeanFactory里完成的，BeanFactory接口最常见的一个实现类是DefaultListableBeanFactory，它实现了BeanDefinitionRegistry接口，所以其中的registerBeanDefinition()方法，可以对BeanDefinition进行注册这里附带一提，最常见的XmlWebApplicationContext不是自己持有BeanDefinition的，它继承自AbstractRefreshableApplicationContext，其持有一个DefaultListableBeanFactory的字段，就是用它来保存BeanDefinition<br>所谓的注册，其实就是将BeanDefinition的name和实例，保存到一个Map中。刚才说到，最常用的实现DefaultListableBeanFactory，其中的字段就是beanDefinitionMap，是一个ConcurrentHashMap。<br>代码如下：<br><strong>&gt;1.DefaultListableBeanFactory继承实现关系</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class DefaultListableBeanFactory</div><div class="line"> extends </div><div class="line"> AbstractAutowireCapableBeanFactory   </div><div class="line"> implements</div><div class="line"> ConfigurableListableBeanFactory, </div><div class="line"> BeanDefinitionRegistry,</div><div class="line"> Serializable &#123; </div><div class="line">      // DefaultListableBeanFactory的实例中最终保存了所有注册的bean    beanDefinitionMap</div><div class="line">      /** Map of bean definition objects, keyed by bean name */</div><div class="line">      private final Map&lt;String, BeanDefinition&gt; beanDefinitionMap </div><div class="line">      = new ConcurrentHashMap&lt;String, BeanDefinition&gt;(64); </div><div class="line">      //实现BeanDefinitionRegistry中定义的registerBeanDefinition()抽象方法</div><div class="line">      public void registerBeanDefinition(String beanName, BeanDefinition    beanDefinition)      throws BeanDefinitionStoreException &#123;</div><div class="line">      &#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>&gt;2.BeanDefinitionRegistry接口</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface BeanDefinitionRegistry extends AliasRegistry &#123;   </div><div class="line">    //定义注册BeanDefinition实例的抽象方法</div><div class="line">    void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)         throws BeanDefinitionStoreException;</div></pre></td></tr></table></figure></p>
<p><strong>4.实例化</strong></p>
<hr>
<p>注册也完成之后，在BeanFactory的getBean()方法之中，会完成初始化，也就是依赖注入的过程<br>大体上的流程就是这样，下一篇博客，再具体地从代码层面进行介绍。</p>
]]></content>
      
        <categories>
            
            <category> 源码分析 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 源码分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NoSql-Redis入门（事务）]]></title>
      <url>/2017/11/14/NoSql-Redis-transaction/</url>
      <content type="html"><![CDATA[<p><strong>定义</strong></p>
<blockquote>
<p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：<br>1.<strong>事务是一个单独的隔离操作：</strong>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>2.<strong>事务是一个原子操作：</strong>事务中的命令要么全部被执行，要么全部都不执行。<br><a id="more"></a><br>一个事务从开始到执行会经历以下三个阶段：<br>1.<strong>开始事务。</strong><br>2.<strong>命令入队。</strong><br>3.<strong>执行事务。</strong></p>
</blockquote>
<p>for example<br>以下是一个事务的例子， 它先以 <strong>multi</strong> 开始一个事务， 然后将多个命令入队到事务中， 最后由 <strong>exec</strong> 命令触发事务， 一并执行事务中的所有命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set username 张晓</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; get username</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; sadd persons-info 张咪 张冲 张明</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; smembers persons-info</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; exec</div><div class="line">OK</div><div class="line">张晓</div><div class="line">3</div><div class="line">张明</div><div class="line">张咪</div><div class="line">张冲</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>没啥可说的，大家都看的懂，多熟悉命令。<br>惟一觉得有用的东西就是Redis中对事务中一系列操作命令的队列式存储。以及事务执行的四大约束原则，也算是特性：原子性、完整性、隔离性、持久性 ，也就是ACID。</p>
<p>还有一点，我在学习发布订阅的时候发现如果发布的信息是中文的话，在subscribe端接收的信息是乱码，这个可以在打开客户端的时候使用<strong>./redis-cli –raw</strong>避免</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NoSql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[node.js中缓冲区--Buffer]]></title>
      <url>/2017/11/14/node-Buffer/</url>
      <content type="html"><![CDATA[<h2 id="Node-js中Buffer简介："><a href="#Node-js中Buffer简介：" class="headerlink" title="Node.js中Buffer简介："></a>Node.js中Buffer简介：</h2><hr>
<p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。<br>但在处理像TCP流或文件流时，必须使用到二进制数据。因此在 Node.js中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。<br>在 Node.js 中，Buffer 类是随 Node 内核一起发布的核心库。Buffer 库为 Node.js 带来了一种存储原始数据的方法，可以让 Node.js 处理二进制数据，每当需要在 Node.js 中处理I/O操作中移动的数据时，就有可能使用 Buffer 库。原始数据存储在 Buffer 类的实例中。一个 Buffer 类似于一个整数数组，但它对应于 V8 堆内存之外的一块原始内存。<br><a id="more"></a></p>
<h2 id="Buffer常用API"><a href="#Buffer常用API" class="headerlink" title="Buffer常用API"></a>Buffer常用API</h2><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">/*1.Node.js中Buffer是一个典型的javascript与c++结合的模块，它将性能相关的部分用              c++实现，将非性能的部分用javascript实现。 </div><div class="line">  2.纯javascript对字符友好但是i无法很好的处理二进制数据，在java与node中buffer中存 储的是二进制数据。当我们面对TCP流或者文件系统时，是需要处理八位流的，因此在Node.js中定义了一个Buffer类，该类用来创建一个专门的存放二进制数据的缓冲区。 </div><div class="line">  3.代码演示：*///buffer的创建，一共有三种创建方式：从不同维度进行创建，1创建长度为n的buffer实例，创建数组为arr的buffer实例，创建字符串str的buffer实例</div><div class="line"> //&lt;1创建buffer实例</div><div class="line">   var buff;</div><div class="line"> //buff = new Buffer(n);//创建长度为n的Buffer实例</div><div class="line"> //buff = new Buffer(arr);//创建数组为arr的buffer实例</div><div class="line"> //buff = new Buffer(str,encoding);//创建字符串Str的Buffer实例</div><div class="line">   buff = new Buffer(10);</div><div class="line">   buff = new Buffer([10,20,30,40,50]);</div><div class="line">   buff = new Buffer(&quot;www.funoob.com&quot;,&quot;utf-8&quot;);</div><div class="line">//&lt;2写入缓冲区</div><div class="line">   buff = new Buffer(256);</div><div class="line">   len = buff.write(&quot;www.runoob.com&quot;);</div><div class="line">   console.log(&quot;写入字节数为：&quot;+ len);</div><div class="line">//&lt;3从缓冲区中读数据buf = new Buffer(26);</div><div class="line">for(var i = 0 ; i &lt; 26 ; i++) &#123;    </div><div class="line">    buf[i]=+97;</div><div class="line">&#125;</div><div class="line">console.log(buf.toString(&apos;ascii&apos;));</div><div class="line">console.log(buf.toString(&apos;ascii&apos;,0,5));//截前不截后</div><div class="line">console.log(buf.toString(&apos;utf8&apos;,0,5));</div><div class="line">console.log(buf.toString(undefined,0,5));//使用utf8编码，并输出abcde</div><div class="line">//&lt;4将Buffer转换为json对象，语法如下：buf.toJson()</div><div class="line">var buf = new Buffer(&quot;www.runoob.com&quot;);</div><div class="line">var json = buf.toJSON(buf);</div><div class="line">console.log(json);</div><div class="line">var buf = new Buffer(&apos;我爱 node.js&apos;);</div><div class="line">var json = buf.toJSON(buf);</div><div class="line">console.log(json);</div><div class="line">//&lt;5 缓冲区合并</div><div class="line">var buffer1 = new Buffer(&apos;菜鸟教程&apos;);</div><div class="line">var buffer2 = new Buffer(&apos;www.runoob.com&apos;);</div><div class="line">var buffer3 = Buffer.concat([buffer1,buffer2]);</div><div class="line">console.log(&quot;buffer3 的内容是: &quot;+buffer3.toString());</div><div class="line">//&lt;6 缓冲区比较</div><div class="line">/*  Node Buffer 比较的函数如下所示 </div><div class="line">    buf.compare(otherBuffer)*/</div><div class="line">var buff1 = new Buffer(&apos;ABC&apos;);</div><div class="line">var buff2 = new Buffer(&apos;ABCD&apos;);</div><div class="line">var result = buff1.compare(buff2);</div><div class="line">if(result &lt; 0) &#123;   </div><div class="line">    console.log(buff1 + &quot;在&quot; + buff2 + &quot;之前&quot;);</div><div class="line">&#125;else if(result == 0) &#123; </div><div class="line">    console.log(buff1 + &quot;在&quot; + buff2 + &quot;相同&quot;);</div><div class="line">&#125;else &#123;   </div><div class="line">    console.log(buff1 + &quot;在&quot; + buff2 + &quot;之后&quot;);</div><div class="line">&#125;</div><div class="line">//&lt;7 拷贝缓冲区</div><div class="line">/*  语法为 buf.copy(targetBuffer) 将调用copy方法</div><div class="line">    的缓冲区中内容拷贝到targetBuffer中</div><div class="line">*/</div><div class="line">var buffer1 = new Buffer(&apos;ABC&apos;);</div><div class="line">var buffer2 = new Buffer(3);</div><div class="line">buffer1.copy(buffer2);</div><div class="line">console.log(&quot;buffer2&apos;s content is : &quot;+ buffer2.toString());</div><div class="line">//&lt;8 缓冲区裁剪</div><div class="line">var buffer1 = new Buffer(&apos;runoob&apos;);</div><div class="line">var buffer2 = buffer1.slice(0,2);//裁剪是包前不包后end索引指向的元素并不被包含在裁剪之后的内容当中</div><div class="line">console.log(&quot;buffer2&apos;s content is : &quot;+buffer2.toString());</div><div class="line">//&lt;9 缓冲区长度</div><div class="line">/*缓冲区长度计算语法如下所示： </div><div class="line">  buf.length; </div><div class="line">  返回值：  返回buffer对象所占据的内存长度</div><div class="line">*/</div><div class="line">var buffer = new Buffer(&apos;我爱 www.runoob.com &apos;);</div><div class="line">var len = buffer.length;//计算的是buff中字节的个数，而非传统的java中length的字符长度</div><div class="line">console.log(&quot;buffer&apos;s length is : &quot;+len);</div></pre></td></tr></table></figure>
<p>注意：以上代码可以直接拷贝至node.js文件当中</p>
<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ node buff.js</div><div class="line">写入字节数为：14</div><div class="line">abcdefghijklmnopqrstuvwxyz</div><div class="line">abcde</div><div class="line">abcde</div><div class="line">abcde</div><div class="line">&#123; type: &apos;Buffer&apos;,</div><div class="line">  data: [ 119, 119, 119, 46, 114, 117, 110, 111, 111, 98, 46, 99, 111, 109 ] &#125;</div><div class="line">&#123; type: &apos;Buffer&apos;,</div><div class="line">  data: [ 230, 136, 145, 231, 136, 177, 32, 110, 111, 100, 101, 46, 106, 115 ] &#125;</div><div class="line"></div><div class="line">buffer3 的内容是: 菜鸟教程www.runoob.com</div><div class="line">ABC在ABCD之前</div><div class="line">buffer2&apos;s content is : ABC</div><div class="line">buffer2&apos;s content is : ru</div><div class="line">buffer&apos;s length is : 22</div></pre></td></tr></table></figure>
<p>完。</p>
]]></content>
      
        <categories>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js Event-loop事件循环]]></title>
      <url>/2017/11/14/node/</url>
      <content type="html"><![CDATA[<h2 id="node-js事件循环"><a href="#node-js事件循环" class="headerlink" title="node.js事件循环"></a>node.js事件循环</h2><hr>
<p>Node.js 是单进程单线程应用程序，但是通过事件和回调支持并发，所以性能非常高。<br>Node.js 的每一个 API 都是异步的，并作为一个独立线程运行，使用异步函数调用，并处理并发。<br>Node.js 基本上所有的事件机制都是用设计模式中观察者模式实现。<br>Node.js 单线程类似进入一个while(true)的事件循环，直到没有事件观察者退出，每个异步事件都生成一个事件观察者，如果有事件发生就调用该回调函数.</p>
<h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><hr>
<p>想要理解Event Loop，就要从程序的运行模式讲起。运行以后的程序叫做<a href="http://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8B" target="_blank" rel="external">“进程”</a>（process），一般情况下，一个进程一次只能执行一个任务。<br><a id="more"></a><br>如果有很多任务需要执行，不外乎三种解决方法。<br> <strong>（1）排队:</strong>因为一个进程一次只能执行一个任务，只好等前面的任务执行完了，再执行后面的任务。<br><strong>（2）新建进程:</strong>使用fork命令，为每个任务新建一个进程。<br><strong>（3）新建线程:</strong>因为进程太耗费资源，所以如今的程序往往允许一个进程包含多个线程，由线程去完成任务。（进程和线程的详细解释，请看<a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">这里</a>。） </p>
<p> 以JavaScript语言为例，它是一种单线程语言，所有任务都在一个线程上完成，即采用上面的第一种方法。一旦遇到大量任务或者遇到一个耗时的任务，网页就会出现”假死”，因为JavaScript停不下来，也就无法响应用户的行为。<br>你也许会问，JavaScript为什么是单线程，难道不能实现为多线程吗？<br>这跟历史有关系。JavaScript从诞生起就是单线程。原因大概是不想让浏览器变得太复杂，因为多线程需要共享资源、且有可能修改彼此的运行结果，对于一种网页脚本语言来说，这就太复杂了。后来就约定俗成，JavaScript为一种单线程语言。（Worker API可以实现多线程，但是JavaScript本身始终是单线程的。）<br>如果某个任务很耗时，比如涉及很多I/O（输入/输出）操作，那么线程的运行大概是下面的样子。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-a74f8a4101189f13.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="单线程运行任务示意图"></p>
<p>上图的绿色部分是程序的运行时间，红色部分是等待时间。可以看到，由于I/O操作很慢，所以这个线程的大部分运行时间都在空等I/O操作的返回结果。这种运行方式称为”同步模式”（synchronous I/O）或”堵塞模式”（blocking I/O）。<br>如果采用多线程，同时运行多个任务，那很可能就是下面这样。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-2c7ec0cb18b05cae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多线程运行任务示意图"></p>
<p>上图表明，多线程不仅占用多倍的系统资源，也闲置多倍的资源，这显然不合理。<br>Event Loop就是为了解决这个问题而提出的。<a href="http://en.wikipedia.org/wiki/Event_loop" target="_blank" rel="external">Wikipedia</a>这样定义：<br> <strong>Event Loop是一个程序结构，用于等待和发送消息和事件。（a programming construct that waits for and dispatches events or messages in a program.）</strong></p>
<p>简单说，就是在程序中设置两个线程：一个负责程序本身的运行，称为”主线程”；另一个负责主线程与其他进程（主要是各种I/O操作）的通信，被称为”Event Loop线程”（可以译为”消息线程”）。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-12a5e533382cfbaf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="事件循环示意图"></p>
<p>上图主线程的绿色部分，还是表示运行时间，而橙色部分表示空闲时间。每当遇到I/O的时候，主线程就让Event Loop线程去通知相应的I/O程序，然后接着往后运行，所以不存在红色的等待时间。等到I/O程序完成操作，Event Loop线程再把结果返回主线程。主线程就调用事先设定的回调函数，完成整个任务。<br>可以看到，由于多出了橙色的空闲时间，所以主线程得以运行更多的任务，这就提高了效率。这种运行方式称为”<a href="http://en.wikipedia.org/wiki/Asynchronous_I/O" target="_blank" rel="external">异步模式</a>“（asynchronous I/O）或”非堵塞模式”（non-blocking mode）。<br>这正是JavaScript语言的运行方式。单线程模型虽然对JavaScript构成了很大的限制，但也因此使它具备了其他语言不具备的优势。如果部署得好，JavaScript程序是不会出现堵塞的，这就是为什么node.js平台可以用很少的资源，应付大流量访问的原因。</p>
<h2 id="代码体现"><a href="#代码体现" class="headerlink" title="代码体现"></a>代码体现</h2><hr>
<p>创建一个main.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//引入events模块</div><div class="line">var events = require(&apos;events&apos;);</div><div class="line">//创建eventEmitter对象 内部类对象</div><div class="line">var eventEmitter = new events.EventEmitter();</div><div class="line">//创建事件处理程序</div><div class="line">var connectHandler = function connected() &#123;</div><div class="line">     console.log(&apos;连接成功&apos;)；</div><div class="line">    //触发data_received事件</div><div class="line">     evenEmitter.emit(&apos;data_received&apos;);</div><div class="line">&#125;</div><div class="line">//创建 名为connection 事件，并将事件处理程序（回调函数）绑定到事件上</div><div class="line">eventEmitter.on(&apos;connection&apos;,connectHandler);</div><div class="line">//创建名为data_reveived事件，并将匿名处理函数（回调函数）绑定到事件上</div><div class="line">eventEmitter.on(&apos;data_received&apos;,function() &#123;</div><div class="line">      console.log(&apos;数据接收成功&apos;)；</div><div class="line">&#125;)</div><div class="line">//触发connection 事件</div><div class="line">eventEmitter.emit(&apos;connection&apos;);</div><div class="line"></div><div class="line">console.log(&quot;程序执行完毕&quot;)；</div></pre></td></tr></table></figure></p>
<p>接下来让我们执行以上代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ node main.js</div><div class="line">连接成功</div><div class="line">数据接收成功</div><div class="line">程序执行完毕</div></pre></td></tr></table></figure>
<p>看了上面的程序如果还不懂的话，请看下面的这幅图，并结合最后一段话去理解：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-beae45f61ad156a1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="node.js事件循环示意图"></p>
<p>事件相当于一个主题(Subject)，而所有注册到这个事件上的处理函数相当于观察者(Observer)。<br>要点：<br>        <strong>1.观察者相当于事件处理程序–被回调的函数。<br>        2.事件就相当于我们认为的任务，比如程序执行期间需要等待I/O这就是一个事件。<br>        3.我们可以把node.js的主线程想像成一个来者不拒的主人，这个人遇到什么事情都不拒绝，但是他处理事情也要找其他人（I/O）帮忙。<br>          他有一个管家叫event loop线程，当事情来得时候，主人告诉管家这个事情，并让管家去找能够解决这个问题的人，然后继续接事情，当能够解决这个事情的人解决了事情，管家就把事情的结果告诉给主人，这里的回调函数可以想象成信鸽，主人将事情的结果放在信鸽身上（结果为参数，信鸽为回调函数载体），完成整个任务，这就说明node.js是异步执行的语言，非阻塞的语言，这也就是node.js性能高的原因。<br>        4.node.js使用的是javascript语法，javascript语法是单线程的，当用户触发事件，事件会产生消息，消息会进入消息列表，在消息进入列表的同时，回调函数也进入列表，当消息出队列时，回调函数被调用。整个底层过程就是这样的</strong></p>
<h2 id="吴海星译"><a href="#吴海星译" class="headerlink" title="吴海星译"></a>吴海星译</h2><hr>
<p><strong>谢天谢地，实际情况不是这样的。当浏览器中有I/O操作时，该操作会在事件轮询的外面执<br>行（脚本执行的主顺序之外），然后当这个I/O操作完成时，它会发出一个“事件”，①会有一个函<br>数（通常称作“回调”）处理它，如图1-1所示。</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-af84cf3cfbd2e1f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/2836699-24222c605786e2c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
]]></content>
      
        <categories>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node </tag>
            
            <tag> 事件循环 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NoSql入门概述]]></title>
      <url>/2017/11/14/NoSql-des/</url>
      <content type="html"><![CDATA[<p><strong>首先应该说的是</strong>：所有天上飞的理念都会有落地实现。所以我觉得还是从数据存储处理的发展简史来引入NoSQL更为贴切，也能让自己有更细致的认识。<br>数据存储与处理技术的发展有这么几个时间跨度</p>
<blockquote>
<p>1.单机MySQL的美好时代<br>   2.Memcached(缓存)＋MySQL＋垂直分离<br>   3.MySQL主从读写分离<br>   4.分库分表＋水平拆分＋mysql集群<br>   5.MySQL的扩展性瓶颈<br>   6.今天的架构<br>   7.为什么使用NoSQL<br><a id="more"></a></p>
<h2 id="1-单机MySQL的美好时代"><a href="#1-单机MySQL的美好时代" class="headerlink" title="1.单机MySQL的美好时代"></a>1.单机MySQL的美好时代</h2><hr>
<p>   在90年代，一个网站的访问量并不大，用单个数据库完全可以轻松应对，那个时候，更多的都是静态网页，动态交互型的网站并不多。<br>网站的架构设计如下图所示：</p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-3608619eb0958ca0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="早期动态网站架构图.png"></p>
<p>   大学期间我们大都用的是这个简单原始的架构来做网站，在数据量不是很大的情况下，是完全应付的来的。</p>
<p><strong>那么上述架构能带来什么问题呢？</strong></p>
<blockquote>
<p><strong>1.数据量太大，一个机器放不下时。</strong><br>   MySQL5.7单表500w数量已经很棒，但是300w时就应该优化了。<br><strong>2.数据的索引（B+Tree）一个机器的内存放不下时。</strong><br>   索引是加速数据库访问效率的一种机制，但是索引是存储在内存当中的，如果数据量太大，那么意味着内存中存储的索引也会很大，在每一次加入数据的时候，数据库都需要维持索引，这样假设索引跟数据量同处一个机器，而不做优化，那么数据访问将非常之缓慢。<br><strong>3.访问量（读写混合）一个实例并不能承受。</strong></p>
</blockquote>
<p>如果满足不了上述当中的1-3个，请演化。</p>
<h2 id="2-Memcached-缓存-＋MySQL＋垂直分离"><a href="#2-Memcached-缓存-＋MySQL＋垂直分离" class="headerlink" title="2.Memcached(缓存)＋MySQL＋垂直分离"></a>2.Memcached(缓存)＋MySQL＋垂直分离</h2><hr>
<p><strong>2.1 Memcached(缓存)</strong></p>
<blockquote>
<p>  随着访问量的上升，几乎大部分使用MySQL架构的网站在数据库上都出现了性能问题，web程序不再仅仅关注在功能上，同时也开始追求性能，程序员们开始大量的使用<strong>缓存技术</strong>来缓解数据库的压力，优化数据库的结构和索引，开始比较流行的是通过文件缓存来缓解数据库的压力，但是当访问量继续增大的时候，多台web服务器通过文件缓存不能共享，大量的小文件缓存也带来了比较高的IO压力，在这个时候，Memcached(缓存)自然成为一个非常时尚的技术产品。<br><strong>缓存的实质是替数据库挡了一层。</strong><br>频繁被访问的数据可以被放置于缓存当中，以供频繁访问。</p>
</blockquote>
<p>架构图如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-fa05ac0f08d64e70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Memcached(缓存)＋MySQL＋垂直分离.png"></p>
<p><strong>2.2 垂直拆分</strong></p>
<blockquote>
<p><strong>什么是垂直拆分？</strong><br>   举个例子，淘宝的数据库服务器是要进行定性 的，比如说有四台数据库服务器，两台进行买家数据的存储，两台进行卖家数据的存储，将原本一台数据库实例需要做的事情，均摊给四台服务器。DB数据操作能力会有很大提升。</p>
</blockquote>
<p>####3. MySQL主从读写分离</p>
<blockquote>
<p><strong>1 什么是主从复制？</strong><br>   多搞几个数据库来存储数据，假设有三台数据库，一主二仆，即一台主服务器，两台从服务器，当新增数据至主数据库服务器的时候，那么同时复制此数据进入到从数据库服务器当中。数据复制是为了容灾备份，缓存备份，保证数据的完整性。<br><strong>2 什么是读写分离？</strong><br>   增删改是写，查为读。<br>   读就去职能为被查询的数据库服务器去读。<br>   写就去职能为写数据的数据库服务器去写。<br>   分工明确，结合缓存能实现性能的一大提升</p>
</blockquote>
<p>架构图如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-19e823f65ea71ef9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主从复制与读写分离.png"></p>
<p>其中的M是master 即主DB Server ,S为slaver即从属DB Server,各有分工。<br>写操作在 M，读操作在S。S的数据是从master方复制的。</p>
<h2 id="4-分库分表＋水平拆分＋MySQL集群"><a href="#4-分库分表＋水平拆分＋MySQL集群" class="headerlink" title="4.分库分表＋水平拆分＋MySQL集群"></a>4.分库分表＋水平拆分＋MySQL集群</h2><hr>
<p>   承接主从复制，读写分离，以及Memcached的使用，这时MySQL主库的写压力开始出现瓶颈，而数据量的持续猛增，由于MYISAM使用表锁，在高并发下会出现严重的锁问题，大量的高并发MySQL应用开始使用InnoDB引擎代替MYISAM,由于数据量的指数级增长，只能继续对架构进行演变。<br>与此同时，开始流行使用分库分表来缓解写压力和数据增长的扩展问题。这个时候，MySQL推出了还不太稳定的表分区，这也给技术实力一般的公司带来了希望。虽然MySQL推出了MySQL cluster集群，单性能也不能很好的满足互联网的要求，知识在高可靠性上提供了非常大的保证。</p>
<blockquote>
<p><strong>1 基本思想之什么是分库分表？</strong><br>   从字面上简单理解，就是把原本存储于一个库的数据分块存储到多个库上，把原本存储于一个表的数据分块存储到多个表上。<br><strong>2 基本思想之为什么要分库分表？</strong><br>   数据库中的数据量不一定是可控的，在未进行分库分表的情况下，随着时间和业务的发展，库中的表会越来越多，表中的数据量也会越来越大，相应地，数据操作，增删改查的开销也会越来越大；另外，由于无法进行分布式式部署，而一台服务器的资源（CPU、磁盘、内存、IO等）是有限的，最终数据库所能承载的数据量、数据处理能力都将遭遇瓶颈。<br><strong>3 分库分表的实施策略。</strong><br>   分库分表有垂直切分和水平切分两种。<br><strong>3.1 何谓垂直切分</strong>:<br>   即将表按照功能模块、关系密切程度划分出来，部署到不同的库上。例如，我们会建立定义数据库workDB、商品数据库payDB、用户数据库userDB、日志数据库logDB等，分别用于存储项目数据定义表、商品定义表、用户数据表、日志数据表等。<br><strong>3.2 何谓水平切分</strong>:<br>   当一个表中的数据量过大时，我们可以把该表的数据按照某种规则，例如userID散列，进行划分，然后存储到多个结构相同的表，和不同的库上。例如，我们的userDB中的用户数据表中，每一个表的数据量都很大，就可以把userDB切分为结构相同的多个userDB：part0DB、part1DB等，再将userDB上的用户数据表userTable，切分为很多userTable：userTable0、userTable1等，然后将这些表按照一定的规则存储到多个userDB上。</p>
</blockquote>
<h2 id="5-MySQL的扩展性瓶颈"><a href="#5-MySQL的扩展性瓶颈" class="headerlink" title="5.MySQL的扩展性瓶颈"></a>5.MySQL的扩展性瓶颈</h2><hr>
<p>   视频、图片大数据量的数据时不能存储到数据库当中的，假设一个视频1.8G,MySQL中肯定是不能进行存储的。<br>下图是淘宝分享出来的一种架构方式：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-bf76e651b8921104.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/2836699-9caee75ccd763cd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="淘宝分享－高性能网站架构.png.png"></p>
<h2 id="6-今天的架构"><a href="#6-今天的架构" class="headerlink" title="6.今天的架构"></a>6.今天的架构</h2><hr>
<p>答案就是NoSQL。<br>NoSQL(NoSQL ＝ Not Only SQL),意为”不仅仅是SQL”。泛指<strong>非关系型</strong>数据库。随着互联网2.0网站的兴起，传统的关系型数据库在应付web2.0网站，特别是超大规模和高并发的SNS类型的web2.0动态网站已经显得力不从心，暴露了很多难以克服的问题，而非关系型数据库则由于其本身的特点得到了非常迅速的发展。NoSQL数据库的产生就是为了解决大规模数据集合以及多中数据带来的挑战，尤其是大数据应用难题，包括大规模数据的存储。<br><strong>例如：</strong>谷歌活着Facebook每天为他们的用户收集万亿比特的数据。<strong>这些数据的存储不需要固定的模式，无需多余的操作就可以横向扩展。</strong></p>
<p>下一节继续！</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NoSql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NoSql-Redis入门（事务）]]></title>
      <url>/2017/11/14/NoSql-Redis/</url>
      <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p>Redis 事务可以一次执行多个命令， 并且带有以下两个重要的保证：<br>1.<strong>事务是一个单独的隔离操作：</strong>事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。<br>2.<strong>事务是一个原子操作：</strong>事务中的命令要么全部被执行，要么全部都不执行。</p>
</blockquote>
<p>一个事务从开始到执行会经历以下三个阶段：</p>
<blockquote>
<p>1.<strong>开始事务。</strong><br>2.<strong>命令入队。</strong><br>3.<strong>执行事务。</strong><br><a id="more"></a></p>
</blockquote>
<p>for example<br>以下是一个事务的例子， 它先以 <strong>multi</strong> 开始一个事务， 然后将多个命令入队到事务中， 最后由 <strong>exec</strong> 命令触发事务， 一并执行事务中的所有命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; multi</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; set username 张晓</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; get username</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; sadd persons-info 张咪 张冲 张明</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; smembers persons-info</div><div class="line">QUEUED</div><div class="line">127.0.0.1:6379&gt; exec</div><div class="line">OK</div><div class="line">张晓</div><div class="line">3</div><div class="line">张明</div><div class="line">张咪</div><div class="line">张冲</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>没啥可说的，大家都看的懂，多熟悉命令。<br>惟一觉得有用的东西就是Redis中对事务中一系列操作命令的队列式存储。以及事务执行的四大约束原则，也算是特性：原子性、完整性、隔离性、持久性 ，也就是ACID。</p>
<p>还有一点，我在学习发布订阅的时候发现如果发布的信息是中文的话，在subscribe端接收的信息是乱码，这个可以在打开客户端的时候使用<strong>./redis-cli –raw</strong>避免</p>
]]></content>
      
        <categories>
            
            <category> Redis </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NoSql </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[存储过程]]></title>
      <url>/2017/11/14/MySQL-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h4 id="存储过程简介"><a href="#存储过程简介" class="headerlink" title="存储过程简介"></a>存储过程简介</h4><hr>
<p>　存储过程（Stored Procedure）是数据库系统中，一组为了完成特定功能的SQL 语句集，经编译后存储在数据库中，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。在数据库系统中，存储过程和触发器具有很重要的作用。<strong>无论是存储过程还是触发器，都是SQL 语句和流程控制语句的集合。</strong><br><a id="more"></a></p>
<h4 id="存储过程分类"><a href="#存储过程分类" class="headerlink" title="存储过程分类"></a>存储过程分类</h4><p><strong>1系统存储过程</strong><br>　　以sp<em>开头,用来进行系统的各项设定.取得信息.相关管理工作。<br><strong>2本地存储过程</strong><br>　　用户创建的存储过程是由用户创建并完成某一特定功能的存储过程，这跟各种编程语言里用户自己写的函数非常类似。我们一般所说的存储过程就是指本地存储过程。今天我们重点介绍本地存储过程，其他存储过程了解即可。<br><strong>3临时存储过程</strong><br>       分为两种存储过程：一是本地临时存储过程，以“#”开头，这样的存储过程就是存放在tempdb数据库中的本地临时存储过程，且只有创建它的用户才能执行它;　　二是全局临时存储过程，以“##”开头，这样的存储过程就是存储在tempdb数据库中的全局临时存储过程，全局临时存储过程一旦创建，以后连接到服务器的任意用户都可以执行它，而且不需要特定的权限。<br><strong>4远程存储过程</strong><br>　　在SQL Server2005中，远程存储过程(Remote Stored Procedures)是位于远程服务器上的存储过程，通常可以使用分布式查询和EXECUTE命令执行一个远程存储过程。<br><strong>5扩展存储过程</strong><br>　　扩展存储过程(Extended Stored Procedures)是用户可以使用外部程序语言编写的存储过程，而且扩展存储过程的名称通常以xp</em>开头。</p>
<h4 id="创建存储过程的基本代码结构："><a href="#创建存储过程的基本代码结构：" class="headerlink" title="创建存储过程的基本代码结构："></a>创建存储过程的基本代码结构：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> create procedure Procedure_Name //Procedure_Name为存储过程（不能以阿拉伯数字开头），在一个数据库中触发器名是唯一的。</div><div class="line"> @Param1 int ,@Param2 int//@Param1和  @Param2为存储过程的参数，DataType为参数类型，多个参数采用“,”隔开</div><div class="line"></div><div class="line">AS//存储uguocheng要执行的操作</div><div class="line"></div><div class="line">BEGIN</div><div class="line">     --begin跟end组成，可以不写，如果执行sql语句较为麻烦，则使用BEGIN END会使得代码更加整齐，容易理解</div><div class="line">END</div><div class="line">GO //操作完成</div><div class="line">exec Procedure_Name[采纳数名] //调用存储过程</div></pre></td></tr></table></figure>
<h4 id="存储过程优缺点总结："><a href="#存储过程优缺点总结：" class="headerlink" title="存储过程优缺点总结："></a>存储过程优缺点总结：</h4><p><strong>优点</strong><br>　　1.存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。<br>　　2.当对数据库进行复杂操作时(如对多个表进行Update,Insert,Query,Delete时)，可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。<br>　　3.存储过程可以重复使用,可减少数据库开发人员的工作量(复用性高，面向对象的编程思想)<br>　　4.安全性高,可设定只有某些用户才具有对指定存储过程的使用权<br><strong>缺点</strong><br>　　1.调试麻烦，但是用 PL/SQL Developer 调试很方便！弥补这个缺点。<br>　　2.移植问题，数据库端代码当然是与数据库相关的。但是如果是做工程型项目，基本不存在移植问题。<br>　　3.重新编译问题，因为后端代码是运行前编译的，如果带有引用关系的对象发生改变时，受影响的存储过程、包将需要重新编译（不过也可以设置成运行时刻自动编译）。<br>　　4.如果在一个程序系统中大量的使用存储过程，到程序交付使用的时候随着用户需求的增加会导致数据结构的变化，接着就是系统的相关问题了，最后如果用户想维护该系统可以说是很难很难、而且代价是空前的，维护起来更麻烦。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库索引原理与分类]]></title>
      <url>/2017/11/14/MySQL-%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<blockquote>
<p>数据库索引本质上是一种数据结构(存储结构+算法)，目的是为了加快目标数据检索的速度。</p>
</blockquote>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><hr>
<blockquote>
<p>1.索引的本质与原理？<br>2.索引的分类？<br><a id="more"></a></p>
<h2 id="1-索引的本质与原理"><a href="#1-索引的本质与原理" class="headerlink" title="1.索引的本质与原理"></a>1.索引的本质与原理</h2><hr>
<p>我们先看一个问题：<br>假设现在有100000条从0到10000且从大到小排列的整型数据，1条数据的大小假设(真的只是假设)是1KB,操作系统的每次I/O数据块(页)大小是8KB。<br>如果现在我要查找其中 50001 这个数据值，有如下几个方式：<br>1.最蠢的方式，遍历，每次遍历到一个值，就用这个值跟目标值做对比，如果不等于那么查找下一个。这样的话那么每次I/O是8条数据，目标数据在50001/8 约6600多次I/O 才能找到目标数据。<br>2.二分查找，最好一次性将100000条数据全部读到内存，这样查找也是很快的。</p>
</blockquote>
<p>但是即使二分查找很快，但这些数据也不能单单通过一次I/O全部进入内存，进行运算。</p>
<p>那么怎样在I/O 块大小 的限制下快速利用二分查找找到目标值呢？我们得引入新的数据结构，B+树正好可以解决上述I/O块大小的限制，解决限制不是说增大了限制范围，而是我们在此限制上改变了数据的存储结构，即在同等限制条件下，快速检索到目标数据，如下是B+树的原理讲解：</p>
<p><strong>注意，我们主要讲解索引的原理，没有必要过于纠结B+树的各种操作，及代码实现</strong></p>
<p><strong>1.1 B+ 树</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-b7e385be57e97b94.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="B+树图示"><br>根据上图所示，及其论文定义：</p>
<blockquote>
<p> 1.图上蓝色的块为关键字，我们发现所有的关键字最终都会被包含在叶子节点当中。<br>       图上的黄色区块表示的是子树的指针域，比如根节点下的P2指向的就是28-65之间的索引。</p>
<hr>
<p>   2.所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，<br>且叶子结点本身依关键字的大小自小而大的顺序链接。 (而B 树的叶子节点并没有包括全部需要查找的信息)</p>
<hr>
<p>  3.所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B 树的非终节点也包含需要查找的有效信息)</p>
</blockquote>
<p>现在我们来看下查找数据 60 的 查找过程，如下所示:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.I/O第一次：读入5、28、65 数据块，在此同级别节点块上，60在28到65之间(其实是二分查找)，那走P2指针指向的子树。</div><div class="line">2.I/O第二次：读入28、35、56 数据块，在此同级别节点块上，60大于56，所以走P3指针指向的子树(上图中就是叶子节点)。</div><div class="line">3.I/O第三次：读入叶子节点，在这个叶子节点中，使用二分查找算法找到目标值60。</div></pre></td></tr></table></figure></p>
<p>由上述查找过程所示统共需要三次I/O就能查到目标值，性能大大提升。</p>
<h2 id="2-索引的分类？"><a href="#2-索引的分类？" class="headerlink" title="2.索引的分类？"></a>2.索引的分类？</h2><hr>
<h4 id="2-1-聚簇索引-amp-非聚簇索引"><a href="#2-1-聚簇索引-amp-非聚簇索引" class="headerlink" title="2.1 聚簇索引 &amp; 非聚簇索引"></a>2.1 聚簇索引 &amp; 非聚簇索引</h4><blockquote>
<p>InnoDB 主键使用的是聚簇索引，MyISAM  不管是主键索引，还是二级索引使用的都是非聚簇索引。</p>
</blockquote>
<p>下图形象说明了聚簇索引表(InnoDB)和非聚簇索引(MyISAM)的区别：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-d062eac68af5cd31?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="聚簇索引与非聚簇索引"></p>
<blockquote>
<p>1.对于非聚簇索引表来说（右图），表数据和索引是分成两部分存储的，主键索引和二级索引存储上没有任何区别。使用的是B+树作为索引的存储结构，所有的节点都是索引，叶子节点存储的是索引+索引对应的记录的地址。</p>
<hr>
<p>2.对于聚簇索引表来说（左图），表数据是和主键一起存储的，主键索引的叶结点存储行数据(包含了主键值)，二级索引的叶结点存储行的主键值。使用的是B+树作为索引的存储结构，非叶子节点都是索引关键字，但非叶子节点中的关键字中不存储对应记录的具体内容或内容地址。叶子节点上的数据是主键与具体记录(数据内容)。</p>
</blockquote>
<p><strong>聚簇索引的优点</strong></p>
<blockquote>
<p>1.当你需要取出一定范围内的数据时<br>，用<a href="http://baike.baidu.com/view/1028053.htm" target="_blank" rel="external">聚簇索引</a>也比用<a href="http://baike.baidu.com/view/1615249.htm" target="_blank" rel="external">非聚簇索引</a>好。<br> 2.当通过聚簇索引查找目标数据时理论上比非聚簇索引要快，因为非聚簇索引定位到对应主键时还要多一次目标记录寻址,即多一次I/O。</p>
</blockquote>
<p><strong>聚簇索引的缺点</strong></p>
<blockquote>
<p>1.插入速度严重依赖于插入顺序，按照主键的顺序插入是最快的方式，否则将会出现页分裂，严重影响性能。因此，对于InnoDB表，我们一般都会定义一个自增的ID列为主键。<br>2.更新主键的代价很高，因为将会导致被更新的行移动。因此，对于InnoDB表，我们一般定义主键为不可更新。<br>3.二级索引访问需要两次索引查找，第一次找到主键值，第二次根据主键值找到行数据。<br>二级索引的叶节点存储的是主键值，而不是行指针（非聚簇索引存储的是指针或者说是地址），这是为了减少当出现行移动或数据页分裂时二级索引的维护工作，但会让二级索引占用更多的空间。<br>4.采用聚簇索引插入新值比采用非聚簇索引插入新值的速度要慢很多，因为插入要保证主键不能重复，判断主键不能重复，采用的方式在不同的索引下面会有很大的性能差距，聚簇索引遍历所有的叶子节点，非聚簇索引也判断所有的叶子节点，但是聚簇索引的叶子节点除了带有主键还有记录值，记录的大小往往比主键要大的多。这样就会导致聚簇索引在判定新记录携带的主键是否重复时进行昂贵的I/O代价。</p>
</blockquote>
<p><strong>唯一索引</strong></p>
<blockquote>
<p>主键就是唯一索引，但是唯一索引不一定是主键，唯一索引可以为空，但是空值只能有一个，主键不能为空。<br>普通唯一索引：单个字段上建立唯一索引，需要此字段所在的列上不能有重复的值，属于二级索引。<br>复合唯一索引：多个字段上联合建立唯一索引，属于二级索引。</p>
</blockquote>
<p><strong>覆盖索引</strong></p>
<blockquote>
<p>查找的目标数据， 包含在索引中，如建立idx_colum1_colum2.<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select colum1 from table where colum1 = ? and colum2 &gt; ?</div></pre></td></tr></table></figure></p>
</blockquote>
<p>通过查询索引就能确定最终的数据，不用再利用叶子节点中存储的主键值去查询对应的数据。<br>覆盖索引的性能是极高的。</p>
<p>索引原理篇讲述完，下一篇讲解索引的优化，以及 explain 工具的使用。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库规范--调优篇(终结篇)]]></title>
      <url>/2017/11/14/MySQL-%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<blockquote>
<p>这篇是MySQL 数据库规范的最后一篇–调优篇，旨在提供我们发现系统性能变弱、MySQL系统参数调优，SQL脚本出现问题的精准定位与调优方法。<br><a id="more"></a></p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><hr>
<p>1.MySQL 调优金字塔理论<br>  2.MySQL 慢查询分析–mysqldumpslow、pt_query_digest工具的使用(SQL脚本层面)<br>  3.选择合适的数据类型<br>  4.去除无用的索引–pt_duplicate_key_checker工具的使用(索引层面)<br>  5.反范式化设计(表结构)<br>  6.垂直水平分表<br>  7.MySQL 重要参数调优(系统配置)</p>
</blockquote>
<h2 id="1-MySQL-调优金字塔理论"><a href="#1-MySQL-调优金字塔理论" class="headerlink" title="1.MySQL 调优金字塔理论"></a>1.MySQL 调优金字塔理论</h2><hr>
<p>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-3363242bf7580f28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="MySQL调优金字塔理论.png"><br><strong>如上图所示:</strong></p>
<blockquote>
<p>数据库优化<strong>维度</strong>有四个:<br><strong>硬件</strong>、<strong>系统配置</strong>、<strong>数据库表结构</strong>、<strong>SQL及索引</strong><br>优化<strong>成本</strong>:<br><strong>硬件</strong>&gt;<strong>系统配置</strong>&gt;<strong>数据库表结构</strong>&gt;<strong>SQL及索引</strong><br>优化<strong>效果</strong>:<br><strong>硬件</strong>&lt;<strong>系统配置</strong>&lt;<strong>数据库表结构</strong>&lt;<strong>SQL及索引</strong></p>
</blockquote>
<h2 id="2-MySQL-慢查询分析"><a href="#2-MySQL-慢查询分析" class="headerlink" title="2.MySQL 慢查询分析"></a>2.MySQL 慢查询分析</h2><hr>
<p>对于系统中慢查询的分析，有助于我们更高效的定位问题，分析问题。<br>mysqldumpslow、pt_query_digest是进行慢查询分析的利器。</p>
<h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p><strong>1.查看本机MySQL Server 慢查询是否打开</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;slow%&apos;;</div></pre></td></tr></table></figure></p>
<p>慢查询打开的情况如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-eb93f762efa27fad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="慢查询状态"></p>
<p>若慢查询未打开则通过如下脚本设置慢查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">set global slow_query_log = on;</div><div class="line">即</div><div class="line">set global [上图中选项] = [你要设置的参数值]</div><div class="line">注意 slow_query_log_file 路径要加单引号，因为路径varchar  类型的。</div></pre></td></tr></table></figure></p>
<h2 id="2-1-mysqldumpslow分析慢查询"><a href="#2-1-mysqldumpslow分析慢查询" class="headerlink" title="2.1 mysqldumpslow分析慢查询"></a>2.1 mysqldumpslow分析慢查询</h2><p>mysqldumpslow 是MySQL自带的分析数据库慢查询的原生利器，使用方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mysqldumpslow -t 3 /data/mysql/log/mysql_slow_query.log | more \G;</div><div class="line">-t  3 显示前3条慢查询。</div></pre></td></tr></table></figure></p>
<p>慢查询信息及分析<br><img src="http://upload-images.jianshu.io/upload_images/2836699-4f7340f695552373.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="慢查询信息.png"><br>但是 mysqldumpslow 显示的信息比较少，比如说此条sql执行次数在整体的执行次数中占用的百分比。类似于上述信息在 mysqldumpslow 的分析结果中是不存在的。</p>
<p>接下里我们介绍另一种工具 pt_query_digest</p>
<h2 id="2-2-pt-query-digest分析慢查询"><a href="#2-2-pt-query-digest分析慢查询" class="headerlink" title="2.2 pt_query_digest分析慢查询"></a>2.2 pt_query_digest分析慢查询</h2><p>之所以使用 pt_query_digest 工具对慢查询日志进行分析，主要原因是上述工具分析的<strong>内容更佳丰富</strong>，更加方便我们分析慢查询。<br><strong>前置条件</strong><br>安装  pt_query_digest ,Google搜索应该一大把。</p>
<p>确保  pt_query_digest 安装成功 执行如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pt-query-digest /data/mysql/log/mysql_slow_query.log &gt; slow_log.report</div></pre></td></tr></table></figure></p>
<p><strong>上述命令表示分析本机慢查询，并输出报表(文件)</strong><br>接下来分析生成的报表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tail slow_log.report</div></pre></td></tr></table></figure></p>
<p>按如下图所示信息：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-5b92a18382f50903.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="pt_query_digest报表分析.png"></p>
<p>我们对以上红色框图标记的报表信息进行详细描述，事实上这也是我们<strong>需要掌握的重点：</strong></p>
<blockquote>
<p><strong>1.pct</strong> :sql语句某执行属性占所有慢查询语句某执行属性的百分比<br><strong>1.total</strong>：sql语句某执行属性的所有属性时间。<br><strong>2.Count</strong>：sql语句执行的次数，对应的pct 表示此sql 语句执行次数占所有慢查询语句执行次数的％比。上图为25%，total:表示总共执行了1次。<br><strong>3.Exec time</strong>:sql执行时间<br><strong>4.Lock time</strong>:sql执行期间被锁定的时间<br><strong>5.Rows sent</strong>:传输的有效数据，在select 查询语句中才有值<br><strong>6.Rows examine</strong>:总共查询的数据，非目标数据。<br><strong>7.Query_time distribution</strong>:查询时间分布<br><strong>8.SQL 语句</strong>:上图中为 select  * from payment limit 10\G;</p>
</blockquote>
<p><strong>举例说明：加入某执行次数(count) 占比较高的sql语句，执行时间很长，Rows sent 数值很小，Rows examine 数值很大则表明(I/O较大)。那就表明有可能 sql 查询语句走了全表扫描，或者全索引扫描。那么就要建立合适索引或者优化sql语句了。</strong><br>如下很好的展示了我们在分析慢查询时需要着重分析的三点：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-7c1e193809259e48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="慢查询分析的三个基准点.png"></p>
<h2 id="3-选择合适的数据类型"><a href="#3-选择合适的数据类型" class="headerlink" title="3.选择合适的数据类型"></a>3.选择合适的数据类型</h2><p>可以参考<a href="http://www.jianshu.com/p/c626c7ad27bf" target="_blank" rel="external">MySQL开发规范–设计篇</a>中的<strong>1.6 数据表设计与规划</strong></p>
<p>如下图是常用字段类型的选择建议：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-edc69b3a3506de2f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择合适的数据类型"></p>
<h4 id="4-去除无用的索引–pt-duplicate-key-checker工具的使用-索引层面"><a href="#4-去除无用的索引–pt-duplicate-key-checker工具的使用-索引层面" class="headerlink" title="4.去除无用的索引–pt_duplicate_key_checker工具的使用(索引层面)"></a>4.去除无用的索引–pt_duplicate_key_checker工具的使用(索引层面)</h4><p>此工具可以分析选定的 database  中的所有表中建立的index 中可能重复的索引，并给出了删除建议。</p>
<h2 id="5-反范式化设计-表结构"><a href="#5-反范式化设计-表结构" class="headerlink" title="5.反范式化设计(表结构)"></a>5.反范式化设计(表结构)</h2><p>关于范式的理解，请参考–<a href="http://www.jianshu.com/p/c626c7ad27bf" target="_blank" rel="external">MySQL 数据库规范–设计篇</a><strong>1.1 数据库表的设计范式(三范式&amp;反范式)</strong><br>先看一个不满足第三范式的数据表设计：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-d7a5a33837f9cf23.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="不满足第三范式的数据表设计.png"></p>
<p>不满足第三范式产生的问题：<br>假如将表中属于饮料分类的数据全部删除了，那么饮料分类也就不存在了，饮料的分类描述也就没了，查询不到了。这明显是不合理的。</p>
<p>重点：<strong>满足第三范式要求非键属性之间没有任何依赖关系</strong>，上图中分类与分类描述存在直接依赖关系。所以不符合第三范式的要求，那么要让表符合第三范式需要怎样做呢？</p>
<p>拆分后满足第三范式的表：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-c725007ff52e6850.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="满足第三范式的表.png"></p>
<p>我们采用一张 分类–商品名称 中间表来充当分表之后的中间桥梁。</p>
<p>当然如果一直遵循范式化设计，什么设计都向第三范式靠拢，当查询需要连接很多表的时候，建立索引已经起不到什么作用了，因为字段都不在同一张表中，所以建立索引是无用功，那么就要考虑反范式化的设计了。</p>
<h2 id="6-垂直、水平分表"><a href="#6-垂直、水平分表" class="headerlink" title="6.垂直、水平分表"></a>6.垂直、水平分表</h2><p>原则上当表中数据记录的数量超过3000万条，再好的索引也已经不能提高数据查询的速度了，这时候就需要将表拆分成更多的小表，来进行查询。<br>分表的机制有两种:</p>
<blockquote>
<p><strong>垂直分表</strong>:也就是将一部分列割裂开将数据放置在新设置的表中，优先选择字段值长度较长，类型较重的字段进行垂直分离。<br><strong>水平分表</strong>:将表中数据水平切分，可以按照范围、取模运算、hash运算进行数据切割，每张表的结构信息都是一样的。</p>
</blockquote>
<h2 id="7-MySQL-重要参数调优-系统配置"><a href="#7-MySQL-重要参数调优-系统配置" class="headerlink" title="7.MySQL 重要参数调优(系统配置)"></a>7.MySQL 重要参数调优(系统配置)</h2><p><strong>7.1 操作系统配置优化</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-6e0ca72ccb22c2fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操作系统配置优化"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-fbecd28a3290e863.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="打开操作系统文件限制.png"></p>
<p>简要介绍一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.tcp连接配置，超时时间配置</div><div class="line">2.linux上文件打开数量限制</div><div class="line">3.除此之外，最好在MySQL 服务器上关闭iptables,selinux 等防火墙软件。</div></pre></td></tr></table></figure></p>
<p><strong>7. 2 MySQL 配置文件优化</strong></p>
<blockquote>
<p>MySQL 可以通过启动时制定配置参数和使用配置文件两种方法进行配置，在大多数情况下配置文件位于/etc/my.cnf或是/etc/mysql/my.cnf MySQL查找配置文件顺序可以通过以下方法获得：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ /usr/sbin/mysqld --verbose --help | grep -A 1 &apos;Default options&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>注意:如果多个位置存在配置文件，后面的会覆盖前面的</strong></p>
<p><strong>7.2.1 innodb_buffer_pool_size</strong></p>
<blockquote>
<p>innodb_buffer_pool_size   是非常重要的一个参数，用户配置Innodb   的缓冲池大小。如果数据库中只有Innodb表，则推荐配置量为总内存的75%。<br>一般情况下运行如下命令，即可获得配置innodb_buffer_pool_size 参数的最佳值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">select engine round(sum(data_length+index_length)/1024/1024,1) as </div><div class="line">&apos;total MB&apos; from information_schema.tables where table_schema not in (&quot;information_schema&quot;,&quot;performance_schema&quot;) group by engine;</div><div class="line">Innodb_buffer_pool_size &gt; Total MB;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>7.2.2 innodb_buffer_pool_instance</strong></p>
<blockquote>
<p>MySQL  系统中有一些资源是需要独占使用的，比如缓冲去就是这样一种资源,因此如果系统中只有一个缓冲池，那么会增加阻塞的几率。我们多分成多个，则可以增加并发性能。</p>
</blockquote>
<p><strong>7.2.3 innodb_log_buffer_size</strong></p>
<blockquote>
<p>innodb log缓冲的大小，设置大小只能能容得下1s中产生的事务日志就可以。</p>
</blockquote>
<p><strong>7.2.4 innodb_flush_log_at_trx_commit</strong></p>
<blockquote>
<p>关键参数，对innodb 的I/O影响很大。默认值为1，可以去0，1，2三个值，一般建议为2，但如果数据安全性要求较高则默认使用1。</p>
<ul>
<li><strong>0:</strong>每隔1s中才将事务提交的变更记录刷新到磁盘</li>
<li><strong>1:</strong>每一次事务提交都把变更日志刷新到磁盘（最安全的方式）</li>
<li><strong>2:</strong>每一次提交将日志刷新到缓冲区，隔1s之后会将日志刷新到磁盘。</li>
</ul>
</blockquote>
<p><strong>7.2.5 innodb_read_io_threads &amp;&amp; innodb_write_io_threads</strong></p>
<blockquote>
<p>这两个参数决定了Innodb读写的I/O进程数，默认为4。<br>决定这两个参数数值的因素也有两个：<code>cpu核数</code>、<code>应用场景中读写事务比例</code>。</p>
</blockquote>
<p><strong>7.2.6 innodb_file_per_table</strong></p>
<blockquote>
<p>关键参数，默认情况下配置为off。<br>  控制innodb每一个表使用独立的表空间，默认情况下，所有的表都会建立在共享表空间当中。<br>使用共享表空间会带来什么问题：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> 1.多个表对共享表空间的操作，是顺序进行的，这样的话操作效率在并发情况下回降低。</div><div class="line">2.如果现在要删除一张表，会导致共享表空间先要将数据导出来，再重组。</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>7.2.7 innodb_stats_on_metadata</strong></p>
<blockquote>
<p>作用：决定了MySQL在什么情况下会刷新innodb表的统计信息。<br>保证数据库优化器能使用到最新的索引，但不能太频繁，一般设置为off。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库规范--开发篇]]></title>
      <url>/2017/11/14/MySQL-develop/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><hr>
<blockquote>
<p><strong>1.sql语句编写</strong><br>  <strong>2.explain 工具的使用–重点</strong><br><a id="more"></a></p>
<h2 id="1-sql语句编写"><a href="#1-sql语句编写" class="headerlink" title="1.sql语句编写"></a>1.sql语句编写</h2><hr>
<h4 id="SQL编写"><a href="#SQL编写" class="headerlink" title="SQL编写"></a>SQL编写</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">1.执行大的delete、update、insert操作要慎重，特别是对业务繁忙的系统，要尽量避免对线上业务产生影响。</div><div class="line">  解决办法是：大操作切割为小操作，使用limit子句限制每次操作的记录数，也可以利用一些日期字段基于更小粒度的时间范围进行操作。</div><div class="line"></div><div class="line">2.避免使用select * 语句，select语句之用于获取需要的字段。</div><div class="line"></div><div class="line">3.使用预编译语句，可以提高性能并且防范 sql注入 攻击。</div><div class="line"></div><div class="line">4.一般情况下update,delete 语句中不要使用limit。</div><div class="line"></div><div class="line">5.where 条件语句中必须使用合适的类型，避免mysql进行隐式转换。</div><div class="line"></div><div class="line">6.insert into 必须显式指明字段名称，不要使用insert into table()。</div><div class="line"></div><div class="line">7.避免在sql 语句中进行数学运算或函数运算，避免将业务逻辑和数据存储耦合在一起。</div><div class="line"></div><div class="line">8.insert 语句如果使用批量提交，如insert into table values(),()...那么values 的个数不应过多。一次性提交过多记录，会导致I/O紧张，出现慢查询。</div><div class="line"></div><div class="line">9.避免使用存储过程、触发器、函数等，这些特性会将业务逻辑与数据库耦合在一起，并且MySQL的存储过程，触发器，函数中可能存在bug。</div><div class="line"></div><div class="line">10.尽量避免使用子查询，连接。尽量将子查询转化为连接查询，mysql 查询优化器会优化连接查询，但连接的表要尽可能的少，如果很多，可以考虑反范式设计。即对设计阶段做一些改造。</div><div class="line"></div><div class="line">11.使用合理的sql语句以减少与数据库的交互次数。</div><div class="line"></div><div class="line">12.建议使用合理的分页技术以提高操作效率。</div></pre></td></tr></table></figure>
</blockquote>
<h2 id="2-explain-工具的使用"><a href="#2-explain-工具的使用" class="headerlink" title="2.explain 工具的使用"></a>2.explain 工具的使用</h2><hr>
<h4 id="explain工具的作用"><a href="#explain工具的作用" class="headerlink" title="explain工具的作用"></a>explain工具的作用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.使用 explain 工具可以确认执行计划是否良好，查询是否走了合理的索引。</div><div class="line">2.不同版本MySQL 优化器各有不同，一些优化规则随着版本的发展可能有变化，</div><div class="line">  查询的执行计划随着数据的变化也可能发生变化，这类情况就需要使用explain 来验证自己的判断。</div></pre></td></tr></table></figure>
<h4 id="explain-工具实操"><a href="#explain-工具实操" class="headerlink" title="explain 工具实操"></a>explain 工具实操</h4><p><strong>执行如下脚本，观察控制台输出</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">explain select name from test where id = 32;</div></pre></td></tr></table></figure></p>
<p>注意数据表使用如下脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE `test` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` varchar(11) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=41 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<p>table name = test、column1 = id、column2 = name.</p>
<p>执行结果如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-12bdacf45aed236c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-30 上午10.36.34.png"></p>
<p>下面详细阐述explain 输出的各项内容：</p>
<p><strong>id:</strong></p>
<blockquote>
<p>包含一组数字，表示查询中执行 select子句 或操作表的顺序。<br>如果 id 相同，则执行顺序<strong>由上到下</strong>。</p>
</blockquote>
<p><strong>select_type:</strong></p>
<blockquote>
<p>表示查询中每个 select 子句的类型(是简单还是复杂)输出结果类似如下：<br><strong>1.simple</strong><br>查询中不包含子查询或者union<br><strong>2.primary</strong><br>查询中若包含任何复杂子查询，最外层查询被标记为primary<br><strong>3.subquery</strong><br>在select 或 where 列表中包含了子查询，则该查询被标记为subquery<br><strong>4.derived</strong><br>在from列表中包含的子查询被标记为derived(衍生)<br><strong>5.union</strong><br>若第二个select出现在union之后，则被标记为derived。<br><strong>6.union result</strong><br>从union表中获取结果的select将被标记为 union result。<br><strong>select_type 只需要了解分类即可，这个信息并不是最有价值的。</strong></p>
</blockquote>
<p><strong>type:最有价值信息之一</strong></p>
<blockquote>
<p>type表示 MySQL 在表中找到所需行的方式，又称为“访问类型”，常见的类型如下所示：<br>all、index、range、ref、eq_ref、const,system,null<br>以上类型，由左至右，由最差到最好。<br><strong>all:</strong> Full Table Scan,MySQL  将遍历全表以找到匹配的行。<br><strong>index:</strong>Full Index Scan,index 与 all 区别为index类型只遍历索引树。假设表中有主键字段id,则select id from table_name；type即为Full Index Scan。<br><strong>range:</strong>索引扫描范围，对索引的扫描开始于某一点，返回匹配的域或行，常见于between、&lt;、&gt;等的查询。<br><strong>ref:</strong>非唯一性索引扫描，将返回匹配某个单独值得所有行。常见于使用非唯一索引或唯一索引的非唯一前缀的查找。<br><strong>eq_ref:</strong>唯一性索引扫描，对于每个索引键表中只有一条记录与之匹配。常见于主键或唯一索引扫描。<br><strong>const、system:</strong>当MySQL对查询的某部分进行优化，并转化为一个常量时，可使用这些类型进行访问。如果主键置于where列表中，MySQL就能将该查询转换为一个常量，system是const<br>的一个特例，当查询的表只有一行的情况下，即可使用system。<br><strong>null:</strong>MySQL 在优化过程中分解语句，执行时甚至不用访问表或索引，举例如下：<br>explain select <em> from (select </em> from t1 where id = 1)d1;</p>
</blockquote>
<p><strong>possible_keys</strong></p>
<blockquote>
<p>possible_keys 将指出MySQL能使用哪个索引在表中找到行，查询涉及的字段上若存在索引，则该索引将被列出，但不一定会被查询使用。</p>
</blockquote>
<p><strong>key:最有价值信息之二</strong></p>
<blockquote>
<p>key 将显示MySQL在查询中实际使用到的索引，若没有使用索引，则显示为null。<strong>查询中若使用到了覆盖索引，则该索引仅仅出现在 key 列表中</strong>，possible_keys中并不显示。</p>
</blockquote>
<p><strong>key_len</strong></p>
<blockquote>
<p>key_len表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。</p>
</blockquote>
<p><strong>ref</strong></p>
<blockquote>
<p>ref表示上述表的连接匹配条件，即哪些列或常亮被用于查找索引列上的值。</p>
</blockquote>
<p><strong>rows:最有价值信息之三</strong></p>
<blockquote>
<p>rows 表示MySQL根据表统计信息及索引选用的情况， 估算查找所需记录需要读取的行数。使用到索引一般情况下会使得rows的值降低。</p>
</blockquote>
<p><strong>Extra:最有价值信息之四</strong></p>
<blockquote>
<p>Extra 包含不适合在其他列中显示但十分重要的额外信息。可能包如下4种信息。<br> <strong>1.Using index</strong><br>该值表示相应的select操作中使用到了覆盖索引，包含满足查询需要的数据的索引称为覆盖索引。<br><strong>2.Using where</strong><br>如果查询未能使用索引，则Using where 的作用只是提醒我们 MySQL 将用where 子句来过滤结果集。<br><strong>3.Using temporary</strong><br>表示MySQL需要使用临时表来存储结果集，常见于order by 与 group by，事实上group by会进行隐式的order by。<br>如果我们在group by 时利用索引分组(其实包含排序的过程)排序，则可以提高性能，因为不会此时查询输出里没有了Using temporary,Using filesort。</p>
</blockquote>
<p><strong>4.Using filesort</strong><br>Using filesort 即文件排序，MySQL 中将无法使用索引完成的排序操作，称为文件排序。</p>
<p>  上文篇幅有点长，但都是必须了解的概念。<strong>最有价值信息</strong>是我们判断sql语句执行是否高效的基准，了解四个最有价值信息是最重要的。</p>
<p>继续演示explain的使用，使用上文的评判标准来看下语句的执行效率：<br><strong>1.主键查询</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-fb4452157a110cc3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主键查询"></p>
<blockquote>
<p>上述为主键查询的explain信息<br>type ＝ const 效率很高<br>key ＝ primary 实际使用的索引为主键<br>rows ＝ 1 查找的记录数为1<br>extra = null ,没有任何额外信息<br>总体来说，性能是极高。</p>
</blockquote>
<p><strong>2.主键范围查询</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-0f3a51ca37e8df87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主键范围查询"></p>
<blockquote>
<p>上述为主键范围查询的explain信息<br>type ＝range 范围查询，效率不是最低<br>key ＝ primary 实际使用的索引为主键<br>rows ＝ 7 查找的记录数为7<br>extra = Using where ,最终使用where 做结果集过滤，未使用到覆盖索引。<br>总体来说，性能是很高。</p>
</blockquote>
<p><strong>3.未带索引查询</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-2609af03a99e9053.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未带索引查询"></p>
<blockquote>
<p>如上图所示，name 并未做索引。<br>type ＝ALL Full Table Scan 全表查询<br>key ＝NULL 未使用索引<br>rows ＝ 7     10数据库中所有记录<br>extra = Using where ,最终使用where 做结果集过滤，未使用到覆盖索引。<br>总体来说，性能极差。（这也是我司内部deviceId接口出问题的终极原因）。</p>
</blockquote>
<p><strong>4.未带索引的分组查询</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-d98de2c308282351.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="未带索引的分组查询"></p>
<blockquote>
<p>如上图所示，name 并未做索引。<br>type ＝ALL Full Table Scan 全表查询<br>key ＝NULL 未使用索引<br>rows ＝ 7     10数据库中所有记录<br>extra = Using where ,最终使用where 做结果集过滤，未使用到覆盖索引。并使用到了temporary,filesort 临时表与文件查询。<br>总体来说，性能极差。</p>
</blockquote>
<p><strong>5.带索引的分组查询</strong></p>
<blockquote>
<p>我们现在为4与3中 name 创建索引，再来看看分析结果<br>创建索引脚本如下<br><strong>alter table test add index idx_name(name);</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-60e0883767030340.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="name 被索引之后的效果"><br>再运行3 和 4中的查询语句<br>结果如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-e384462227a7488b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非分组带索引查询"><br>type ＝ref 非唯一索引扫描，效率不是最低<br>key ＝name 实际使用的索引name索引（注意：idx_name与name都是在name字段上建立的索引）。<br>rows ＝ 1 查找的记录数为1<br>extra = Using index ,最终使用到覆盖索引。<br>总体来说，查询性能是极高的。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-f2d5ba4e7099c06a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="索引分组查询"><br>type ＝range 范围扫描，效率不是最低<br>key ＝name 实际使用的索引name索引（注意：idx_name与name都是在name字段上建立的索引）。<br>rows ＝ 1 查找的记录数为1<br>extra = Using index ,最终使用where 做结果集过滤，使用到覆盖索引。<br>总体来说，查询性能是极高的。</p>
</blockquote>
<p>当然上述演示比较简单，也不是非常具备实战色彩，对于explain的使用，我们还应在更多的数据库操作场景中多多使用，这是sql调优的利器。为我们后期的调优减轻了负担，可以说如果在这一步做好了sql脚本的设计，那么后期关于 sql调优 问题会非常少。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库索引使用场景与注意事项]]></title>
      <url>/2017/11/14/MySQL-index-notice-issue/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><blockquote>
<p>1.何种查询支持索引？<br>  2.注意事项和建议</p>
</blockquote>
<h2 id="一-何种查询支持索引？"><a href="#一-何种查询支持索引？" class="headerlink" title="一 何种查询支持索引？"></a>一 何种查询支持索引？</h2><a id="more"></a>
<h4 id="1-MySQL-目前支持前导列"><a href="#1-MySQL-目前支持前导列" class="headerlink" title="1 MySQL 目前支持前导列"></a>1 MySQL 目前支持前导列</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">就目前来说，mysql 暂时只支持最左前缀原则进行筛选。</div><div class="line">例子：创建复合索引</div><div class="line">create index idx_a_b_c on tb1(a,b,c)</div><div class="line">只有使用如下条件才可能应用到这个复合索引</div><div class="line">1.where a=?</div><div class="line">2.where a = ? and b = ?</div><div class="line">3.where a = ? and b = ? and c = ?</div><div class="line">但</div><div class="line">4.where a = ? and c ＝ ？</div><div class="line">只会使用到mysql 索引 a 列的信息</div></pre></td></tr></table></figure>
<h4 id="2-索引列上的范围查找"><a href="#2-索引列上的范围查找" class="headerlink" title="2.索引列上的范围查找"></a>2.索引列上的范围查找</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">对于某个条件进行范围查找时，如果这个列上有索引，且使用 where ... between </div><div class="line">and ... &gt; ,&lt; 等范围操作，那么可能用到索引范围查找，如果索引范围查找的成本太高，数据库可能会选择全表扫描的方式</div><div class="line">。</div><div class="line">注意 in  不属于范围查找的范畴</div></pre></td></tr></table></figure>
<h4 id="3-join-列"><a href="#3-join-列" class="headerlink" title="3.join 列"></a>3.join 列</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">在联合查询两个表时，比如查询语句为 select a.col1,b.col2 from a join b on a.id = b.id,</div><div class="line">其中id 为两个表的主键，如果a是小表，那么a 就被视为驱动表，那么数据库可能全表扫描a 表，</div><div class="line">并用 a表的每个id 去探测b表的索引查询匹配的记录。</div></pre></td></tr></table></figure>
<h4 id="4-where-子句"><a href="#4-where-子句" class="headerlink" title="4.where 子句"></a>4.where 子句</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">形如：</div><div class="line">where a = ? and b = ? and c&gt;1000</div><div class="line">where a = ? and b = ? and c = ? and d&gt;1000</div><div class="line"></div><div class="line">where 子句的条件列是复合索引前面的索引列＋另一个列的范围查找</div><div class="line"></div><div class="line">create  index idx_a_b_c_d on tb1(a,b,c,d);</div><div class="line"></div><div class="line">形如：</div><div class="line">where a = ? and b = ? and c&gt;1000</div><div class="line">where a = ? and b = ? and c = ? and d&gt;1000</div><div class="line">才会用到这个索引</div><div class="line"></div><div class="line">下面两个查询：</div><div class="line">where a = ? and b =? and c&gt;10000 and d&lt; 10000</div><div class="line">这个例子中d </div><div class="line">d &lt;10000这个操作不会走索引</div><div class="line">where a &gt;? and b =? and c&gt;10000 and d&lt; 10000</div><div class="line">这个例子中a列上有范围查找，那么b、c、d列上的索引信息都不能被利用</div><div class="line">原则，创建索引，考虑把复合索引的范围查找放到最后。</div></pre></td></tr></table></figure>
<h4 id="5-mysql-优化器"><a href="#5-mysql-优化器" class="headerlink" title="5.mysql 优化器"></a>5.mysql 优化器</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql 优化器会做一些特殊优化，比如对于索引查找max(索引列)可以直接进行定位。遇到max，min  是可以在列上做索引。</div></pre></td></tr></table></figure>
<h2 id="二-注意事项和建议"><a href="#二-注意事项和建议" class="headerlink" title="二 注意事项和建议"></a>二 注意事项和建议</h2><hr>
<p><strong>1.where 条件中的索引列不能是表达式的一部分，mysql 不支持函数索引</strong></p>
<p><strong>2.InnoDB 二级索引底层叶子极点存储的是索引+主键值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">InnoDB 的非主键索引存储的不是实际的记录的指针，而是主键的值，所以主键最好是整数型，如自增ID ,基于主键存取数据是最高效的，使用二级索引存取数据则需要进行二次索引查找。</div></pre></td></tr></table></figure></p>
<p><strong>3.索引尽量是高选择性的</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">而且要留意基数值，基数值指的是一个列中不同值的个数，显然，</div><div class="line">最大基数意味着该列中的每个值都是唯一的，最小基数意味着该列中的所有值都是相同的，索引列的基数相对于表的行数较高时，</div><div class="line">也就重复值更少，索引的工作效果更好。</div><div class="line">有种情况虽然基数很小，但由于数据分布很不均匀因此也会导致某些记录数很小，</div><div class="line">那么这种情况也适合建立索引加速查找这部分数据。</div></pre></td></tr></table></figure></p>
<p><strong>4.使用更短的索引</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">可以考虑前缀索引，但应确保选择的前缀的长度可以保证大部分值是唯一的。</div><div class="line">如：alter table test add  key(col(6))</div><div class="line">衡量不同前缀索引唯一值比例。</div><div class="line">select  count(distinct left(col_name,5))/count(*) As sele5，</div><div class="line">select  count(distinct left(col_name,6))/count(*) As sele6，</div><div class="line">select  count(distinct left(col_name,7))/count(*) As sele7，</div><div class="line">select  count(distinct left(col_name,8))/count(*) As sele8，</div><div class="line">select  count(distinct left(col_name,9))/count(*) As sele9</div><div class="line">from table_name;</div></pre></td></tr></table></figure></p>
<p><strong>5.避免创建过多的索引</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">索引过多可能会浪费大量空间</div><div class="line">尤其本身字段量较大的字符串，索引过多可能会浪费空间，且降低修改数据的速度，</div><div class="line">所以，不要创建过多的索引，也不要创建重复的索引。</div></pre></td></tr></table></figure></p>
<p><strong>6.如果是唯一值得列，创建唯一索引会更佳，也可以确保不会出现重复数据.</strong></p>
<p><strong>7.使用覆盖索引能大大提高性能</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">覆盖索引：所有数据都可以从索引中得到，而不需要去读物理记录。例如某个复合索引idx_a_b_c 建立在表tb1 的 a、b、c 列上，</div><div class="line">那么对于如下的sql 语句</div><div class="line">select a,b from tb1 where a = ? and b = ? and c =?</div><div class="line">mysql可以直接从索引idx_a_b_c  中获取数据。使用覆盖索引也可以避免二次索引查找。</div><div class="line">使用explain 命令输出查询计划，如果extra列是“using index ” 那就表示使用的是覆盖索引。</div></pre></td></tr></table></figure></p>
<p><strong>8.利用索引来排序</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql 有两种方式可以产生有序结果，一种是使用文件排序，另一种是扫描有序的索引，我们尽量使用索引来排序</div><div class="line"> 注意事项：</div><div class="line">   1. 尽量保证索引列和order by 的列相同，且各列按照相同的顺序排序。</div><div class="line">    比如在表table1 的复合索引idx_a_b_c（创建在a,b,c上)；</div><div class="line">    如：select * from table1 order by  a,b,c;</div><div class="line">           select * from table1 where a=? and b =? order by c</div><div class="line">    以上查询都可以利用有序索引来加速检索顺序。</div><div class="line">   2.如果连接多张表，那么order by 引用的列需要再表连接顺序的首张表内。</div></pre></td></tr></table></figure></p>
<p><strong>9 添加冗余索引需要权衡:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果一个索引column A 那么一个新的索引（columnA,columnB）就是冗余索引</div><div class="line">一般情况下不论是新增冗余索引，还是扩展原索引为冗余索引，都会导致索引文件的增大，并且增加了维护索引的开销。</div><div class="line">比如更改了列值，并且在此列上建立了索引，那么这个列值更改之后，索引是要进行重新排序的。</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务特征、数据库隔离级别，各级别数据库加锁情况(含实操)--read committed与 MVCC]]></title>
      <url>/2017/11/14/MySQL-ReadCommitted-MVCC/</url>
      <content type="html"><![CDATA[<p><strong>上节回顾</strong></p>
<hr>
<blockquote>
<p>上篇记录了我对MySQL 事务 隔离级别<strong> <a href="http://www.jianshu.com/p/d75fcdeb07a3" target="_blank" rel="external">read uncommitted</a> </strong>的理解。<br>这篇记录我对 MySQL 事务隔离级别 <strong><a href="http://www.jianshu.com/p/fd51cb8dc03b" target="_blank" rel="external">read committed &amp; MVCC</a></strong> 的理解。<br><a id="more"></a><br><strong>前言</strong></p>
<hr>
<p>可以很负责人的跟大家说，MySQL 中的此隔离级别<strong>不单单是通过加锁实现的</strong>，实际上还有repeatable read 隔离级别，其实这两个隔离级别效果的实现还需要一个辅助，这个辅助就是<strong>MVCC</strong>-多版本并发控制，但其实它又不是严格意义上的多版本并发控制，是不是很懵，没关系，我们一一剖析。</p>
</blockquote>
<p><strong>目录</strong></p>
<hr>
<blockquote>
<p>1.单纯加锁是怎么实现 read committed 的?<br>2.真实的演示情况是什么样子的？<br>3.MVCC 实现原理？<br>4.对于InnoDB MVCC 实现原理的反思</p>
</blockquote>
<p><strong>1.单纯加锁是怎么实现 read committed 的?</strong></p>
<hr>
<p>   从此隔离级别效果入手：事务只能读其他事务已提交的的记录。<br>  数据库事务隔离级别的实现，InnoDB 支持行级锁，写时加的是行级排他锁(X lock)，那么当其他事务访问另一个事务正在update (除select操作外其他操作本质上都是写操作)的同一条记录时，事务的读操作会被阻塞。所以只能等到记录(<strong>其实是索引上的锁</strong>)上的排他锁释放后才能进行访问，也就是事务提交的时候。这样确实能实现read commited隔离级别效果。<br>   数据库这样做确实可以实现 <strong>事务只能读其他事务已提交的的记录</strong> 的效果，但是这是很低效的一种做法，为什么呢？因为对于大部分应用来说，读操作是多于写操作的，当写操作加锁时，那么读操作全部被阻塞，这样会导致应用的相应能力受数据库的牵制。</p>
<p><strong>2.真实的演示情况是什么样子的？</strong></p>
<hr>
<p>看如下操作：<br>1.开启两个客户端实例,设置事务隔离级别为read committed，并各自开启事务。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">set transaction isolation level read committed;</div><div class="line">set autocommit = 0;</div><div class="line">begin；</div></pre></td></tr></table></figure></p>
<p>2.客户端1做更新操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update test set name = &apos;测试&apos; where id =32;</div></pre></td></tr></table></figure></p>
<p>结果如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-3d9925da1d59e956.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-28 下午1.39.44.png"></p>
<p>3.客户端2做查询操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name from test where id = 32;</div></pre></td></tr></table></figure></p>
<p>结果如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-b6c46003ced6462c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-28 下午1.41.23.png"></p>
<p>这时估计你有疑问了，正在 被客户端1 upate  的记录，客户端2还能无阻塞的读到，而且读到的是未更改之前的数据。<br>那就是 InnoDB 的辅助打得好，因为内部使用了 MVCC 机制，实现了一致性非阻塞读，大大提高了并发读写效率，写不影响读，且读到的事记录的镜像版本。</p>
<p>下面开始介绍 MVCC  原理。</p>
<p><strong>3.MVCC 实现原理</strong></p>
<hr>
<p>网上对  MVCC 实现原理  的讲述五花八门，良莠不齐。<br>包括《高性能MySQL》对 MVCC 的讲解只是停留在表象，并没有结合源码去分析。当然绝大多数人还是相信这本书的，从来没有进行深剖，思考。<br>如下是 《高性能MySQL》对 MVCC实现原理 的描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;InnoDB的 MVCC ，是通过在每行记录的后面保存两个隐藏的列来实现的。这两个列，</div><div class="line">一个保存了行的创建时间，一个保存了行的过期时间，</div><div class="line">当然存储的并不是实际的时间值，而是系统版本号。&quot;</div></pre></td></tr></table></figure></p>
<p><strong>就是这本书，蒙蔽了真理，害人不浅。</strong></p>
<p><strong>我们还是看源码吧：</strong></p>
<hr>
<p><strong>1.记录的隐藏列</strong><br>其实有三列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">在Mysql中MVCC是在Innodb存储引擎中得到支持的，Innodb为每行记录都实现了三个隐藏字段：</div><div class="line"></div><div class="line">6字节的事务ID（DB_TRX_ID）</div><div class="line"></div><div class="line">7字节的回滚指针（DB_ROLL_PTR）</div><div class="line"></div><div class="line">隐藏的ID</div><div class="line"></div><div class="line">6字节的事物ID用来标识该行所述的事务，7字节的回滚指针需要了解下Innodb的事务模型。</div></pre></td></tr></table></figure></p>
<p><strong>2.MVCC 实现的依赖项</strong><br>MVCC  在mysql 中的实现依赖的是 undo log 与 read view。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.undo log: undo log中记录的是数据表记录行的多个版本，也就是事务执行过程中的回滚段,其实就是MVCC 中的一行原始数据的多个版本镜像数据。</div><div class="line">2.read view: 主要用来判断当前版本数据的可见性。</div></pre></td></tr></table></figure></p>
<p><strong>3.undo log</strong></p>
<blockquote>
<p>undo log是为回滚而用，具体内容就是copy事务前的数据库内容（行）到undo buffer，在适合的时间把undo buffer中的内容刷新到磁盘。undo buffer与redo buffer一样，也是环形缓冲，但当缓冲满的时候，undo buffer中的内容会也会被刷新到磁盘；与redo log不同的是，磁盘上不存在单独的undo log文件，所有的undo log均存放在主ibd数据文件中（表空间），即使客户端设置了每表一个数据文件也是如此。</p>
</blockquote>
<p>我们通过行的更新过程来看下undo log 是如何形成的？</p>
<p><strong>3.1  行的更新过程</strong><br>下面演示下事务对某行记录的更新过程：</p>
<ol>
<li>初始数据行<br><img src="http://upload-images.jianshu.io/upload_images/2836699-970dcf17cbe0d6f9.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>F1～F6是某行列的名字，1～6是其对应的数据。后面三个隐含字段分别对应该行的事务号和回滚指针，假如这条数据是刚INSERT的，可以认为ID为1，其他两个字段为空。<br>2.事务1更改该行的各字段的值<br><img src="http://upload-images.jianshu.io/upload_images/2836699-4d2849cd6570c260.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>当事务1更改该行的值时，会进行如下操作：<br>用排他锁锁定该行<br>记录redo log<br>把该行修改前的值Copy到undo log，即上图中下面的行<br>修改当前行的值，填写事务编号，使回滚指针指向undo log中的修改前的行<br>3.事务2修改该行的值<br><img src="http://upload-images.jianshu.io/upload_images/2836699-9e8ae7fb3d92fe55.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>与事务1相同，此时undo log，中有有两行记录，并且通过回滚指针连在一起。</li>
</ol>
<p><strong>4.read view 判断当前版本数据项是否可见</strong></p>
<blockquote>
<p>在innodb中，创建一个新事务的时候，innodb会将当前系统中的活跃事务列表（trx_sys-&gt;trx_list）创建一个副本（read view），副本中保存的是系统当前不应该被本事务看到的其他事务id列表。当用户在这个事务中要读取该行记录的时候，innodb会将该行当前的版本号与该read view进行比较。<br>具体的算法如下:</p>
<ol>
<li>设该行的当前事务id为trx_id_0，read view中最早的事务id为trx_id_1, 最迟的事务id为trx_id_2。</li>
<li>如果trx_id_0&lt; trx_id_1的话，那么表明该行记录所在的事务已经在本次新事务创建之前就提交了，所以该行记录的当前值是可见的。跳到步骤6.</li>
<li>如果trx_id_0&gt;trx_id_2的话，那么表明该行记录所在的事务在本次新事务创建之后才开启，所以该行记录的当前值不可见.跳到步骤5。</li>
<li>如果trx_id_1&lt;=trx_id_0&lt;=trx_id_2, 那么表明该行记录所在事务在本次新事务创建的时候处于活动状态，从trx_id_1到trx_id_2进行遍历，如果trx_id_0等于他们之中的某个事务id的话，那么不可见。跳到步骤5.</li>
<li>从该行记录的DB_ROLL_PTR指针所指向的回滚段中取出最新的undo-log的版本号，将它赋值该trx_id_0，然后跳到步骤2.</li>
<li>将该可见行的值返回。</li>
</ol>
</blockquote>
<p><strong>需要注意的是，新建事务(当前事务)与正在内存中commit 的事务不在活跃事务链表中。</strong></p>
<p>对应代码如下：</p>
<blockquote>
<p>函数：read_view_sees_trx_id。<br>read_view中保存了当前全局的事务的范围：<br>【low_limit_id， up_limit_id】<br><strong>1. 当行记录的事务ID小于当前系统的最小活动id，就是可见的。</strong><br>　　if (trx_id &lt; view-&gt;up_limit_id) {<br>　　　　return(TRUE);<br>　　}<br><strong>2. 当行记录的事务ID大于当前系统的最大活动id，就是不可见的。</strong><br>　　if (trx_id &gt;= view-&gt;low_limit_id) {<br>　　　　return(FALSE);<br>　　}<br><strong>3. 当行记录的事务ID在活动范围之中时，判断是否在活动链表中，如果在就不可见，如果不在就是可见的。</strong><br>　　for (i = 0; i &lt; n_ids; i++) {<br>　　　　trx_id_t view_trx_id<br>　　　　　　= read_view_get_nth_trx_id(view, n_ids - i - 1);<br>　　　　if (trx_id &lt;= view_trx_id) {<br>　　　　return(trx_id != view_trx_id);<br>　　　　}<br>　　}</p>
</blockquote>
<p><strong>5 事务隔离级别的影响</strong></p>
<blockquote>
<p>但是：对于两张不同的事务隔离级别<br>　　tx_isolation=’READ-COMMITTED’: 语句级别的一致性：只要当前语句执行前已经提交的数据都是可见的。<br>　　tx_isolation=’REPEATABLE-READ’; 语句级别的一致性：只要是当前事务执行前已经提交的数据都是可见的。<br>针对这两张事务的隔离级别，使用相同的可见性判断逻辑是如何做到不同的可见性的呢？</p>
</blockquote>
<p><strong>6.不同隔离级别下read view的生成原则</strong></p>
<blockquote>
<p>这里就要看看read_view的生成机制：<br><strong>1. read-commited:</strong><br>　　函数：ha_innobase::external_lock<br>　　if (trx-&gt;isolation_level &lt;= TRX_ISO_READ_COMMITTED<br>　　　　&amp;&amp; trx-&gt;global_read_view) {<br>　　　　/<em> At low transaction isolation levels we let<br>　　　　each consistent read set its own snapshot </em>/<br>　　read_view_close_for_mysql(trx);<br>即：在每次语句执行的过程中，都关闭read_view, 重新在row_search_for_mysql函数中创建当前的一份read_view。<br>这样就可以根据当前的全局事务链表创建read_view的事务区间，实现read committed隔离级别。<br><strong>2. repeatable read：</strong><br>　　在repeatable read的隔离级别下，创建事务trx结构的时候，就生成了当前的global read view。<br>　　使用trx_assign_read_view函数创建，一直维持到事务结束，这样就实现了repeatable read隔离级别。</p>
</blockquote>
<p><strong>正是因为6中的read view 生成原则，导致在不同隔离级别()下,read committed 总是读最新一份快照数据，而repeatable read 读事务开始时的行数据版本。</strong></p>
<p><strong>4.InnoDB MVCC 实现原理的深刻反思</strong></p>
<hr>
<blockquote>
<p>上述更新前建立undo log，根据各种策略读取时非阻塞就是MVCC，undo log中的行就是MVCC中的多版本，这个可能与我们所理解的MVCC有较大的出入。</p>
</blockquote>
<p>一般我们认为MVCC有下面几个特点：</p>
<blockquote>
<p>每行数据都存在一个版本，每次数据更新时都更新该版本<br>修改时Copy出当前版本随意修改，个事务之间无干扰<br>保存时比较版本号，如果成功（commit），则覆盖原记录；失败则放弃copy（rollback）<br>就是每行都有版本号，保存时根据版本号决定是否成功，听起来含有乐观锁的味道。。。，而</p>
</blockquote>
<p>Innodb的实现方式是：</p>
<blockquote>
<p>事务以排他锁的形式修改原始数据<br>把修改前的数据存放于undo log，通过回滚指针与主数据关联<br>修改成功（commit）啥都不做，失败则恢复undo log中的数据（rollback）</p>
</blockquote>
<p><strong>二者最本质的区别是，当修改数据时是否要排他锁定，如果锁定了还算不算是MVCC？</strong></p>
<blockquote>
<p><strong>Innodb的实现真算不上MVCC</strong>，因为并没有实现核心的多版本共存，undo<br>log中的内容只是串行化的结果，记录了多个事务的过程，不属于多版本共存。但理想的MVCC是难以实现的，当事务仅修改一行记录使用理想的MVCC模式<br>是没有问题的，可以通过比较版本号进行回滚；但当事务影响到多行数据时，理想的MVCC据无能为力了。</p>
<p>比如，如果Transaciton1执行理想的MVCC，修改Row1成功，而修改Row2失败，此时需要回滚Row1，但因为Row1没有被<br>锁定，其数据可能又被Transaction2所修改，如果此时回滚Row1的内容，则会破坏Transaction2的修改结果，导致<br>Transaction2违反ACID。</p>
<p>理想MVCC难以实现的根本原因在于企图通过乐观锁代替二段提交。修改两行数据，但为了保证其一致性，与修改两个分布式系统中的数据并无区别，<br>而二提交是目前这种场景保证一致性的唯一手段。二段提交的本质是锁定，乐观锁的本质是消除锁定，二者矛盾，故理想的MVCC难以真正在实际中被应<br>用，Innodb只是借了MVCC这个名字，提供了读的非阻塞而已。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[where与having的区别]]></title>
      <url>/2017/11/14/mysql-where-having/</url>
      <content type="html"><![CDATA[<h2 id="区别概述："><a href="#区别概述：" class="headerlink" title="区别概述："></a>区别概述：</h2><hr>
<p>1.<strong>where是一个约束声明</strong>，使用where约束来自数据库的数据，where是在结果集返回之前起作用的，where中不能使用聚合函数。<strong>注意：返回结果集之前起作用</strong><br>2.<strong>having是一个过滤声明</strong>，是在查询返回结果集以后对查询结果进行过滤操作，在Having中可以使聚合函数。<strong>注意：返回结果集之后起作用</strong><br>3.在查询过程中<strong>where子句</strong>、<strong>聚合语句</strong>、<strong>having子句</strong>，的执行优先级为<strong>where&gt;group by&gt;聚合语句(sum、count、avg、max、min)&gt;having子句</strong><br><a id="more"></a></p>
<h2 id="举例说明："><a href="#举例说明：" class="headerlink" title="举例说明："></a>举例说明：</h2><hr>
<p><strong>&lt;1.</strong>假设有数据表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">CREATE TABLE  `test`.`salary_info` (  </div><div class="line">  `id` int(10) unsigned NOT NULL auto_increment,  </div><div class="line">  `department` varchar(16) NOT NULL default &apos;&apos;,  </div><div class="line">  `name` varchar(16) NOT NULL default &apos;&apos;,  </div><div class="line">  `salary` int(10) unsigned NOT NULL default &apos;0&apos;,  </div><div class="line">   PRIMARY KEY  (`id`)  </div><div class="line">) ENGINE=MyISAM AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;</div></pre></td></tr></table></figure></p>
<p><strong>example 1: 要查找平均工资大于3000的部门</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select department,avg(salary) from salary_info group by department having avg(salary)&gt;3000</div></pre></td></tr></table></figure></p>
<p><strong>解释：</strong>此时我们只能用having，而不能使用where子句。1.sql语句中使用了聚合函数。2.对聚合后的结果进行筛选。所以不能使用where。3.可以从题目中看出平均工资3000，是必须要知道总额之后才能计算出平均值，也就是在知道结果集之后才能计算出avg，这就是使用having的原因</p>
<p><strong>example 2: 要查询每个部门工资大于3000的员工个数</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select department,count(*) as c from salary_info where</div><div class="line">salary&gt;3000 group by department</div></pre></td></tr></table></figure></p>
<p><strong>解释：</strong>1.此处的sql执行顺序是这样的 where语句在没有获得结果集之前对数据进行约束，符合条件的数据被筛选出来，然后对数据分组，然后对每个分组的数据进行count统计。这个执行顺序是跟区别概述中第三条对应的，这也是优先级是以上所述的原因。<br>                2.可以从题目中看出个人工资大于3000的员工个数，则在count之前，必须把工资大于3000的员工晒寻出来。在返回结果集之前先得把这些人筛选出来，而返回结果集之前的操作使用where。</p>
<p><strong>&lt;2.</strong>假设有数据表：Orders<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">o_Id   |     OrderDate   |    OrderPrice   |    Customer</div><div class="line">  1          2008/12/29          1000               yy</div><div class="line">  2          2008/11/23          2000               xx</div><div class="line">  3          2008/10/05          1600               mm</div><div class="line">  4          2008/09/28          700                 hh</div><div class="line">  5          2008/08/06          300                 gg</div><div class="line">  6          2008/07/21          100                 uu</div></pre></td></tr></table></figure></p>
<p><strong>example 1: 计算”OrderPrice” 字段的平均值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select avg(OrderPrice) as v from Orders;</div></pre></td></tr></table></figure></p>
<p><strong>example 2:找到OrderPrice 大于OrderPrice平均值的客户</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">select Customer From Orders where OrderPrice&gt;(select avg(OrderPrice) as v from Orders);</div><div class="line">//这个（）语句是第一个where语句的子查询，先执行子查询，再以子查询的结果作为筛选条件，过滤出结果集</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务特征、数据库隔离级别，各级别数据库加锁情况(含实操)--Repeatable Read与MVCC]]></title>
      <url>/2017/11/14/MySQL-RepeatableRead-MVCC/</url>
      <content type="html"><![CDATA[<p><strong>上节回顾</strong></p>
<hr>
<blockquote>
<p>上两篇记录了我对MySQL 事务 隔离级别<strong> <a href="http://www.jianshu.com/p/d75fcdeb07a3" target="_blank" rel="external">read uncommitted</a> </strong>、MySQL 事务隔离级别 <strong><a href="http://www.jianshu.com/p/fd51cb8dc03b" target="_blank" rel="external">read committed</a>＋MVCC</strong> 的理解。<br>这篇记录我对 Repeatable Read 的理解。<br><a id="more"></a><br><strong>前言</strong></p>
<hr>
<p>MySQL在 <strong>read committed</strong>、<strong>Repeatable Read </strong> 两个级别下都会使用到MVCC, 并且只在这两个级别下使用。</p>
</blockquote>
<p><strong>目录</strong></p>
<hr>
<blockquote>
<p>1.单纯加锁是怎么实现  Repeatable Read  的?<br>2.真实的情况是什么样子的？</p>
</blockquote>
<p><strong>1.单纯加锁是怎么实现  Repeatable Read  的</strong></p>
<hr>
<blockquote>
<p>1.多线程同时更新同一条记录，加X锁。所以并发场景下的 update 是串行执行的。<br>  2.工业定义上的 select 一条记录，这个时候会在记录上加读共享锁(S锁)，并到事务结束，因为在这种情况下才能实现记录在事务时间跨度上的可重复读。在读的时候不允许其他事务修改这条记录。<br>  3.update 一条语句，这个时候会在记录上加行级排他锁(X锁)，并到事务结束，这中场景下，其他读事务会被阻塞。</p>
</blockquote>
<p><strong>2.真实的情况是什么样子的？</strong></p>
<hr>
<p>读不影响写，写不影响读。</p>
<blockquote>
<p>1.读不影响写：事务以排他锁的形式修改原始数据，<strong>读时不加锁</strong>，因为 MySQL 在事务隔离级别Read committed 、Repeatable Read下，InnoDB  存储引擎采用非锁定性一致读－－即读取不占用和等待表上的锁。即采用的是MVCC中一致性非锁定读模式。因读时不加锁，所以不会阻塞其他事物在相同记录上加 X锁来更改这行记录。<br>2.写不影响读：事务以排他锁的形式修改原始数据，当读取的行正在执行 delete  或者 update 操作，这时读取操作不会因此去等待行上锁的释放。相反地，InnoDB 存储引擎会去读取行的一个快照数据。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据库事务特征、数据库隔离级别，以及各级别数据库加锁情况(含实操)--read uncommitted篇]]></title>
      <url>/2017/11/14/mysql-isolation-read-uncommitted/</url>
      <content type="html"><![CDATA[<h2 id="1-目的"><a href="#1-目的" class="headerlink" title="1.目的"></a>1.目的</h2><hr>
<h2 id="1-1-合适人群"><a href="#1-1-合适人群" class="headerlink" title="1.1 合适人群"></a>1.1 合适人群</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.数据库事务特征我只是背过，并没有很深刻的理解。</div><div class="line">2.数据库事务的隔离级别只是了解，并没有深刻理解，也没有在实际工作中体验使用过。</div><div class="line">3.经常面试被人问起数据库加锁情况，一头雾水，很懵。</div><div class="line">4.在网上找过很多博客，有的写得太多没耐心看，有的写得摘抄的定义，泛泛而谈，没有实操更没有讲解。</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-2-关于这篇分享对以上问题的解决"><a href="#1-2-关于这篇分享对以上问题的解决" class="headerlink" title="1.2 关于这篇分享对以上问题的解决"></a>1.2 关于这篇分享对以上问题的解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.实践出真知，如果认真读完，并实操，实操过后反复咀嚼，相信上面的问题，除了你有没有耐心看等主观因素，其他的都能一一解决。</div><div class="line">2.希望这是理解数据库事务问题的一篇好文章。</div><div class="line">3.如果有什么问题，请评论下， 我们多交流谢谢。</div></pre></td></tr></table></figure>
<h2 id="2-事务本质剖析"><a href="#2-事务本质剖析" class="headerlink" title="2.事务本质剖析"></a>2.事务本质剖析</h2><hr>
<h3 id="2-1-什么是事务？"><a href="#2-1-什么是事务？" class="headerlink" title="2.1 什么是事务？"></a>2.1 什么是事务？</h3><h4 id="2-2-1-如下表格所示："><a href="#2-2-1-如下表格所示：" class="headerlink" title="2.2.1 如下表格所示："></a>2.2.1 如下表格所示：</h4><table>
<thead>
<tr>
<th>事务类别(不考虑分布式事物)</th>
<th>事务本质</th>
<th>并发事务解决方案</th>
<th>并发事务方案解决的问题</th>
<th>并发事务解决方案实现原理</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据库事务(狭义理解)</td>
<td>数据库sql执行过程</td>
<td>控制事务隔离级别</td>
<td>确保数据完整、安全、一致性，在此基础上实现高性能访问（鱼和熊掌不可兼得）</td>
<td>不同的加锁策略</td>
</tr>
<tr>
<td>应用层事务(广义理解)</td>
<td>业务逻辑</td>
<td>制定多线程访问策略，如悲观锁(同步)、乐观锁（无锁，CAS思想）</td>
<td>确保线程之间操作不会相互影响，保证各访问能保证得到期望结果，并在此基础上实现最大可能性的高性能访问</td>
<td>不同的加锁策略</td>
</tr>
</tbody>
</table>
<h4 id="2-2-2-对上述表格内容的解释"><a href="#2-2-2-对上述表格内容的解释" class="headerlink" title="2.2.2 对上述表格内容的解释"></a>2.2.2 对上述表格内容的解释</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#### msyql事务</div><div class="line">1.mysql:传统理解 mysql 中的一次操作过程(sql 执行)是一次事务。</div><div class="line">2.mysql:那么多个线程 同时操作 mysql 中的数据（同一条数据，一个范围内数据）就叫并发事务。</div><div class="line">3.mysql:数据库层面使用不同的事务隔离级别来进行并发事务的控制，不同的隔离级别是因为数据库中内部锁机制的使用方式不同，例如有的是在select完成之后立马释放锁，有的是在整个事务commit 之后释放锁</div><div class="line">。</div><div class="line">--------------------------------------------------------------------------------------------------------------</div><div class="line">#### 应用层事务</div><div class="line">1.应用：其实每一个线程调用服务本质上也是事务。</div><div class="line">2.应用：多个线程同时调用服务，叫并发调用服务，也可以叫并发事务。</div><div class="line">3.应用：应用层应对并发事务(访问)解决方案有同步(悲观锁)、乐观锁(无锁CAS)。我们对并发访问做系统应用层控制也会使用到锁。</div></pre></td></tr></table></figure>
<h4 id="个人理解这就是事务的本质。事务不应该只仅限于数据库。"><a href="#个人理解这就是事务的本质。事务不应该只仅限于数据库。" class="headerlink" title="个人理解这就是事务的本质。事务不应该只仅限于数据库。"></a>个人理解这就是事务的本质。事务不应该只仅限于数据库。</h4><h2 id="2-2-关于ACID"><a href="#2-2-关于ACID" class="headerlink" title="2.2 关于ACID"></a>2.2 关于ACID</h2><p>举例子说明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.A 原子性：事务可以简单理解为一次数据库操作，也就是执行sql的过程，要么执行，要么不执行，整个执行结果只有两种执行成功，执行失败。</div><div class="line">2.C 一致性：A有100块钱，转1块钱给另外一个帐户，还有99块钱，在整个事务执行过程中，钱数总是100块，不会变，这就是一致性。</div><div class="line">3.I 隔离性：事务执行过程相互隔离，不会相互之间产生影响（这只是美好的愿望）。意思是多个事务并发执行的话，结果应该与多个事务串行执行效果是一样的。但并发情况下需要考虑性能，所以就需要在隔离性上做些手脚（妥协），也就是制定不同的隔离级别达到不同的并发性能。</div><div class="line">4.D 持久性：事务每一次的执行结果都应该持久化（存储）到数据库中（磁盘数据）。想想除了select，其他的update/delete/insert都会产生这样的结果，持久化在应用场景中是必须的，除非你写了假接口。哈哈。</div></pre></td></tr></table></figure></p>
<h2 id="3-数据库事务的隔离级别"><a href="#3-数据库事务的隔离级别" class="headerlink" title="3.数据库事务的隔离级别"></a>3.数据库事务的隔离级别</h2><hr>
<h3 id="3-1-为什么需要隔离级别"><a href="#3-1-为什么需要隔离级别" class="headerlink" title="3.1 为什么需要隔离级别?"></a>3.1 为什么需要隔离级别?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.四个特性之隔离性的体现。</div><div class="line">2.对不同并发事务应用场景提供不同解决方案。解决方案本质，加锁。</div><div class="line">3.如果不需要隔离别会出现什么情况？</div><div class="line">   假设一个场景，数据库中任何数据在被并发 curd 时不设置隔开级别，也就是不加锁，情景平移，我们学习多线程时，对线程对公共变量的并发操作不加锁会导致各种异常情况的发生。所以不设置数据库隔离级别，数据的变化我们是不能祈求数据库中数据按照我们预期去改变的。</div></pre></td></tr></table></figure>
<p>现在我们知道数据库 隔离级别 的必要性，接下来讨论不同隔离级别会带来的问题。</p>
<h3 id="3-2-不同隔离级别带来的问题（重要！含实操部分，最好可以实践下）"><a href="#3-2-不同隔离级别带来的问题（重要！含实操部分，最好可以实践下）" class="headerlink" title="3.2 不同隔离级别带来的问题（重要！含实操部分，最好可以实践下）"></a>3.2 不同隔离级别带来的问题（重要！含实操部分，最好可以实践下）</h3><p>1.前置条件–几个概念的理解（重要）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">不同隔离级别带来的数据操作问题：</div><div class="line"> 1.脏读：两个事务，t1事务可以读取到t2事务正在做更改的数据的中间状态(t2事务执行过程中)，而这个数据的更改有可能不会被持久化(commit)，而是rollback，导致t1在同一事务内的两次读取同一行数据得到结果不同。</div><div class="line"> 2.不可重复读：t1事务在整个事务执行过程中读取某一条记录多次，发现读取的此条记录不是每次都一样。</div><div class="line"> 3.幻读：t1事务在整个事务执行过程中读取某一范围内的数据，在第二次读取时发现多了几行或者少了几行。</div><div class="line">-----------------------------------------------------------------------------------------------</div><div class="line">数据库中的几种隔离级别</div><div class="line">read uncommited--读未提交</div><div class="line">    该隔离级别指即使一个事务的更新语句没有提交,但是别的事务可以读到这个改变，几种异常情况都可能出现。极易出错，没有安全性可言，基本不会使用。</div><div class="line">read committed --读已提交</div><div class="line">    该隔离级别指一个事务只能看到其他事务的已经提交的更新，看不到未提交的更新，消除了脏读和第一类丢失更新，这是大多数数据库的默认隔离级别，如Oracle,Sqlserver。</div><div class="line">repeatable read --可重复读</div><div class="line">    该隔离级别指一个事务中进行两次或多次同样的对于数据内容的查询，得到的结果是一样的，但不保证对于数据条数的查询是一样的，只要存在读改行数据就禁止写，消除了不可重复读和第二类更新丢失，这是Mysql数据库的默认隔离级别。</div><div class="line">serializable --序列化读</div><div class="line">     意思是说这个事务执行的时候不允许别的事务并发写操作的执行.完全串行化的读，只要存在读就禁止写,但可以同时读，消除了幻读。这是事务隔离的最高级别，虽然最安全最省心，但是效率太低，一般不会用。</div><div class="line">------------------------------------------------------------------------------------------------</div><div class="line">数据库中的锁：</div><div class="line">1.共享锁（Share locks简记为S锁）：也称读锁，事务A对对象T加s锁，其他事务也只能对T加S，多个事务可以同时读，但不能有写操作，直到A释放S锁。</div><div class="line"></div><div class="line">2.排它锁（Exclusivelocks简记为X锁）：也称写锁，事务A对对象T加X锁以后，其他事务不能对T加任何锁，只有事务A可以读写对象T直到A释放X锁。</div><div class="line"></div><div class="line">3.更新锁（简记为U锁）：用来预定要对此对象施加X锁，它允许其他事务读，但不允许再施加U锁或X锁；当被读取的对象将要被更新时，则升级为X锁，主要是用来防止死锁的。因为使用共享锁时，修改数据的操作分为两步，首先获得一个共享锁，读取数据，然后将共享锁升级为排它锁，然后再执行修改操作。这样如果同时有两个或多个事务同时对一个对象申请了共享锁，在修改数据的时候，这些事务都要将共享锁升级为排它锁。这些事务都不会释放共享锁而是一直等待对方释放，这样就造成了死锁。如果一个数据在修改前直接申请更新锁，在数据修改的时候再升级为排它锁，就可以避免死锁。</div></pre></td></tr></table></figure></p>
<p>接下来化繁为简，配合实操，来看看每种隔离级别场景。<strong>不要觉得繁琐，一定要读下去。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">演示场景配置：</div><div class="line">数据库：mysql 5.7</div><div class="line">命令行工具：iterm2.0</div></pre></td></tr></table></figure>
<p><strong>1.read uncommited–读未提交</strong><br>前置条件：<br>1.开启两个 mysql 客户端终端<br><img src="http://upload-images.jianshu.io/upload_images/2836699-8653a811b9459e61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="开启客户端终端.png"><br>2.查看当前客户端事务隔离级别<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令为：select @@session.tx_isolation;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-742f35e0e004fa38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午2.05.57.png"></p>
<p>3.选择数据库，建立演示表test，并设置当前客户端事务隔离级别为read uncommitted.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">1.mysql&gt; show databases;</div><div class="line">2.mysql&gt; use 你的演示数据库</div><div class="line">3.mysql&gt; CREATE TABLE `test` (</div><div class="line">  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,</div><div class="line">  `name` varchar(11) DEFAULT NULL,</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB AUTO_INCREMENT=20 DEFAULT CHARSET=utf8;</div><div class="line">4.insert into test values(1,&apos;张三&apos;),(2,&apos;李四&apos;),(3,&apos;王五&apos;);  </div><div class="line">4.select @@session.tx_isolation;</div><div class="line">5.set session transaction isolation level read uncommitted;</div><div class="line">6.select @@session.tx_isolation;</div></pre></td></tr></table></figure></p>
<p>注意：两个客户端都需执行<strong>set session transaction isolation level read uncommitted;</strong></p>
<p>4.客户端1，客户端2设置事务提交模式为 set autocommit = 0;表示关闭默认的自动提交事务功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">命令：set autocommit = 0;</div></pre></td></tr></table></figure></p>
<p>5.开启事务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">begin;</div></pre></td></tr></table></figure></p>
<p>6.客户端1 执行 如下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name from test where id = 1 ;</div></pre></td></tr></table></figure></p>
<p>结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-e20808ef162cc8e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午3.53.29.png"></p>
<p>7.客户端2 执行如下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update test set name = &apos;张八&apos; where id = 1;</div></pre></td></tr></table></figure></p>
<p>结果如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-eef033408272e785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午3.57.05.png"><br>8.切换到客户端1执行如下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name  from test where id = 1;</div></pre></td></tr></table></figure></p>
<p>结果如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-11e078f3609eb560.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午3.58.28.png"><br>我们发现此时客户端1再次读id = 1的记录时，name 已经从 ‘张三’ 更改为 ‘张八’。</p>
<p>我们继续执行下一步操作<br>9.客户端2执行回滚操作,脚本如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rollback;</div></pre></td></tr></table></figure></p>
<p>结果如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-500f4d4182bd3808.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午4.00.41.png"></p>
<p>10.客户端1继续查看id ＝ 1的记录,如下脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select name from test where id = 1;</div></pre></td></tr></table></figure></p>
<p>结果如下所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-d1f6c33887ad3cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-24 下午4.02.27.png"></p>
<p>我们发现在客户端1的一次事务中id ＝ 1 的记录的name 发生了变化，这种变化就称之为<strong>脏读</strong>。<br>下面我们分析下 read uncommitted 情况下的加锁情况。<br>吐槽一句，现在网上的博客对这个隔离级别的加锁分析五花八门。<br>分为三大门派：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">1.美团博客说不加锁，链接在这：http://tech.meituan.com/innodb-lock.html </div><div class="line">2.还有说读不加锁（这个我认同），写加行级共享锁。链接在这：</div><div class="line">[http://www.hollischuang.com/archives/943](http://www.hollischuang.com/archives/943)</div><div class="line">3.还有说读不加锁，写加行级排他锁（这个我也认同，我做过实践，稍后会演示），但是说写完立马释放行级排他锁。</div></pre></td></tr></table></figure></p>
<p><strong>那么到底是什么样子呢，我们看一下</strong>：<br>演示过程，打开3个命令行终端，其中两个做演示，最后一个客户端查询当前 innodb 锁状态 设置事务隔离级别为read uncommitted。<br>做如下演示：<br>1.客户端1做如下操作：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update test set name = &apos;fxliutao&apos; where id = 32;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-534afe23b0f99e47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-26 下午2.53.34.png"></p>
<p>2.客户端2做与客户端相同操作，如下所示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">update test set name = &apos;fxliutao&apos; where id = 32;</div></pre></td></tr></table></figure></p>
<p>我们发现update 操作并没有执行，而是静止了<br>如下图所示我们分析了在客户端2锁等待情况下的加锁情况：<br>命令为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select * from information_schema.INNODB_LOCKS\G;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-a8de23ba474fe228.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-26 下午2.58.48.png"></p>
<p>可以得出结论，read uncommitted 隔离级别下，写操作是有锁的，而且是 X 排他锁，可以灭掉上述两个门派。</p>
<p>并且我们看下上述客户端2情景下的事务状态<br>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-46b8a807f2ca3fbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2017-03-26 下午3.04.47.png"></p>
<p> trx_id 为208579的代表的就是客户端2的事务，trx_state代表的是锁状态，代表 客户端2的事务 处于锁等待状态，为什么是锁等待状态呢，因为 客户端2的事务在更改 id ＝ 32 的记录时在主键上添加了 X(行级排他锁) 锁，你可能会有疑问，客户端1 的更新动作不是已经完成了么，那么 客户端1 肯定已经释放了在主键 id = 32 上的排他锁了呀，要不为什么客户端2 能读到客户端1 更改  id = 32 记录后的脏数据呢？<br>但是真正的真相是客户端1在更新完后并<strong>没有释放排他锁</strong>，因为如果释放成功，那么客户端2的事务是能将 id ＝ 32 的记录更新成功的，但是并没有。那既然客户端1在更新完后并<strong>没有释放排他锁</strong>，那客户端2为什么还能读到脏数据呢，这跟排他锁的属性是相悖的呀(排他锁会阻塞除当前操作外的其他事务的所有读写操作)。<br>这就是最矛盾的问题，我再SqlServer的官网上找到这句话，事实上也正是这句话让我茅塞顿开，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Transactions running at the READ UNCOMMITTED level do not issue shared locks to prevent other transactions from modifying data read by the current transaction. READ UNCOMMITTED transactions are also not blocked by exclusive locks that would prevent the current transaction from reading rows that have been modified but not committed by other transactions. When this option is set, it is possible to read uncommitted modifications, which are called dirty reads. Values in the data can be changed and rows can appear or disappear in the data set before the end of the transaction. This option has the same effect as setting NOLOCK on all tables in all SELECT statements in a transaction. This is the least restrictive of the isolation levels.</div></pre></td></tr></table></figure></p>
<p>翻译是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在READ UNCOMMITTED级别运行的事务不会发出共享锁，以防止其他事务修改当前事务读取的数据。读取UNCOMMITTED事务也不被排他锁阻止，这将阻止当前事务读取已被修改但未被其他事务提交的行。设置此选项时，可以读取未提交的修改，称为脏读。可以更改数据中的值，并且行可以在事务结束之前在数据集中显示或消失。此选项与在事务中的所有SELECT语句中的所有表上设置NOLOCK具有相同的效果。这是隔离级别的最小限制。</div></pre></td></tr></table></figure></p>
<p>看到了吧<strong>读取UNCOMMITTED事务也不被排他锁(排他锁将阻止当前事务读取已被修改但未被其他事务提交的行)阻止</strong><br>其实想想也对，应为排它锁对任何其他的事务开始之前申请的排它锁，共享锁都不兼容。但是如果我读不申请锁，就不会产生上述问题了呀。</p>
<p>所以最终结论是：read uncommitted 读不加锁，写加排他锁，并到事务结束之后释放。</p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 数据库规范--设计篇]]></title>
      <url>/2017/11/14/MySQL-design/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><hr>
<blockquote>
<p><strong>1.<a href="http://www.jianshu.com/p/c626c7ad27bf" target="_blank" rel="external">设计阶段</a></strong><br>  <strong>2.<a href="http://www.jianshu.com/p/72ca2ed48304" target="_blank" rel="external">开发阶段</a></strong><br>  <strong>3.调优阶段(未开发，pt_query_digest、show_slow_log、查询优化等)</strong><br><a id="more"></a></p>
<h2 id="1-设计阶段"><a href="#1-设计阶段" class="headerlink" title="1.设计阶段"></a>1.设计阶段</h2></blockquote>
<h4 id="1-1-数据库表的设计范式-三范式-amp-反范式"><a href="#1-1-数据库表的设计范式-三范式-amp-反范式" class="headerlink" title="1.1 数据库表的设计范式(三范式&amp;反范式)"></a>1.1 数据库表的设计范式(三范式&amp;反范式)</h4><hr>
<p><strong>为什么需要范式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">优点：编程相对简单，数据量更小，更适合放入内存，更新更快，只需要更新少量的数据，</div><div class="line">更少的冗余意味着更少的需要group distinct 之类的操作。</div></pre></td></tr></table></figure></p>
<p><strong>第一范式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">数据表每一列都是不可分割的基本数据项。举例一个人有多个手机号</div></pre></td></tr></table></figure></p>
<p><strong>第二范式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">数据表里的所有数据都要和该数据表里的主键有完全相依赖的关系，不能只依赖部分。</div><div class="line">举例：用户名&amp;用户技能 是主键，用户居住地 ，那么用户名为主键就可以了。</div></pre></td></tr></table></figure></p>
<p><strong>第三范式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">缺点：非键属性都只和候选属性相关，非间属性之间没有关系。举例冠军表中冠军名&amp;冠军生日。</div></pre></td></tr></table></figure></p>
<p><strong>范式的缺陷</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">查询变得相当复杂，查询时需要更多的连接join ，一些复合索引的列由于范式化的需要被分割到不同的表中，导致索引策略不佳。</div></pre></td></tr></table></figure></p>
<p><strong>反范式</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">优点：减少了连接，可以更好的利用索引进行筛选和排序，对查询操作可以提高性能。</div><div class="line">缺点：要在数据一致性与查询之间找到平衡点，符合业务场景的设计才是好的设计</div></pre></td></tr></table></figure></p>
<p><strong>数据库设计准则</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">设计的数据库应该按照用户可能的访问路径，访问习惯进行设计，而不是严格按照数据范式来设计</div></pre></td></tr></table></figure></p>
<h4 id="1-2-存储引擎的选择"><a href="#1-2-存储引擎的选择" class="headerlink" title="1.2 存储引擎的选择"></a>1.2 存储引擎的选择</h4><hr>
<p><strong>存储引擎分类</strong><br><strong>InnoDB:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.灾难恢复性好</div><div class="line">2.支持4中级别的事务，默认事务的隔离级别是Repeatable Read，事务支持是通过MVCC多版本并发控制来提供的。</div><div class="line">3.使用行级锁，并发性能高。</div><div class="line">4.使用此存储引擎的表，数据的物理组织形式是簇表，数据按主键来组织，即主键索引和数据是在一起的，B+树就是这样的</div><div class="line">5.实现缓冲管理，能缓存索引也能缓存数据。</div><div class="line">6.支持外键</div><div class="line">7.支持热备份</div></pre></td></tr></table></figure></p>
<p><strong>MyISAM:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1.配合锁，实现操作系统下的复制备份，迁移</div><div class="line">2.使用表记锁并发性差</div><div class="line">3.支持全文索引</div><div class="line">4.主机宕机后，表容易损坏，灾难恢复性不佳</div><div class="line">5.无事务支持</div><div class="line">6.只缓存索引，数据缓存利用操作系统缓冲区实现的，引发过多系统调用，性能不佳。</div><div class="line">7.数据紧凑存储，可以获得更快的索引和更快的全表扫描性能。</div></pre></td></tr></table></figure></p>
<p><strong>存储引擎的选择:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">设计阶段我们选用InnoDB存储引擎作为数据的存储模式,使用事务、且并发性高，支持外键，支持外键索引。</div></pre></td></tr></table></figure></p>
<h4 id="1-3-字符集选择"><a href="#1-3-字符集选择" class="headerlink" title="1.3 字符集选择"></a>1.3 字符集选择</h4><hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">字符编码采用utf-8</div><div class="line">字符校验采用utf-8-cgi</div></pre></td></tr></table></figure>
<h4 id="1-4-命名约定"><a href="#1-4-命名约定" class="headerlink" title="1.4 命名约定"></a>1.4 命名约定</h4><hr>
<p><strong>规范的必要性</strong>P187<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1.年前bug就是因为没有建立索引导致的一系列Bug，所以建立规范，刻不容缓。</div><div class="line">2.命名没有强制约定，但在一个应用中建议风格统一。</div></pre></td></tr></table></figure></p>
<p><strong>命名约定</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1.命名有意义，一眼知道这张表是干什么用的</div><div class="line">2.数据库，表都用小写</div><div class="line">   数据库形如：backend</div><div class="line">   数据表形如：client_device_info(客户端设备信息)，不要缩写，字母全小写</div><div class="line">3.索引命名以idx_为前缀</div><div class="line">4.命名不要过长（应尽量少于25字符）</div><div class="line">5.不要使用保留字</div><div class="line">6.同一字段在不同的表中也应是相同的类型和长度</div><div class="line">7.同一数据库下有不同的模块，可以考虑对表名用不同的前缀标识</div><div class="line">8.备份表时加上时间标识</div></pre></td></tr></table></figure></p>
<h4 id="1-5-索引设计"><a href="#1-5-索引设计" class="headerlink" title="1.5 索引设计"></a>1.5 索引设计</h4><hr>
<p>直接参考<a href="http://www.jianshu.com/p/aedf4c0972e8" target="_blank" rel="external"><a href="http://www.jianshu.com/p/aedf4c0972e8" target="_blank" rel="external">MySQL 数据库索引使用场景&amp;注意事项</a></a></p>
<h4 id="1-6-数据表设计与规划"><a href="#1-6-数据表设计与规划" class="headerlink" title="1.6 数据表设计与规划"></a>1.6 数据表设计与规划</h4><hr>
<p><strong>表设计</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">1.如果没有特殊情况，建议选择InooDB索引</div><div class="line">2.每个表都应该有主键，可选择自增字段，或整型字段。例外情况，一些应用会频繁的基于某些字段进行检索，设计人员可能认为这些字段／</div><div class="line">  字组合更适合做主键，因为更自然、更高效。</div><div class="line">3.(不做强制要求)尽量将字段设置为NOT NULL。因为NULL值的存储需要额外的空间，且会导致比较运算更为复杂，会使得优化器更难以</div><div class="line">  优化sql。null 值虽然会导致比较运算更加复杂，但这比因此定义了not null带来应用逻辑异要好。</div><div class="line">4.使用更短小的列，比如整型列。整型列的执行速度往往更快。</div><div class="line">5.存储精确浮点数必须使用DECIMAL代替float和double。</div><div class="line">6.建议使用unsigned类型存储非负值</div><div class="line">7.建议使用 int unsigned存储ipv4</div><div class="line">8.整型定义中不添加显示长度的值，使用int，而不是int(4)</div><div class="line">9.尽可能不要使用text,blob类型</div><div class="line">10.varchar（n） n表示字符数而不是字节数，比如varchar（255）最大可存储255个汉字，需根据实际字符长度选择n的值。</div><div class="line">11.字符集建议选择utf-8</div><div class="line">12.存储年时使用year类型</div><div class="line">13.存储日期时使用date类型</div><div class="line">14.存储时间时，建议使用timestamp类型，因为timestamp使用的是4字节，datetime使用的是8字节。</div><div class="line">15.不要在数据库中使用varbinary或blob存储图片及文件，mysql 并不适合大量存储这类型文件</div><div class="line">16.join 操作的字段，在不同表中的类型及命名要一致</div><div class="line">17.如果更改表结构会影响性能，需要我司后台(有DBA尽可能找DBA)进行联合评审。</div></pre></td></tr></table></figure></p>
<p><strong>数据表规划</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> 查看数据表大小的脚本</div><div class="line"> select sum(data_length+index_length) from information_schema.tables where table_schema = ‘app_backend’ and table_name = ‘client_device_info’;</div><div class="line">其中data_length是记录大总大小，index_length 为索引的大小，table_schema 是数据库名</div><div class="line">table_name 是数据表名。</div></pre></td></tr></table></figure></p>
<h4 id="1-7-慎用外键"><a href="#1-7-慎用外键" class="headerlink" title="1.7 慎用外键"></a>1.7 慎用外键</h4><hr>
<p><strong>外键的使用</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1.外键的优点：</div><div class="line">外键约束使得程序员更不容易将不一致性引入数据库，而且设计合适外键有助于以文档方式记录表间关系。</div><div class="line">2.外键的缺点</div><div class="line">但这些优点是以服务器为执行必要的检查而花费额外的开销为代价的。服务器进行额外的检查会影响性能。</div><div class="line">其次外键对并发性能的影响很大，因每次修改数据都需要去另外一个表检查数据，需要获取额外的锁（以确保事务完成之前，父表的记录不</div><div class="line">会被删除）高并发环境下出现性能问题，更好的办法是在应用层实现外键约束。</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> MySQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java NIO(一)－I/O模型： 阻塞、非阻塞、I/O复用、同步、异步]]></title>
      <url>/2017/11/14/java_nio/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote>
<p>为后期学习 Netty框架打好理论基础，并且在分布式RPC 服务中对客户端与服务端之间服务的调用，底层数据通讯可以使用Netty 进行封装。 </p>
</blockquote>
<h2 id="记录结构"><a href="#记录结构" class="headerlink" title="记录结构"></a>记录结构</h2><hr>
<blockquote>
<ul>
<li>Java NIO(一)–I/O模型： 阻塞、非阻塞、I/O复用、同步、异步<br>地址：<a href="http://www.jianshu.com/writer#/notebooks/5970279/notes/7531041/preview" target="_blank" rel="external">http://www.jianshu.com/writer#/notebooks/5970279/notes/7531041/preview</a></li>
<li>Java NIO(二)–Channel、Buffer、Selector<br>地址：待定</li>
<li>Java NIO(三)–多路复用之TCP传输中的NIO应用<br>地址：待定<a id="more"></a>
今天记录I/O模型中的阻塞、非阻塞、I/O复用、同步、异步。<br>##混沌的概念##<br>对于上述四种概念，常常使我陷入混沌，我经常这样想同步不就是阻塞的么？异步不就是非阻塞的么？<br>我也会去看下别人写的博客以验证我的想法是正确的，事实上，大多博客也这样举例子：同步类似于你叫某人吃饭，某人不应答你，你就一直等着他，这期间你什么事情都不能做，也就是说你在等待某人去吃饭这个时刻内一直都是阻塞的。<br>针对于上述的举例，我一直深信不疑，一句话，<strong>没毛病</strong>。<br>但直到我看到UNIX 网络编程之后，才发现理解有偏差，起码我之前的理解是将I/O操作中的概念结合起来记忆。即：同步==阻塞  异步==非阻塞。</li>
</ul>
</blockquote>
<p>但其实，以上的记忆有点以偏概全，或者说根本没有清晰的认识。</p>
<p>话不多说，开始记录。</p>
<h2 id="1-明确I-O考察的对象和流程"><a href="#1-明确I-O考察的对象和流程" class="headerlink" title="1. 明确I/O考察的对象和流程"></a><strong>1. 明确I/O考察的对象和流程</strong></h2><hr>
<p><strong>1.1 参考Unix网络编程，一个输入操作通常包括两个不同的阶段：</strong></p>
<blockquote>
<ul>
<li>等待数据准备好；</li>
<li>从内核向进程复制数据。</li>
</ul>
</blockquote>
<p><strong>1.2 对于一个套接字的输入操作:</strong></p>
<blockquote>
<ul>
<li>通常涉及等待数据从网络到达，当所等待分组到达时，被复制到内核的某个缓冲区;</li>
<li>把数据从内核缓冲区复制到应用进程缓冲区。</li>
</ul>
</blockquote>
<p><strong>注意： 理解上述两个不同阶段对于后续理解I/O模型尤其是非阻塞I/O与同步I/O关系十分必要。</strong></p>
<h2 id="2-I-O模型"><a href="#2-I-O模型" class="headerlink" title="2. I/O模型"></a>2. I/O模型</h2><hr>
<p><strong>2.1 阻塞式I/O模型</strong><br>阻塞式I/O是最流行的I/O，也是所有套接字默认的I/O。Java  BIO中对socket 网络数据通信的<br>封装 就采用的是这种方式。当然效率也是低下的。</p>
<p>阻塞式I/O是最流行的I/O，也是所有套接字默认的I/O。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-a13146fd8158712e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="阻塞式I/O.png"><br>（注：所有图片来源 Unix网络编程卷1，第三版）</p>
<p>如图所示，进程调用recvfrom系统调用，直到网络数据报到达且被复制到应用进程缓冲区中或发生错误才返回。</p>
<p><strong>注意：也就是说，进程从调用recvfrom开始到返回的整个时段都是阻塞的（</strong>上述1.1两个阶段都是阻塞<strong>），recvfrom成功返回后，应用进程才开始处理数据报。</strong></p>
<p><strong>上述的注意读三遍</strong></p>
<p><strong>2.2 非阻塞I/O模型</strong><br>直接上图:<br><img src="http://upload-images.jianshu.io/upload_images/2836699-5a4cc7c4c9f2b94d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="非阻塞式I/O"></p>
<p>如图所示，不同于阻塞式I/O，非阻塞I/O在第一阶段数据没有准备好的时候，不阻塞，而是直接返回一个错误（EWOULDBLOCK）。</p>
<p>所以一般采用轮询（polling）的方式，应用进程持续轮询内核，查看数据是否准备好。当数据准备好时，被复制到应用进程缓冲区（第二阶段）。</p>
<p><strong>注意：值得注意的一点是，当第一阶段数据准备完成后，进入第二阶段，内核向内存的复制。这一阶段仍然是阻塞的，这对于后续理解非阻塞与同步的关系十分重要。</strong></p>
<p><strong>上述注意项读三遍。</strong></p>
<p><strong>2.3 I/O多路复用模型</strong><br>I/O复用最常见的就是select和epoll，其阻塞发生在上述两个系统调用之一，而不是真正的I/O系统调用上。  Java NIO 对TCP 网络通信的封装内部采用的就是这种原理。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-1f7ed47b78c08e25.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=" I/O复用模型.png"></p>
<p>当用户进程调用了select，那么整个进程会被阻塞与select。内核会“监视”所有select负责的套接字，当任何一个套接字中的数据准备好了，select就会返回。(进程阻塞)</p>
<p>这时候进入第二阶段，完成内核向内存的数据复制。（进程阻塞）</p>
<p>注意:I/O复用的优势在于<strong>同时等待多个描述符就绪</strong>，单就一个描述符可言，其没有优势，反而还会因为多一次select系统调用存在劣势。</p>
<p><strong>上述注意项读三遍。</strong></p>
<p><strong>2.4 异步I/O模型</strong><br>异步I/O的工作机制是告知内核启动某个操作，并让内核在整个操作（包括第二阶段数据从内核向内存的复制）完成后告知我们。</p>
<p>如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-0729a57363191150.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="异步I/O 模型.png"></p>
<p><strong>注意：异步I/O要通过调用特殊API实现（如POSIX的aio_read），可以看出，其在两个阶段都是没有对于用户进程的阻塞的，依靠信号通知进程整个过程完成。</strong></p>
<p> <strong>上述注意读三遍</strong></p>
<p><strong>2.5 同步、异步与阻塞、非阻塞、I/O复用的关系</strong><br>在了解了阻塞式I/O、非阻塞式I/O、I/O多路复用、异步I/O后我们看下这几个模式的I/O模型与同步异步模型有什么关系。<br><strong>注意：重头戏，接下来就是彻底领悟这几个概念之间关系，让你不再混沌，请保持接受状态，保持信心看下去。</strong></p>
<blockquote>
<p>首先先来再明确一下同步、异步I/O之间的区别。<br>书中所述，POSIX把两种术语定义如下：<br><strong>同步I/O：导致请求进程阻塞，直到I/O操作完成；</strong>(两个阶段(等待网络数据到达内核空间缓存区域，以及将内核空间缓存区域中的数据复制到用户进程缓存中)中只要有一个阶段阻塞，那整个I/O操作就就是同步)<br><strong>异步I/O：不导致请求进程阻塞。</strong> （两个阶段都不阻塞，那么就是异步I/O）</p>
</blockquote>
<p><strong>注意：所以说，阻塞式I/O， 非阻塞I/O， I/O复用由于都导致了请求进程阻塞，所以均属于同步I/O。<br>（值得注意的是非阻塞I/O，正如之前提示要注意的，其在第二阶段内核向内存复制数据是会导致用户进程的阻塞，所以也属于同步I/O</strong></p>
<p><strong>上述注意读三遍</strong></p>
<p><strong>3. 总结</strong><br>如下图所示：（暂时忽略信号驱动I/O）</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-42af7c7049d2b23c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="每种I/O的特点和调用流程.png"></p>
<p>可以看出阻塞式、非阻塞式、与I/O复用，其不同之处在于第一阶段，第二阶段的处理方式相同（均阻塞与recvfrom调用），这也是刚才说到的将他们归于同步I/O的原因。</p>
<p><strong>注意：异步I/O不存在请求进程阻塞的情况。同时注意前三种I/O模型在第一阶段的处理方式（阻塞，返回+轮询，阻塞于select等），区分这三种I/O模型。</strong></p>
<p><strong>上述注意读三遍</strong></p>
<p>完。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 高并发 </tag>
            
            <tag> I/O模型 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellj Idea中查看类继承面板]]></title>
      <url>/2017/11/14/IntelljIdea-see-implements/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>在分析 Spring 源码时，因框架类图之间的关系错综复杂，所以需要借助类继承面板来查看类之间的关系。</p>
<blockquote>
<p><strong>1.查看类继承面板</strong><br><a id="more"></a></p>
</blockquote>
<h2 id="1-查看类继承面板"><a href="#1-查看类继承面板" class="headerlink" title="1.查看类继承面板"></a>1.查看类继承面板</h2><hr>
<p><strong>Mac快捷键</strong><br>  使用control+H调出类继承面板：<br>  如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-cc3c33b833c7c5c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类继承面板"><br>初始显示的面板不是非常友好，而且并不是我们通常所熟悉的显示结构，那么点击如下按钮：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-0f916edcaa5f262d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="友好方式显示"><br>状态变为：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-b5f3f4d3429dc5e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午1.27.00.png"></p>
<p>并且初始面板是折叠的，如果需要时展开状态，那么点击如下按钮：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-7f540fb390d0a7b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="展开面板按钮"><br>最终的显示状态是：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-d72959c7ead37a1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类继承结构最终效果图"><br>这种继承结构图跟eclipse显示的结构图是相同的。但是界面更佳又好，单击其中的某个类，就可以看到具体类的具体代码。</p>
<p><strong>windows快捷键</strong><br>使用ctrl+H调出类继承面板：</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用Intellij Idea＋Gradle 搭建Java 本地开发环境]]></title>
      <url>/2017/11/14/IntellijIdea-JavaWEB%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h2 id="Java-本地开发环境搭建"><a href="#Java-本地开发环境搭建" class="headerlink" title="Java 本地开发环境搭建"></a>Java 本地开发环境搭建</h2><hr>
<p>项目搭建采用技术栈为：Spring+Spring MVC+Hibernate+Jsp+Gradle＋tomcat+mysql5.6</p>
<blockquote>
<p><strong>搭建环境文档目录结构说明：</strong>     </p>
<ol>
<li>使用Intellj Idea 搭建项目过程详解   </li>
<li>项目各配置文件讲解及部署 </li>
<li>各层包功能讲解&amp;项目搭建完毕最终效果演示图        </li>
<li>项目中重要代码讲解</li>
<li>webapp文件夹下分层详解</li>
<li>配置tomcat 运行环境<a id="more"></a>
<h2 id="1-使用Intellj-Idea-搭建项目过程详解"><a href="#1-使用Intellj-Idea-搭建项目过程详解" class="headerlink" title="1. 使用Intellj Idea 搭建项目过程详解"></a>1. 使用Intellj Idea 搭建项目过程详解</h2></li>
</ol>
<hr>
<p><strong>1.1 打开Intellj Idea</strong>  </p>
</blockquote>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-3f16a54b594cc26b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Intellj idea 截图"></p>
<p><strong>1.2 操纵 Intellj Idea 工具栏 新建项目</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-047b263cb73b7f24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操纵idea 工具栏"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-ef60a1e99afe87d7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用Gradle创建项目"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-38c47fe5bfe055e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="完善项目信息"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-3bca1a837ef288a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置Gradle"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-4a4cfcbc6ca0804a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="确定项目信息"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-c210ca9b5d193e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选择New Window"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-9dfb84230a0f24bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="初始化项目结构截图"></p>
<p>需要说明的是，最初创建的项目视图是不完整的，包括webapp文件夹下没有web.xml，以及src包下缺少Java文件夹(放置java源代码文件)，Resources文件夹（放置项目配置文件）。<br>我们继续做以下操作，使得项目的结构符合web 应用项目的层级标准。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-0ce2f54f56f2c073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="操纵工具栏为项目添加 web.xml全局配置文件"></p>
<p>出现如下视图：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-2fad3607490056ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="新建 web.xml文件"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-18e00a4c050a367d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="设置web.xml文件存储位置"></p>
<p>接下来：单击main文件夹按照如下操作：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-cfabad0cc509bce8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="手动创建src中main文件夹下java目录"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-1317a404f68ed96c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="输入java 文件夹名称"></p>
<p>点击ok，再按照上图操作操作一遍，输入文件名为<strong>resources</strong><br>最终的结构图如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-26c0dbfa2caf768b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目最终结构图"></p>
<h2 id="2-项目各配置文件讲解及部署"><a href="#2-项目各配置文件讲解及部署" class="headerlink" title="2. 项目各配置文件讲解及部署"></a>2. 项目各配置文件讲解及部署</h2><hr>
<p>完成了项目的初始化结构创建，接下来我们需要来创建配置文件。<br>首先是resources文件夹下的配置文件<br><strong>2.1 resources下资源文件截图:(最终配置的结果)</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-845ceb398f2732db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目所需配置文件最终配置结果"><br><strong>2.2 data-access-applicationContext.xml</strong><br>主要管理数据库访问组件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       "</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.fxmms.*.*.dao.*"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"regex"</span> <span class="attr">expression</span>=<span class="string">"com.fxmms.*.dao.*"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClass&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.jdbcUrl&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--配置hibernate SessionFactory--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>$&#123;dataSource.hibernate.dialect&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>$&#123;dataSource.hibernate.show_sql&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!--负责自动创建数据表，基本上不能打开注释，否则所有的数据库中表信息都会被删除，重新创建--&gt;</span></div><div class="line">                <span class="comment">&lt;!-- &lt;prop key="hibernate.hbm2ddl.auto"&gt;create&lt;/prop&gt; --&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;property name="hibernate.jdbc.batch_size" value="50"&gt;&lt;/property&gt; --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.fxmms.*.*.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.fxmms.*.domain<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--jdbcTemplate start --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jdbcTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.core.JdbcTemplate"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--Spring JDBC 中操作 LOB 数据 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"lobHandler"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.support.lob.DefaultLobHandler"</span></span></div><div class="line"><span class="tag">          <span class="attr">lazy-init</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置JPA部分 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置JPA的EntityManagerFactory --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- &lt;bean id="entityManagerFactory"</span></div><div class="line"><span class="comment">           class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"&gt;</span></div><div class="line"><span class="comment">         &lt;property name="dataSource" ref="dataSource"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">         &lt;property name="jpaVendorAdapter"&gt;</span></div><div class="line"><span class="comment">             &lt;bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"&gt;&lt;/bean&gt;</span></div><div class="line"><span class="comment">         &lt;/property&gt;</span></div><div class="line"><span class="comment">         &lt;property name="packagesToScan" value="com.fxmms"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">         &lt;property name="jpaProperties"&gt;</span></div><div class="line"><span class="comment">             &lt;props&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.ejb.naming_strategy"&gt;org.hibernate.cfg.ImprovedNamingStrategy&lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.hbm2ddl.auto"&gt;update&lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.show_sql"&gt;true&lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.format_sql"&gt;true&lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.dialect"&gt;org.hibernate.dialect.MySQL5InnoDBDialect&lt;/prop&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.cache.use_second_level_cache"&gt;true&lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.cache.region.factory_class"&gt;org.hibernate.cache.ehcache.EhCacheRegionFactory</span></div><div class="line"><span class="comment">                 &lt;/prop&gt;</span></div><div class="line"><span class="comment">                 &lt;prop key="hibernate.cache.use_query_cache"&gt;true&lt;/prop&gt;</span></div><div class="line"><span class="comment">             &lt;/props&gt;</span></div><div class="line"><span class="comment">         &lt;/property&gt;</span></div><div class="line"><span class="comment">         &lt;!–使用二級緩存–&gt;</span></div><div class="line"><span class="comment">         &lt;property name="sharedCacheMode" value="ENABLE_SELECTIVE"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">     &lt;/bean&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">     &lt;!– 配置事务 –&gt;</span></div><div class="line"><span class="comment">     &lt;bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"&gt;</span></div><div class="line"><span class="comment">         &lt;property name="entityManagerFactory" ref="entityManagerFactory"&gt;&lt;/property&gt;</span></div><div class="line"><span class="comment">     &lt;/bean&gt;--&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- &lt;!– 配置SpringData部分 –&gt;</span></div><div class="line"><span class="comment">     &lt;jpa:repositories base-package="com.fxmms"</span></div><div class="line"><span class="comment">                       entity-manager-factory-ref="entityManagerFactory"&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">     &lt;/jpa:repositories&gt;--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2.3 service-applicationContext.xml</strong><br>主要管理业务逻辑组件，包括对数据库访问的事务控制，以及定时任务。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx</span></span></div><div class="line"><span class="tag"><span class="string">  http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/task/spring-task.xsd"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--设置定时任务--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">task:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.www"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Service"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- enable the configuration of transactional behavior based on annotations --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"txManager"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"txManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.HibernateTransactionManager"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sessionFactory"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2.4 default-servlet.xml</strong><br>设置springmvc-applicationContext.xml,前端控制器将请求转发到相应的controller层中的处理方法上。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></div><div class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!----&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--json解析--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.www.controller"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--因为web.xml中defaultDispatcherServlet对所有请求进行了拦截，所以对一些.css .jpg .html .jsp也进行了拦截，所以此配置项</span></div><div class="line"><span class="comment">    保证对对静态资源不拦截--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--视图解析器--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"viewResolver"</span></span></div><div class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置文件上上传--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"utf-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"10485760000"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxInMemorySize"</span> <span class="attr">value</span>=<span class="string">"40960"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2.5 spring-security.xml</strong><br>设置spring－security 权限控制配置文件，项目中权限的控制统一在此配置文件中配置，包括从数据库中获取用户的相关信息，以及配置相应pattern的请求过滤规则。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:sec</span>=<span class="string">"http://www.springframework.org/schema/security"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></div><div class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/security</span></span></div><div class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/security/spring-security-3.2.xsd"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--    &lt;sec:http pattern="/**/*.jpg" security="none"&gt;&lt;/sec:http&gt;</span></div><div class="line"><span class="comment">        &lt;sec:http pattern="/**/*.jpeg" security="none"&gt;&lt;/sec:http&gt;</span></div><div class="line"><span class="comment">        &lt;sec:http pattern="/**/*.gif" security="none"&gt;&lt;/sec:http&gt;</span></div><div class="line"><span class="comment">        &lt;sec:http pattern="/**/*.png" security="none"&gt;&lt;/sec:http&gt;s</span></div><div class="line"><span class="comment">        &lt;sec:http pattern="/getCode" security="none" /&gt;&lt;!– 不过滤验证码 –&gt;</span></div><div class="line"><span class="comment">        &lt;sec:http pattern="/test/**" security="none"&gt;&lt;/sec:http&gt;&lt;!– 不过滤测试内容 –&gt;--&gt;</span></div><div class="line">    <span class="comment">&lt;!--spring security 权限管理配置文件--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.fxmms.common.security"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--权限控制--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">sec:http</span> <span class="attr">auto-config</span>=<span class="string">"true"</span> <span class="attr">use-expressions</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/superadmin/**"</span> <span class="attr">access</span>=<span class="string">"hasRole('superadmin')"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/admin/**"</span> <span class="attr">access</span>=<span class="string">"hasRole('admin')"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:intercept-url</span> <span class="attr">pattern</span>=<span class="string">"/customer/**"</span> <span class="attr">access</span>=<span class="string">"hasRole('customer')"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--自定义登陆页面,权限验证失败页面，登录成功页面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:form-login</span> <span class="attr">login-page</span>=<span class="string">"/login.jsp"</span> <span class="attr">authentication-failure-url</span>=<span class="string">"/login.jsp"</span> <span class="attr">login-processing-url</span>=<span class="string">"/j_spring_security_check"</span></span></div><div class="line"><span class="tag">                        <span class="attr">authentication-success-handler-ref</span>=<span class="string">"loginSuccessHandler"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!--用户权限不一致出现的权限不可得情况，默认情况下跳转到403页面--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:access-denied-handler</span> <span class="attr">ref</span>=<span class="string">"accessDeniedServletHandler"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:logout</span> <span class="attr">logout-success-url</span>=<span class="string">"/login.jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sec:http</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">sec:authentication-manager</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">sec:authentication-provider</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!--配置从数据库查询用户权限  and isDelete = 0 and enable = 1--&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">sec:jdbc-user-service</span> <span class="attr">data-source-ref</span>=<span class="string">"dataSource"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">users-by-username-query</span>=<span class="string">"select userName,password,enable  from mms_admin where userName=? and isDelete = 0 and enable = 1"</span></span></div><div class="line"><span class="tag">                                   <span class="attr">authorities-by-username-query</span>=<span class="string">"select userName,role from mms_admin where username=?"</span></span></div><div class="line"><span class="tag">            &gt;</span><span class="tag">&lt;/<span class="name">sec:jdbc-user-service</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">sec:authentication-provider</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">sec:authentication-manager</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2.6 db.properties</strong><br>数据库访问配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">jdbc.user=root</div><div class="line">jdbc.password=feixun*123</div><div class="line">jdbc.driverClass=com.mysql.jdbc.Driver</div><div class="line">#jdbc.jdbcUrl=jdbc:mysql://localhost/fxmms?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line">jdbc.jdbcUrl=jdbc:mysql://222.73.156.132:13306/fxmms?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line"></div><div class="line">jdbc.initPoolSize=5</div><div class="line">jdbc.maxPoolSize=20</div><div class="line">dataSource.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect</div><div class="line">#######################</div><div class="line">##      local        ##</div><div class="line">#######################</div><div class="line">dataSource.hibernate.show_sql=true</div></pre></td></tr></table></figure></p>
<p><strong>2.7 log4j.properties</strong><br>配置项目日志文件，日志输出模式为Console<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">###########################################################################</div><div class="line"># Properties file for the log4j logger system</div><div class="line">#</div><div class="line">#  Note: During the uPortal build, the file at /properties/Logger.properties is copied</div><div class="line">#  to the log4j standard location /WEB-INF/classes/log4j.properties .  This means that editing the file</div><div class="line">#  at /properties/Logger.properties in a deployed uPortal will have no effect.</div><div class="line">#</div><div class="line"># Please read the instructions for the Log4J logging system at</div><div class="line"># http://jakarta.apache.org/log4j/ if you want to modify this.</div><div class="line"></div><div class="line">###########################################################################</div><div class="line"># You should probably replace the word &quot;debug&quot; with &quot;info&quot; in the</div><div class="line"># following line after everything is running.  This will turn off</div><div class="line"># the tons of debug messages, and leave only INFO, WARN, ERROR, etc.</div><div class="line">#</div><div class="line">log4j.rootLogger = info,stdout,D,E</div><div class="line"></div><div class="line">#配置stdout</div><div class="line">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.stdout.Target=System.out</div><div class="line">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.stdout.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125; [%p]-[%l] %m%n</div><div class="line"></div><div class="line">#配置D 保存info debug级别的系统日志信息</div><div class="line">log4j.appender.D = org.apache.log4j.DailyRollingFileAppender</div><div class="line">#/Users/mark/mms/log.log 指定info debug级别日志信息存储位置</div><div class="line">log4j.appender.D.File = /Users/mark/mms/log.log</div><div class="line">log4j.appender.D.Append = true</div><div class="line">log4j.appender.D.Threshold = INFO,DEBUG</div><div class="line">log4j.appender.D.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.D.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125; [%p]-[%l] %m%n</div><div class="line"></div><div class="line">#配置E 保存系统异常日志 </div><div class="line">log4j.appender.E = org.apache.log4j.DailyRollingFileAppender</div><div class="line">#/Users/mark/mms/error.log 指定info debug级别日志信息存储位置</div><div class="line">log4j.appender.E.File = /Users/mark/mms/error.log</div><div class="line">log4j.appender.E.Append = true</div><div class="line">log4j.appender.E.Threshold = ERROR</div><div class="line">log4j.appender.E.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.E.layout.ConversionPattern = %d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125; [%p]-[%l] %m%n</div><div class="line"></div><div class="line">#log4j.logger.org.hibernate=INFO</div><div class="line">#</div><div class="line">## Log all JDBC parameters</div><div class="line">#log4j.logger.org.hibernate.type=ALL</div><div class="line"></div><div class="line">##Hibernate begin 打印每次数据访问产生的sql语句至log.log 文件当中##</div><div class="line">log4j.logger.org.hibernate=info</div><div class="line">#配置SQL打印与输出</div><div class="line">log4j.logger.org.hibernate.SQL=DEBG</div><div class="line">log4j.logger.org.hibernate.HQL=DEGUG</div><div class="line">#log4j.logger.org.hibernate.type=ALL</div></pre></td></tr></table></figure></p>
<p><strong>2.8 web.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></span></div><div class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置需要加载的spring配置文件，这些文件中的配置的类都是被&lt;context:component-scan&gt;扫描到的，比如@Repository @Component</span></div><div class="line"><span class="comment">    @Service @Controller等--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:data-access-applicationContext.xml;classpath:spring-security.xml;classpath:service-applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置日志监听 ，如果配置文件报红，没有关系可以正常运行，这个与idea的验证规则有关--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.Log4jConfigListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line"></div><div class="line">   <span class="comment">&lt;!--配置权限过滤器，注意必须配置在springmvc 之前，因为对用户访问资源的权限判断与控制是在访问特定url之前发生的--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置字符编码过滤器  必须配置在所有过滤器的最前面 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--超级管理员 --&gt;</span></div><div class="line">  <span class="comment">&lt;!-- &lt;filter&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;superAdminFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;filter-class&gt;com.fxmms.filter.SuperAdminFilter&lt;/filter-class&gt;</span></div><div class="line"><span class="comment">    &lt;/filter&gt;</span></div><div class="line"><span class="comment">    &lt;filter-mapping&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;superAdminFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;url-pattern&gt;/fxmms/superadmin/*&lt;/url-pattern&gt;</span></div><div class="line"><span class="comment">    &lt;/filter-mapping&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    &lt;filter&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;adminFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;filter-class&gt;com.fxmms.filter.AdminFilter&lt;/filter-class&gt;</span></div><div class="line"><span class="comment">    &lt;/filter&gt;</span></div><div class="line"><span class="comment">    &lt;filter-mapping&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;adminFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;url-pattern&gt;/fxmms/admin/*&lt;/url-pattern&gt;</span></div><div class="line"><span class="comment">    &lt;/filter-mapping&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    &lt;filter&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;customerFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;filter-class&gt;com.fxmms.filter.CustomerFilter&lt;/filter-class&gt;</span></div><div class="line"><span class="comment">    &lt;/filter&gt;</span></div><div class="line"><span class="comment">    &lt;filter-mapping&gt;</span></div><div class="line"><span class="comment">        &lt;filter-name&gt;customerFilter&lt;/filter-name&gt;</span></div><div class="line"><span class="comment">        &lt;url-pattern&gt;/fxmms/customer/*&lt;/url-pattern&gt;</span></div><div class="line"><span class="comment">    &lt;/filter-mapping&gt;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    &lt;servlet&gt;</span></div><div class="line"><span class="comment">        &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span></div><div class="line"><span class="comment">        &lt;servlet-class&gt;com.fxmms.servlet.LoginServlet&lt;/servlet-class&gt;</span></div><div class="line"><span class="comment">    &lt;/servlet&gt;</span></div><div class="line"><span class="comment">    &lt;servlet&gt;</span></div><div class="line"><span class="comment">        &lt;servlet-name&gt;InvalidateServlet&lt;/servlet-name&gt;</span></div><div class="line"><span class="comment">        &lt;servlet-class&gt;com.fxmms.servlet.InvalidateServlet&lt;/servlet-class&gt;</span></div><div class="line"><span class="comment">    &lt;/servlet&gt;-</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">    &lt;servlet-mapping&gt;</span></div><div class="line"><span class="comment">        &lt;servlet-name&gt;LoginServlet&lt;/servlet-name&gt;</span></div><div class="line"><span class="comment">        &lt;url-pattern&gt;/loginServlet&lt;/url-pattern&gt;</span></div><div class="line"><span class="comment">    &lt;/servlet-mapping&gt;</span></div><div class="line"><span class="comment">    &lt;servlet-mapping&gt;</span></div><div class="line"><span class="comment">    &lt;servlet-name&gt;InvalidateServlet&lt;/servlet-name&gt;</span></div><div class="line"><span class="comment">    &lt;url-pattern&gt;/invalidateServlet&lt;/url-pattern&gt;</span></div><div class="line"><span class="comment">    &lt;/servlet-mapping&gt;--&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 配置看可以把POST请求转为PUT，DELETE请求的Filter --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--配置中央控制器，对所有请求进行拦截并做请求路径，与处理请求桩模块之间的映射--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation</div><div class="line">            <span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:default-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--这里是拦截所有--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>defaultDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>2.9 build.gradle</strong><br>项目构建脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">group &apos;com.fxmms&apos;</div><div class="line">version &apos;1.0-SNAPSHOT&apos;</div><div class="line"></div><div class="line">apply plugin: &apos;java&apos;</div><div class="line">apply plugin: &apos;idea&apos;</div><div class="line">apply plugin: &apos;war&apos;</div><div class="line">sourceCompatibility = 1.8</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    maven &#123; url &quot;http://maven.aliyun.com/nexus/content/groups/public/&quot; &#125;</div><div class="line">    mavenLocal()</div><div class="line">    jcenter()</div><div class="line">    maven &#123; url &quot;http://repo.maven.apache.org/maven2/&quot;&#125;</div><div class="line">    maven &#123; url &apos;https://repo.spring.io/libs-milestone&apos;&#125;</div><div class="line">    mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    testCompile group: &apos;junit&apos;, name: &apos;junit&apos;, version: &apos;4.12&apos;</div><div class="line">    // servlet-api</div><div class="line">    compile group: &apos;javax.servlet&apos;, name: &apos;servlet-api&apos;, version: &apos;2.5&apos;</div><div class="line">    //spring相关</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-webmvc&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-orm&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework&apos;, name: &apos;spring-aspects&apos;, version: &apos;4.3.3.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework.security&apos;, name: &apos;spring-security-config&apos;, version: &apos;3.2.0.RELEASE&apos;</div><div class="line">    compile group: &apos;org.springframework.security&apos;, name: &apos;spring-security-taglibs&apos;, version: &apos;3.2.0.RELEASE&apos;</div><div class="line">    compile &apos;org.springframework.security:spring-security-web:3.2.0.RELEASE&apos;</div><div class="line">    //hibernate相关</div><div class="line">    compile &apos;org.hibernate:hibernate-core:4.3.6.Final&apos;</div><div class="line">    //c3p0连接池</div><div class="line">    compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-c3p0&apos;, version: &apos;4.3.6.Final&apos;</div><div class="line">    //ehcahe二级缓存</div><div class="line">    compile group: &apos;org.hibernate&apos;, name: &apos;hibernate-ehcache&apos;, version: &apos;4.3.6.Final&apos;</div><div class="line">    //mysql</div><div class="line">    compile group: &apos;mysql&apos;, name: &apos;mysql-connector-java&apos;, version: &apos;5.1.39&apos;</div><div class="line">    //springData</div><div class="line">    compile group: &apos;org.springframework.data&apos;, name: &apos;spring-data-jpa&apos;, version: &apos;1.10.3.RELEASE&apos;</div><div class="line">    // https://mvnrepository.com/artifact/log4j/log4j日志</div><div class="line">    compile group: &apos;log4j&apos;, name: &apos;log4j&apos;, version: &apos;1.2.17&apos;</div><div class="line">    //json解析相关</div><div class="line">    compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-databind&apos;, version: &apos;2.5.4&apos;</div><div class="line">    compile group: &apos;com.fasterxml.jackson.core&apos;, name: &apos;jackson-core&apos;, version: &apos;2.5.4&apos;</div><div class="line">    //迅雷接口有关jar 包</div><div class="line">    compile &apos;org.apache.httpcomponents:httpclient:4.4&apos;</div><div class="line">    compile &apos;org.json:json:20141113&apos;</div><div class="line">    compile group: &apos;org.apache.clerezza.ext&apos;, name: &apos;org.json.simple&apos;, version: &apos;0.4&apos;</div><div class="line">    //https://mvnrepository.com/artifact/org.apache.commons/commons-io 读取文件相关</div><div class="line">    compile group: &apos;org.apache.commons&apos;, name: &apos;commons-io&apos;, version: &apos;1.3.2&apos;</div><div class="line">    // https://mvnrepository.com/artifact/org.apache.poi/poi 文件读取相关 apache-poi</div><div class="line">    compile group: &apos;org.apache.poi&apos;, name: &apos;poi&apos;, version: &apos;3.9&apos;</div><div class="line">    // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml 解决execl 版本差异</div><div class="line">    compile group: &apos;org.apache.poi&apos;, name: &apos;poi-ooxml&apos;, version: &apos;3.9&apos;</div><div class="line">    // https://mvnrepository.com/artifact/commons-io/commons-io 文件上传</div><div class="line">    compile group: &apos;commons-io&apos;, name: &apos;commons-io&apos;, version: &apos;1.3.1&apos;</div><div class="line">    // https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload</div><div class="line">    compile group: &apos;commons-fileupload&apos;, name: &apos;commons-fileupload&apos;, version: &apos;1.2.2&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="3-各层包功能讲解-amp-项目搭建完毕最终效果演示图"><a href="#3-各层包功能讲解-amp-项目搭建完毕最终效果演示图" class="headerlink" title="3. 各层包功能讲解&amp;项目搭建完毕最终效果演示图"></a>3. 各层包功能讲解&amp;项目搭建完毕最终效果演示图</h2><hr>
<p><strong>3.1 项目中各层包功能讲解</strong><br>项目中Java源代码层级结构如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-df9aea221c723ec0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="项目中Java源代码层级结构"></p>
<p>对于www包中的各分层，我们对照上图重点说明：</p>
<blockquote>
<p><strong>controller</strong>:用于路由各种HTTP访问，其中可以实现对前台页面参数的对象化绑定，这个功能的实现是依赖于spring mvc中的参数绑定功能，以及返回向前端页面返回数据。也可以实现基于Restful 风格API的编写。<br><strong>dao</strong>：用于实现对数据库的操作，包中的代码继承并实现自common中的dao 层代码，采用的是类的适配器模式实现的，这里的代码值得细细品味，可以说是整个项目的<strong>灵魂</strong>所在之处，稍后说明。<br><strong>domain</strong>:项目中的所有实体类都存在于这个包中，其中的每个具体实体类与数据库表相对应。<br><strong>dto</strong>:实现了序列化的数据传输层对象，可用于接收前台参数，前台参数被封装成dto 对象传输至后台。同时也负责对从数据库中查询数据的封装。<br><strong>qo</strong>:模糊查询对象所在的包，用于封装QBC动态查询参数。<br><strong>rowmapper</strong>：用于映射jdbcTemplate查询数据库返回对象的数据集，并将数据集依照以此对象为集合的实例进行封装。<br><strong>schedulejob</strong>：定时任务类所在的包，在此包中的类上都要加上@Service注解，因为定时任务注解配置在service-applicationContext.xml中，包扫描组件的规则是只扫描类上有@Service注解的组件类。<br><strong>service</strong>:业务逻辑层，所有的业务逻辑组件Bean都放置在这个保重，其中的类中的业务逻辑方法调用了dao实现类中的方法，并且每个有关于数据库操作的方法上都加上了@Transaction注解，用于实现对数据库操作的事务管理。@Transaction是Spring Framework对AOP 的另一种区别于拦截器的自定义注解实现。</p>
</blockquote>
<h2 id="4-项目中重要代码讲解"><a href="#4-项目中重要代码讲解" class="headerlink" title="4.项目中重要代码讲解"></a>4.项目中重要代码讲解</h2><hr>
<p>主要讲解一下Dao层中代码对适配器设计模式的应用：<br>4.1 首先看下commom层中 <strong>BaseDao.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.Dto;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.DtoResultWithPageInfo;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.PageQo;</div><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span>  数据库公共操作接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></div><div class="line"><span class="comment">  * <span class="doctag">@usage</span> 根据id获取数据库中唯一纪录，封装成java对象并返回</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> T</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getById</span><span class="params">(Serializable id)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> id</span></div><div class="line"><span class="comment">  * <span class="doctag">@usage</span> 根据id懒加载数据库中唯一纪录，封装成java对象并返回</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> T</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">load</span><span class="params">(Serializable id)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> columnName</span></div><div class="line"><span class="comment">  *            </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">  *</span></div><div class="line"><span class="comment">  * <span class="doctag">@usage</span> 根据列名，以及对应的值获取数据库中惟一纪录，封装成Java对象并返回</span></div><div class="line"><span class="comment">  *          </span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getByUniqueKey</span><span class="params">(String columnName, Object value)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> nameValuePairs</span></div><div class="line"><span class="comment">  *        </span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> T</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getUniqueResult</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> columnName</span></div><div class="line"><span class="comment">  *            </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">  *      </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> sort</span></div><div class="line"><span class="comment">  *            </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> order</span></div><div class="line"><span class="comment">  *            asc/desc</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> List&lt;T&gt;</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumn</span><span class="params">(String columnName, Object value,</span></span></div><div class="line"><span class="function"><span class="params">                                   String sort, String order)</span></span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumn</span><span class="params">(String columnName, Object value)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * ͨ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> nameValuePairs</span></div><div class="line"><span class="comment">  *            </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> sort</span></div><div class="line"><span class="comment">  *            </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> order</span></div><div class="line"><span class="comment">  *            asc/desc</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> List&lt;T&gt;</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumns</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs,</span></span></div><div class="line"><span class="function"><span class="params">                                    String sort, String order)</span></span>;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumns</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> List&lt;T&gt;</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> t</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span> Serializable id</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Serializable <span class="title">save</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> t</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T t)</span></span>;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> t</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * QBC</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Criteria <span class="title">createCriteria</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;E&gt;</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;D&gt;</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClazz</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">public</span> &lt;E, D extends Dto&gt; <span class="function">DtoResultWithPageInfo&lt;D&gt; <span class="title">queryPageListByCriteria</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            Criteria criteria, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, Class&lt;D&gt; dtoClazz)</span></span>;</div><div class="line"> </div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;E&gt;</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> &lt;D&gt;</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> qo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> class1</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="keyword">public</span> &lt;E, D extends Dto&gt; <span class="function">DtoResultWithPageInfo&lt;D&gt; <span class="title">queryPageListByCriteriaWithQo</span><span class="params">(PageQo qo, Class&lt;D&gt; dtoClazz)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中定义了一些对数据库的抽象公共操作方法，代码中有注释，可以对照理解。</p>
<p>4.2 <strong>看下HibernateTemplateDao.java对BaseDao.java的抽象实现</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.dao.hib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.Dto;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.DtoResultWithPageInfo;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.PageInfo;</div><div class="line"><span class="keyword">import</span> com.fxmms.common.ro.PageQo;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</div><div class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.Criteria;</div><div class="line"><span class="keyword">import</span> org.hibernate.Session;</div><div class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Order;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Projections;</div><div class="line"><span class="keyword">import</span> org.hibernate.criterion.Restrictions;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.BeanUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 应用数据访问的灵魂，抽象出各种模型类进行数据库访问的公共操作。</span></div><div class="line"><span class="comment"> *        主要使用到QBC动态查询。主要思想是利用反射。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HibernateTemplateDao</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"> <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory</div><div class="line">   .getLog(HibernateTemplateDao.class);</div><div class="line">    <span class="comment">//通过反射，可以实现对不同类对应的数据表的操作</span></div><div class="line"> <span class="keyword">protected</span> <span class="keyword">abstract</span> Class&lt;?&gt; getEntityClass();</div><div class="line"></div><div class="line"> </div><div class="line"> <span class="keyword">protected</span> SessionFactory sessionFactory;</div><div class="line"> </div><div class="line"> <span class="meta">@Autowired</span></div><div class="line"> <span class="meta">@Qualifier</span>(<span class="string">"sessionFactory"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSessionFactory</span><span class="params">(SessionFactory sessionFactory)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.sessionFactory = sessionFactory;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> Session <span class="title">getSession</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> sessionFactory.getCurrentSession();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> Session <span class="title">openNewSession</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> sessionFactory.openSession();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getById</span><span class="params">(Serializable id)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (T) getSession().get(getEntityClass(), id);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getByUniqueKey</span><span class="params">(String columnName, Object value)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> (T) getSession().createCriteria(getEntityClass())</div><div class="line">    .add(Restrictions.eq(columnName, value)).uniqueResult();</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumn</span><span class="params">(String columnName, Object value,String sort,String order)</span> </span>&#123;</div><div class="line">  Criteria criteria = getSession().createCriteria(getEntityClass());</div><div class="line">  criteria.add(Restrictions.eq(columnName, value));</div><div class="line">  <span class="keyword">if</span>(StringUtils.hasText(sort) &amp;&amp; StringUtils.hasText(order))&#123;</div><div class="line">   <span class="keyword">if</span>(<span class="string">"asc"</span>.equals(order))&#123;</div><div class="line">    criteria.addOrder(Order.asc(sort));</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"desc"</span>.equals(order))&#123;</div><div class="line">    criteria.addOrder(Order.desc(sort));</div><div class="line">   &#125;   </div><div class="line">  &#125;</div><div class="line">  List&lt;T&gt; list = criteria.list();</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumn</span><span class="params">(String columnName, Object value)</span> </span>&#123;</div><div class="line">  Criteria criteria = getSession().createCriteria(getEntityClass());</div><div class="line">  criteria.add(Restrictions.eq(columnName, value));</div><div class="line">  List&lt;T&gt; list = criteria.list();</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumns</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs,String sort,String order)</span></span>&#123;</div><div class="line">  Criteria criteria = getSession().createCriteria(getEntityClass());</div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : nameValuePairs.entrySet()) &#123;</div><div class="line">   criteria.add(Restrictions.eq(entry.getKey(), entry.getValue()));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span>(StringUtils.hasText(sort) &amp;&amp; StringUtils.hasText(order))&#123;</div><div class="line">   <span class="keyword">if</span>(<span class="string">"asc"</span>.equals(order))&#123;</div><div class="line">    criteria.addOrder(Order.asc(sort));</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"desc"</span>.equals(order))&#123;</div><div class="line">    criteria.addOrder(Order.desc(sort));</div><div class="line">   &#125;   </div><div class="line">  &#125;</div><div class="line">  List&lt;T&gt; list = criteria.list();</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getListByColumns</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs)</span></span>&#123;</div><div class="line">  Criteria criteria = getSession().createCriteria(getEntityClass());</div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : nameValuePairs.entrySet()) &#123;</div><div class="line">   criteria.add(Restrictions.eq(entry.getKey(), entry.getValue()));</div><div class="line">  &#125;</div><div class="line">  List&lt;T&gt; list = criteria.list();</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line"> &#125;</div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getAll</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> getSession().createCriteria(getEntityClass()).list();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">getUniqueResult</span><span class="params">(Map&lt;String, Object&gt; nameValuePairs)</span> </span>&#123;</div><div class="line">  Criteria criteria = getSession().createCriteria(getEntityClass());</div><div class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : nameValuePairs.entrySet()) &#123;</div><div class="line">   criteria.add(Restrictions.eq(entry.getKey(), entry.getValue()));</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> (T) criteria.uniqueResult();</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> T <span class="title">load</span><span class="params">(Serializable id)</span></span>&#123;</div><div class="line">  <span class="keyword">return</span> (T) getSession().load(getEntityClass(), id);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Serializable <span class="title">save</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> getSession().save(t);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">  Session session = <span class="keyword">this</span>.getSession();</div><div class="line">  session.update(t);</div><div class="line">  <span class="comment">//强制刷新缓存中数据至数据库中，防止大批量数据更新之后出现脏数据</span></div><div class="line">  session.flush();</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.getSession().delete(t);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * QO  DtoResultWithPageInfo&lt;dtoClazz&gt;list+ҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> page</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> qo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClazz</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"><span class="comment">/* public &lt;Q extends QueryObject, D extends Dto&gt; DtoResultWithPageInfo&lt;D&gt; queryPageListByQueryObject(</span></div><div class="line"><span class="comment">   int page, int pageSize,Q qo, Class&lt;D&gt; dtoClazz)&#123;</span></div><div class="line"><span class="comment">  Criteria criteria = QueryObjectHelper.buildCriteria(qo, getSession());</span></div><div class="line"><span class="comment">  return queryPageListByCriteria(criteria, page, pageSize, dtoClazz);</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * QO List&lt;dtoClazz&gt;</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> qo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClazz</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="comment">/*public &lt;Q extends QueryObject,E, D extends Dto&gt; List&lt;D&gt; queryListByQueryObject(</span></div><div class="line"><span class="comment">   Q qo, Class&lt;D&gt; dtoClazz)&#123;</span></div><div class="line"><span class="comment">  Criteria criteria = QueryObjectHelper.buildCriteria(qo, getSession()); </span></div><div class="line"><span class="comment">  @SuppressWarnings("unchecked")</span></div><div class="line"><span class="comment">  List&lt;E&gt; list = criteria.list();</span></div><div class="line"><span class="comment">  List&lt;D&gt; resultsDtoList = new ArrayList&lt;D&gt;();</span></div><div class="line"><span class="comment">  for(E entity:list)&#123;</span></div><div class="line"><span class="comment">   try &#123;</span></div><div class="line"><span class="comment">    D dto = dtoClazz.newInstance();</span></div><div class="line"><span class="comment">    BeanUtils.copyProperties(entity, dto);</span></div><div class="line"><span class="comment">    resultsDtoList.add(dto);</span></div><div class="line"><span class="comment">   &#125; catch (InstantiationException e) &#123;</span></div><div class="line"><span class="comment">    log.error("dtoʵ쳣ExMsg==&gt;"+e.getMessage());</span></div><div class="line"><span class="comment">   &#125; catch (IllegalAccessException e) &#123;</span></div><div class="line"><span class="comment">    log.error("dtoʵ쳣ExMsg==&gt;"+e.getMessage());</span></div><div class="line"><span class="comment">   &#125;</span></div><div class="line"><span class="comment">  &#125;</span></div><div class="line"><span class="comment">  return resultsDtoList;</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * queryPageListByCriteria</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * ͨcriteria  DtoResultWithPageInfo&lt;dtoClazz&gt;list+ҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  *            ѯ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  *            ǰҳ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  *            ÿҳʾ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClass</span></div><div class="line"><span class="comment">  *            ݴݶclass</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="comment">/*public &lt;E, D extends Dto&gt; DtoResultWithPageInfo&lt;D&gt; queryPageListByCriteria(</span></div><div class="line"><span class="comment">   Criteria criteria, int pageNo, int pageSize, Class&lt;D&gt; dtoClazz) &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">  PageInfo pageInfo = getInstancePageInfoWithCriteria(criteria, pageNo,</span></div><div class="line"><span class="comment">    pageSize);</span></div><div class="line"><span class="comment">  criteria.setProjection(null);// ͶӰ</span></div><div class="line"><span class="comment">  criteria.setFirstResult(pageInfo.getFirstResultNum());</span></div><div class="line"><span class="comment">  criteria.setMaxResults(pageInfo.getPageSize());</span></div><div class="line"><span class="comment">  @SuppressWarnings("unchecked")</span></div><div class="line"><span class="comment">  List&lt;E&gt; resultsList = criteria.list();</span></div><div class="line"><span class="comment">  List&lt;D&gt; resultsDtoList = new ArrayList&lt;D&gt;();</span></div><div class="line"><span class="comment">  for (E result : resultsList) &#123;</span></div><div class="line"><span class="comment">   D dto;</span></div><div class="line"><span class="comment">   try &#123;</span></div><div class="line"><span class="comment">    dto = dtoClazz.newInstance();</span></div><div class="line"><span class="comment">    try &#123;</span></div><div class="line"><span class="comment">     BeanUtils.copyProperties(result, dto);</span></div><div class="line"><span class="comment">    &#125; catch (Exception e) &#123;</span></div><div class="line"><span class="comment">     log.error("ҳѯ쳣bean쳣");</span></div><div class="line"><span class="comment">     e.printStackTrace();</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">   &#125; catch (InstantiationException e) &#123;</span></div><div class="line"><span class="comment">    log.error("ҳѯ쳣dtoʼ쳣");</span></div><div class="line"><span class="comment">    e.printStackTrace();</span></div><div class="line"><span class="comment">    dto = null;</span></div><div class="line"><span class="comment">   &#125; catch (IllegalAccessException e) &#123;</span></div><div class="line"><span class="comment">    log.error("ҳѯ쳣dtoʼ쳣");</span></div><div class="line"><span class="comment">    e.printStackTrace();</span></div><div class="line"><span class="comment">    dto = null;</span></div><div class="line"><span class="comment">   &#125;</span></div><div class="line"><span class="comment">   resultsDtoList.add(dto);</span></div><div class="line"><span class="comment">  &#125;</span></div><div class="line"><span class="comment">  DtoResultWithPageInfo&lt;D&gt; resultWithPageInfo = new DtoResultWithPageInfo&lt;D&gt;(</span></div><div class="line"><span class="comment">    resultsDtoList, pageInfo);</span></div><div class="line"><span class="comment">  return resultWithPageInfo;</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * ͨcriteria  List&lt;dtoClazz&gt;</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClazz</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="comment">/*public &lt;E, D extends Dto&gt; List&lt;D&gt; queryListByCriteria(</span></div><div class="line"><span class="comment">   Criteria criteria,Class&lt;D&gt; dtoClazz) &#123;</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">  @SuppressWarnings("unchecked")</span></div><div class="line"><span class="comment">  List&lt;E&gt; resultsList = criteria.list();</span></div><div class="line"><span class="comment">  List&lt;D&gt; resultsDtoList = new ArrayList&lt;D&gt;();</span></div><div class="line"><span class="comment">  for (E result : resultsList) &#123;</span></div><div class="line"><span class="comment">   D dto;</span></div><div class="line"><span class="comment">   try &#123;</span></div><div class="line"><span class="comment">    dto = dtoClazz.newInstance();</span></div><div class="line"><span class="comment">    try &#123;</span></div><div class="line"><span class="comment">     BeanUtils.copyProperties(result, dto);</span></div><div class="line"><span class="comment">    &#125; catch (Exception e) &#123;</span></div><div class="line"><span class="comment">     log.error("ҳѯ쳣bean쳣");</span></div><div class="line"><span class="comment">     e.printStackTrace();</span></div><div class="line"><span class="comment">    &#125;</span></div><div class="line"><span class="comment">   &#125; catch (InstantiationException e) &#123;</span></div><div class="line"><span class="comment">    log.error("ҳѯ쳣dtoʼ쳣");</span></div><div class="line"><span class="comment">    e.printStackTrace();</span></div><div class="line"><span class="comment">    dto = null;</span></div><div class="line"><span class="comment">   &#125; catch (IllegalAccessException e) &#123;</span></div><div class="line"><span class="comment">    log.error("ҳѯ쳣dtoʼ쳣");</span></div><div class="line"><span class="comment">    e.printStackTrace();</span></div><div class="line"><span class="comment">    dto = null;</span></div><div class="line"><span class="comment">   &#125;</span></div><div class="line"><span class="comment">   resultsDtoList.add(dto);</span></div><div class="line"><span class="comment">  &#125;</span></div><div class="line"><span class="comment">  return resultsDtoList;</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"> </div><div class="line"> <span class="comment">/*public DataTablePageList queryDataTablePageListByCriteria(</span></div><div class="line"><span class="comment">   Criteria criteria, String displayStart, String displayLength) &#123;</span></div><div class="line"><span class="comment">  // ܼ¼</span></div><div class="line"><span class="comment">  long totalRecords = 0L;</span></div><div class="line"><span class="comment">  criteria.setProjection(Projections.rowCount());</span></div><div class="line"><span class="comment">  totalRecords = (Long) criteria.uniqueResult();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">  // </span></div><div class="line"><span class="comment">  criteria.setProjection(null);</span></div><div class="line"><span class="comment">  criteria.setFirstResult(Integer.parseInt(displayStart));</span></div><div class="line"><span class="comment">  criteria.setMaxResults(Integer.parseInt(displayLength));</span></div><div class="line"><span class="comment">  </span></div><div class="line"><span class="comment">  @SuppressWarnings("rawtypes")</span></div><div class="line"><span class="comment">  List resultsList = criteria.list();</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">  DataTablePageList dtpl = new DataTablePageList(</span></div><div class="line"><span class="comment">    String.valueOf((int) totalRecords), resultsList);</span></div><div class="line"><span class="comment">  return dtpl;</span></div><div class="line"><span class="comment"> &#125;</span></div><div class="line"><span class="comment"> */</span></div><div class="line"> </div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * ͨѯʼҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span><span class="comment">/*</span></div><div class="line"><span class="comment"> private PageInfo getInstancePageInfoWithCriteria(Criteria criteria,</span></div><div class="line"><span class="comment">   int pageNo, int pageSize) &#123;</span></div><div class="line"><span class="comment">  long totalQuantity = 0L;</span></div><div class="line"><span class="comment">  criteria.setProjection(Projections.rowCount());</span></div><div class="line"><span class="comment">  totalQuantity = (Long) criteria.uniqueResult();</span></div><div class="line"><span class="comment">  PageInfo pageInfo = PageInfo.getInstance(pageNo, pageSize,</span></div><div class="line"><span class="comment">    totalQuantity);</span></div><div class="line"><span class="comment">  return pageInfo;</span></div><div class="line"><span class="comment"> &#125;*/</span></div><div class="line"> </div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">public</span> Criteria <span class="title">createCriteria</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">  <span class="keyword">return</span> getSession().createCriteria(getEntityClass());</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * queryPageListByCriteria</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * ͨcriteria  DtoResultWithPageInfo&lt;dtoClazz&gt;list+ҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  *            ѯ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  *            ǰҳ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  *            ÿҳʾ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClass</span></div><div class="line"><span class="comment">  *            ݴݶclass</span></div><div class="line"><span class="comment">  * ص DtoResultWithPageInfo </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * Ϊ queryPageListByCriteria</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="keyword">public</span> &lt;E, D extends Dto&gt; <span class="function">DtoResultWithPageInfo&lt;D&gt; <span class="title">queryPageListByCriteria</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">   Criteria criteria, <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, Class&lt;D&gt; dtoClazz)</span> </span>&#123;</div><div class="line">      <span class="comment">//˷ĵãpageinfoѾfirstResult  maxresult</span></div><div class="line">  PageInfo pageInfo = getInstancePageInfoWithCriteria(criteria, pageNo,</div><div class="line">    pageSize);</div><div class="line">  </div><div class="line">  criteria.setProjection(<span class="keyword">null</span>);<span class="comment">// ͶӰ</span></div><div class="line">  criteria.setFirstResult(pageInfo.getFirstResultNum());</div><div class="line">  criteria.setMaxResults(pageInfo.getPageSize());</div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">  List&lt;E&gt; resultsList = criteria.list();</div><div class="line">  List&lt;D&gt; resultsDtoList = <span class="keyword">new</span> ArrayList&lt;D&gt;();</div><div class="line">  <span class="keyword">for</span> (E result : resultsList) &#123;</div><div class="line">   D dto;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">    dto = dtoClazz.newInstance();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">     BeanUtils.copyProperties(result, dto);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">     log.error(<span class="string">"ҳѯ쳣bean쳣"</span>);</div><div class="line">     e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">   &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">    log.error(<span class="string">"ҳѯ쳣dtoʼ쳣"</span>);</div><div class="line">    e.printStackTrace();</div><div class="line">    dto = <span class="keyword">null</span>;</div><div class="line">   &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">    log.error(<span class="string">"ҳѯ쳣dtoʼ쳣"</span>);</div><div class="line">    e.printStackTrace();</div><div class="line">    dto = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   resultsDtoList.add(dto);</div><div class="line">  &#125;</div><div class="line">  DtoResultWithPageInfo&lt;D&gt; resultWithPageInfo = <span class="keyword">new</span> DtoResultWithPageInfo&lt;D&gt;(</div><div class="line">    resultsDtoList, pageInfo);</div><div class="line">  <span class="keyword">return</span> resultWithPageInfo;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * queryPageListByCriteriaWithQo</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * ͨcriteria  DtoResultWithPageInfo&lt;dtoClazz&gt;list+ҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  *            ѯ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  *            ǰҳ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  *            ÿҳʾ</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> dtoClass</span></div><div class="line"><span class="comment">  *            ݴݶclass</span></div><div class="line"><span class="comment">  * ص DtoResultWithPageInfo </span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * Ϊ queryPageListByCriteria</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@Override</span></div><div class="line"> <span class="keyword">public</span> &lt;E, D extends Dto&gt; <span class="function">DtoResultWithPageInfo&lt;D&gt; <span class="title">queryPageListByCriteriaWithQo</span><span class="params">(PageQo qo, Class&lt;D&gt; dtoClazz)</span> </span>&#123;</div><div class="line">      <span class="comment">//˷ĵãpageinfoѾfirstResult  maxresult</span></div><div class="line">  Criteria criteria = <span class="keyword">this</span>.createCriteria();</div><div class="line">  qo.add(criteria);</div><div class="line">  PageInfo pageInfo = getInstancePageInfoWithCriteria(criteria, qo.getPage(),qo.getRows());</div><div class="line">  </div><div class="line">  criteria.setProjection(<span class="keyword">null</span>);<span class="comment">// ͶӰ</span></div><div class="line">  criteria.setFirstResult(pageInfo.getFirstResultNum());</div><div class="line">  criteria.setMaxResults(pageInfo.getPageSize());</div><div class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">  List&lt;E&gt; resultsList = criteria.list();</div><div class="line">  List&lt;D&gt; resultsDtoList = <span class="keyword">new</span> ArrayList&lt;D&gt;();</div><div class="line">  <span class="keyword">for</span> (E result : resultsList) &#123;</div><div class="line">   D dto;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">    dto = dtoClazz.newInstance();</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">     BeanUtils.copyProperties(result, dto);</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">     log.error(<span class="string">"ҳѯ쳣bean쳣"</span>);</div><div class="line">     e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">   &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</div><div class="line">    log.error(<span class="string">"ҳѯ쳣dtoʼ쳣"</span>);</div><div class="line">    e.printStackTrace();</div><div class="line">    dto = <span class="keyword">null</span>;</div><div class="line">   &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">    log.error(<span class="string">"ҳѯ쳣dtoʼ쳣"</span>);</div><div class="line">    e.printStackTrace();</div><div class="line">    dto = <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   resultsDtoList.add(dto);</div><div class="line">  &#125;</div><div class="line">  DtoResultWithPageInfo&lt;D&gt; resultWithPageInfo = <span class="keyword">new</span> DtoResultWithPageInfo&lt;D&gt;(</div><div class="line">    resultsDtoList, pageInfo);</div><div class="line">  <span class="keyword">return</span> resultWithPageInfo;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> </div><div class="line"> </div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * ͨѯʼҳϢ</span></div><div class="line"><span class="comment">  * </span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> criteria</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">  * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">private</span> PageInfo <span class="title">getInstancePageInfoWithCriteria</span><span class="params">(Criteria criteria,</span></span></div><div class="line"><span class="function"><span class="params">  <span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">   <span class="keyword">long</span> totalQuantity = <span class="number">0L</span>;</div><div class="line">         <span class="comment">//  ܵtotalQuality</span></div><div class="line">  criteria.setProjection(Projections.rowCount());</div><div class="line">  totalQuantity = (Long) criteria.uniqueResult();</div><div class="line">  </div><div class="line">  PageInfo pageInfo = PageInfo.getInstance(pageNo, pageSize,</div><div class="line">    totalQuantity);</div><div class="line">  <span class="keyword">return</span> pageInfo;</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个方法是极为重要的 <strong>protected abstract Class&lt;?&gt; getEntityClass();</strong><br>后续介绍，现在暂时有个印象。<br>在www中的dao层有与各具体类(数据表)相对应的数据库操作实现：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-6a3c8b7bd1a2a8a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-20 下午11.22.30.png"><br>上图声明了三个具体类对应的接口声明：AdminDao、MacDao、TaskDao。<br>对应三个接口有三个具体的实现类：AdminDaoImpl、MacDaoImpl、TaskDaoImpl。<br>我们以与Admin类相关的dao层操作为例：<br><strong>Admin.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.domain;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.hibernate.annotations.GenericGenerator;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.persistence.*;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/2.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 管理员实体类，与数据库中表相对应</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"mms_admin"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"increment"</span>)</div><div class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"increment"</span>, strategy = <span class="string">"increment"</span>)</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> String userName;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> String role;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> enable;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> isDelete;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.userName = userName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRole</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> role;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRole</span><span class="params">(String role)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.role = role;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getEnable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> enable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEnable</span><span class="params">(<span class="keyword">int</span> enable)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.enable = enable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIsDelete</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> isDelete;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIsDelete</span><span class="params">(<span class="keyword">int</span> isDelete)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.isDelete = isDelete;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>AdminDao.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.dao;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.dao.BaseDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.domain.Admin;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/10/31.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 操作管理员数据库访问接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdminDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Admin</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>AdminDaoImpl.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.www.dao.hib;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.fxmms.common.dao.hib.HibernateTemplateDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.dao.AdminDao;</div><div class="line"><span class="keyword">import</span> com.fxmms.www.domain.Admin;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created by mark on 16/11/2.</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> 使用适配器模式，将common层中定义的公共访问数据库方法实现嫁接到Admin类的接口中。</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AdminDaoImpl</span> <span class="keyword">extends</span> <span class="title">HibernateTemplateDao</span>&lt;<span class="title">Admin</span>&gt; <span class="keyword">implements</span> <span class="title">AdminDao</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> Class&lt;?&gt; getEntityClass() &#123;</div><div class="line">        <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">        <span class="keyword">return</span> Admin.class;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，在具体类相关的数据库操作实现类中，我们只需要实现HibernateTemplateDao<t>中抽象方法protected Class&lt;?&gt; getEntityClass()；即可。<br>给我们的感觉就是这个方法的实现是画龙点睛之笔。<br>回过头去看，在HibernateTemplateDao类中所有与数据库操作有关的方法：<br>例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getByUniqueKey</span><span class="params">(String columnName, Object value)</span> </span>&#123;</div><div class="line"> <span class="keyword">return</span> (T) getSession().createCriteria(getEntityClass())</div><div class="line">   .add(Restrictions.eq(columnName, value)).uniqueResult();</div><div class="line">&#125;</div></pre></td></tr></table></figure></t></p>
<p>getEntityClass()方法最终都会被具体的类所实现。这个设计真的是很巧妙。</p>
<h2 id="5-webapp文件夹下分层详解"><a href="#5-webapp文件夹下分层详解" class="headerlink" title="5.webapp文件夹下分层详解"></a>5.webapp文件夹下分层详解</h2><hr>
<p>webapp下有res文件夹，用于存储静态文件，WEB-INF文件夹下有view文件夹用于放置应用中jsp页面。<br>文件组织结构如下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-7bfc624ba98ae300.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="webapp下静态资源以及前端页面"></p>
<h2 id="6-配置tomcat-运行环境"><a href="#6-配置tomcat-运行环境" class="headerlink" title="6.配置tomcat 运行环境"></a>6.配置tomcat 运行环境</h2><hr>
<p>项目搭建已经完毕，接下来需要做的就是配置项目的运行环境了，这里我们采用tomcat来充当应用服务器。<br>6.1 去官网下载<strong>tomcat 8.0</strong>：<a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="external">http://tomcat.apache.org/download-80.cgi</a><br>6.2 配置 tomcat 服务器：<br>点击Edit Configurations<br><img src="http://upload-images.jianshu.io/upload_images/2836699-adbe573aca906795.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-20 下午11.48.58.png"><br>点击<strong>+</strong>,并选择Tomcat Server中local选项<br><img src="http://upload-images.jianshu.io/upload_images/2836699-4165cdfd6c036090.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-20 下午11.51.03.png"><br>添加启动任务名称，默认为unnamed<br><img src="http://upload-images.jianshu.io/upload_images/2836699-3bc1d2d4fbb7ecef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午9.33.39.png"><br>配置Application Server<br><img src="http://upload-images.jianshu.io/upload_images/2836699-c207e3fdc657a78c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午9.39.06.png"><br>装载开发版(exploded)应用war包,此步骤有两种方式：<br><strong>第一种方式：</strong>选择Deploy at the server startup下方的<strong>+</strong>，入下图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-78f1066ab3e76dd0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午9.54.16.png"><br>接下来在Select Artifacts Deploy 弹出框中 选择 exploded 属性的war包<br><img src="http://upload-images.jianshu.io/upload_images/2836699-463b94c93db0bac3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午9.54.31.png"></p>
<p>接下来选择apply－&gt; ok ，最终的结果是：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-0007a5982b4a4cf2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午10.05.46.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-6e94cec0a589554d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午10.12.55.png"><br>最终点击启动按钮启动应用<br><img src="http://upload-images.jianshu.io/upload_images/2836699-d28e2913b5b7e007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午10.15.46.png"><br>最终的启动效果如下所示</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-3c464a313b435217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 上午10.27.45.png"></p>
<p>模板代码地址：<a href="https://coding.net/u/zongyuan/p/Java-backend-template/git" target="_blank" rel="external">https://coding.net/u/zongyuan/p/Java-backend-template/git</a><br>关于项目中应用到的JNI技术，会在后面讲解，主要侧重点是在代码层面解决JNI link library的问题。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Intellij  Idea--Debug使用（Mac）]]></title>
      <url>/2017/11/14/IntellijIdea-Mac-use-debug/</url>
      <content type="html"><![CDATA[<p><strong>前言：</strong>本文的核心是记录debug的使用，与具体的操作系统无关。</p>
<h2 id="1-什么是Debug"><a href="#1-什么是Debug" class="headerlink" title="1.什么是Debug"></a>1.什么是Debug</h2><hr>
<p>Debug是程序的一种运行模式。用来发掘程序的走向，以及程序在运行过程中参数的变化。</p>
<h2 id="2-Debug的作用"><a href="#2-Debug的作用" class="headerlink" title="2.Debug的作用"></a>2.Debug的作用</h2><a id="more"></a>
<hr>
<p>debug用来追溯代码的运行流程，通常在程序运行跟预期结果不符合的时（程序运行时出现异常），那么启动debug模式可以分析定位异常发生的位置，帮助程序员更好的fix bug</p>
<h2 id="3-Debug的使用"><a href="#3-Debug的使用" class="headerlink" title="3.Debug的使用"></a>3.Debug的使用</h2><hr>
<p>主要讲解intellj中debug的使用 ，此篇不会讲解debug时可用的快捷键。<br>配合idea中图形界面来进行讲解。</p>
<blockquote>
<p><strong>3.1.程序打上断点</strong><br>首先为程序打上断点，我采用的是spring demo，因为这样可以演示给第三方spring jar包如何打上断点。<br>主程序上断点如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-79b3cf7f01cc394d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="程序打上断点.png"><br>第三方jar包反编译源代码断点如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-68b977fd49fb317e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.09.44.png"><br><strong>3.2单步调试</strong><br><strong>3.2.1 Step Over:</strong><br>点击红色箭头指向的按钮，程序向下执行一行。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-101f61c51b8dcd94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.21.02.png"><br>但有一种情况需要注意，如果在一个顺序执行的程序文件中打上断点，而第一行被打上断点的代码调用了其他方法，而且这个被调用的方法上也有断点，那么这样单步执行的顺序是，先祝程序文件中第一行被打断点的程序运行，接下来是被调用方法中打了断点的那一行代码，最后接着顺序运行此主程序文件中其它被打了断点的代码。<br><strong>3.2.2 Step Into:</strong><br>点击红色箭头指向的按钮，程序向下执行一行。如果该行有自定义方法，则运行进入自定义方法,如果有第三方类库方法，则在idea 中可以进入第三方代码中。具体步骤如下：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-d19254229e35d473.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.41.02.png"><br>在程序第十三行设置断点，然后点击上图中红色箭头指向的按钮，程序运行至第三方类库当中代码，代码如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-1edc095aa3f10352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.45.08.png"><br><strong>3.2.3 step out</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-315063bc344067be.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.48.30.png"><br>如果在调试的时候你进入了一个方法，并觉得该方法没有问题，你就可以使用stepout跳出该方法，返回到该方法被调用处的下一行语句。值得注意的是，该方法已执行完毕。<br><strong>3.2.4 Drop frame</strong><br><img src="http://upload-images.jianshu.io/upload_images/2836699-8f747ce7e7ecdcc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.50.50.png"><br>点击该按钮后，你将返回到当前方法的调用处（如上图，程序会回到main()中）重新执行，并且所有上下文变量的值也回到那个时候。只要调用链中还有上级方法，可以跳到其中的任何一个方法。<br><strong>3.2.5 纯断点运行</strong><br>所谓纯断点运行表示：程序只在断点处停留。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-dfaf5f36fdc71db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.55.53.png"><br>发现上述两个按钮都可以实现效果<br><strong>3.2.6 查看断点</strong><br>按如下按钮可以查看程序中所有的断点：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-893093247a3639dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.58.03.png"><br>效果图如下所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-cfeff4a100a8fc59.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午3.59.29.png"><br>你可以从中删除不想要的断点。重新debug<br><strong>3.2.7 变量值查看</strong><br>idea中变量值的查看非常简单如下图：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-044a231775e86d28.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-10-26 下午4.07.20.png"><br>两个红色箭头所指的地方都可以查看debug过程中变量值的变化情况。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java web 项目中使用JNI技术（如何在程序运行期间改变 java.library.path并生效）]]></title>
      <url>/2017/11/14/java-jni/</url>
      <content type="html"><![CDATA[<p><strong>记录结构:</strong><br>JNI技术入门详解，参照刚哥的手记：<a href="http://www.jianshu.com/p/fe42aa3150a0" target="_blank" rel="external">http://www.jianshu.com/p/fe42aa3150a0</a><br><strong>注意：</strong>刚哥手记与接下来要记录的web项目中使用JNI技术是无缝连接的。<br><strong>应用场景：</strong>当我们根据不同的平台生成不同的JNI libaray时，例如：linux <strong>.so</strong>、mac <strong>jnilib</strong>、windows <strong>.dll</strong>。我们想在打包web 应用时让程序动态调用c,或者c++对Java Native Inteface 的具体底层实现时，有一种方法是借助配置在idea中的vm option中设置库文件所在的路径，即<strong>-Djava.path.library</strong>，刚哥手记最后一部分有说明。<br><a id="more"></a><br><strong>精准定位问题：</strong></p>
<blockquote>
<p>1.那么有没有另外一种方式使得Java 程序在调用native inteface 中抽象本地方法自动加载所需要的代码呢？也就是说应用程序自动加载.so <strong>|| (或)</strong>.jnilib<strong> || </strong>.dll?。<br> 2.我们知道Java  应用程序在调用底层代码生成的库文件时，需要指定库文件所在的path。那么我们的问题就清晰了，问题的痛点在于如何让应用程序在程序运行期间动态加载库文件所在的路径，进而加载所需的库文件。<br>网上的一种说法是：在使用System.loadLibrary(“具体库文件所在的路径的相对路径”)，之前使用System.load(“具体库文件所在的根目录的全路径”)，本人试了一下，发现并不起作用。</p>
</blockquote>
<p>继续找解决方案，无意中发现了一篇博客，博客地址是：<a href="http://ju.outofmemory.cn/entry/150717" target="_blank" rel="external">http://ju.outofmemory.cn/entry/150717</a><br>这篇文章讲述的是如何在运行时改变 java.library.path并生效。<br>我想这正是我要的答案，无奈是英文的，还是硬着头皮看吧<br><strong>首先开篇很简明扼要说明问题：</strong></p>
<blockquote>
<p>The java.library.path<br> system property instructs the JVM where to search for native libraries. You have to specify it as a JVM argument using -Djava.library.path=/path/to/lib<br> and then when you try to load a library using System.loadLibrary(“foo”)<br>, the JVM will search the library path for the specified library. If it cannot be found you will get an exception which looks like:</p>
</blockquote>
<p>大致的意思是：</p>
<blockquote>
<p>系统属性－ java.library.path指引JVM去寻找底层的库文件，你必须为JVM声明一个属性，类似于Djava.library.path=/path/to/lib ,当你需要使用System.loadLibrary(“foo”)加载底层foo库文件的时候，jvm会按照你声明的path去加载这个库文件，如果你不声明的话，会出现下面错误：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Exception in thread <span class="string">"main"</span> java.lang.UnsatisfiedLinkError: no foo in java.library.path</div><div class="line">    at java.lang.ClassLoader.loadLibrary(ClassLoader.java:<span class="number">1734</span>)</div><div class="line">    at java.lang.Runtime.loadLibrary0(Runtime.java:<span class="number">823</span>)</div><div class="line">    at java.lang.System.loadLibrary(System.java:<span class="number">1028</span>)</div></pre></td></tr></table></figure>
<p>这个错告诉我们foo库并不在我们所要加载的路径下面。<br>接下来说明原因：</p>
<blockquote>
<p>The java.library.path<br> is read only once when the JVM starts up. If you change this property usingSystem.setProperty<br>, it won’t make any difference.</p>
</blockquote>
<p>意思是：java.library.path 只会在JVM启动的时候被都到，如果你直接使用<br><strong>System.setProperty(“java.path.libarary”,”库所在路径”)</strong>这样是不起作用的，因为JVM已经启动了。所以这个JVM后期不能找到这个库文件所在的路径，所以就报如上错误。<br>源码中<strong>ClassLoader.loadLibrary</strong>有这样一句代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (sys_paths == <span class="keyword">null</span>) &#123;</div><div class="line">    usr_paths = initializePath(<span class="string">"java.library.path"</span>);</div><div class="line">    sys_paths = initializePath(<span class="string">"sun.boot.library.path"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为什么就定位问题到上述几行代码，我们得从源码的角度来分析，看下源码：<br>首先是System.loadLibaray()，借助idea看下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">     * Loads the native library specified by the &lt;code&gt;libname&lt;/code&gt;</span></div><div class="line"><span class="comment">     * argument.  The &lt;code&gt;libname&lt;/code&gt; argument must not contain any platform</span></div><div class="line"><span class="comment">     * specific prefix, file extension or path. If a native library</span></div><div class="line"><span class="comment">     * called &lt;code&gt;libname&lt;/code&gt; is statically linked with the VM, then the</span></div><div class="line"><span class="comment">     * JNI_OnLoad_&lt;code&gt;libname&lt;/code&gt; function exported by the library is invoked.</span></div><div class="line"><span class="comment">     * See the JNI Specification for more details.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * Otherwise, the libname argument is loaded from a system library</span></div><div class="line"><span class="comment">     * location and mapped to a native library image in an implementation-</span></div><div class="line"><span class="comment">     * dependent manner.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * The call &lt;code&gt;System.loadLibrary(name)&lt;/code&gt; is effectively</span></div><div class="line"><span class="comment">     * equivalent to the call</span></div><div class="line"><span class="comment">     * &lt;blockquote&gt;&lt;pre&gt;</span></div><div class="line"><span class="comment">     * Runtime.getRuntime().loadLibrary(name)</span></div><div class="line"><span class="comment">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>      libname   the name of the library.</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  SecurityException  if a security manager exists and its</span></div><div class="line"><span class="comment">     *             &lt;code&gt;checkLink&lt;/code&gt; method doesn't allow</span></div><div class="line"><span class="comment">     *             loading of the specified dynamic library</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  UnsatisfiedLinkError if either the libname argument</span></div><div class="line"><span class="comment">     *             contains a file path, the native library is not statically</span></div><div class="line"><span class="comment">     *             linked with the VM,  or the library cannot be mapped to a</span></div><div class="line"><span class="comment">     *             native library image by the host system.</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  NullPointerException if &lt;code&gt;libname&lt;/code&gt; is</span></div><div class="line"><span class="comment">     *             &lt;code&gt;null&lt;/code&gt;</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span>        java.lang.Runtime#loadLibrary(java.lang.String)</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span>        java.lang.SecurityManager#checkLink(java.lang.String)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@CallerSensitive</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</div><div class="line">        Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>可以看到 <strong>方法调用中出现Runtime.getRuntime().loadLibrary0()</strong>, 从这行代码我们知道库文件是在运行时被加载起作用的。<br>我们继续看<strong>loadLibrary0()</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">/**</span></div><div class="line"><span class="comment">     * Loads the native library specified by the &lt;code&gt;libname&lt;/code&gt;</span></div><div class="line"><span class="comment">     * argument.  The &lt;code&gt;libname&lt;/code&gt; argument must not contain any platform</span></div><div class="line"><span class="comment">     * specific prefix, file extension or path. If a native library</span></div><div class="line"><span class="comment">     * called &lt;code&gt;libname&lt;/code&gt; is statically linked with the VM, then the</span></div><div class="line"><span class="comment">     * JNI_OnLoad_&lt;code&gt;libname&lt;/code&gt; function exported by the library is invoked.</span></div><div class="line"><span class="comment">     * See the JNI Specification for more details.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * Otherwise, the libname argument is loaded from a system library</span></div><div class="line"><span class="comment">     * location and mapped to a native library image in an implementation-</span></div><div class="line"><span class="comment">     * dependent manner.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * First, if there is a security manager, its &lt;code&gt;checkLink&lt;/code&gt;</span></div><div class="line"><span class="comment">     * method is called with the &lt;code&gt;libname&lt;/code&gt; as its argument.</span></div><div class="line"><span class="comment">     * This may result in a security exception.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * The method &#123;<span class="doctag">@link</span> System#loadLibrary(String)&#125; is the conventional</span></div><div class="line"><span class="comment">     * and convenient means of invoking this method. If native</span></div><div class="line"><span class="comment">     * methods are to be used in the implementation of a class, a standard</span></div><div class="line"><span class="comment">     * strategy is to put the native code in a library file (call it</span></div><div class="line"><span class="comment">     * &lt;code&gt;LibFile&lt;/code&gt;) and then to put a static initializer:</span></div><div class="line"><span class="comment">     * &lt;blockquote&gt;&lt;pre&gt;</span></div><div class="line"><span class="comment">     * static &#123; System.loadLibrary("LibFile"); &#125;</span></div><div class="line"><span class="comment">     * &lt;/pre&gt;&lt;/blockquote&gt;</span></div><div class="line"><span class="comment">     * within the class declaration. When the class is loaded and</span></div><div class="line"><span class="comment">     * initialized, the necessary native code implementation for the native</span></div><div class="line"><span class="comment">     * methods will then be loaded as well.</span></div><div class="line"><span class="comment">     * &lt;p&gt;</span></div><div class="line"><span class="comment">     * If this method is called more than once with the same library</span></div><div class="line"><span class="comment">     * name, the second and subsequent calls are ignored.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span>      libname   the name of the library.</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  SecurityException  if a security manager exists and its</span></div><div class="line"><span class="comment">     *             &lt;code&gt;checkLink&lt;/code&gt; method doesn't allow</span></div><div class="line"><span class="comment">     *             loading of the specified dynamic library</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  UnsatisfiedLinkError if either the libname argument</span></div><div class="line"><span class="comment">     *             contains a file path, the native library is not statically</span></div><div class="line"><span class="comment">     *             linked with the VM,  or the library cannot be mapped to a</span></div><div class="line"><span class="comment">     *             native library image by the host system.</span></div><div class="line"><span class="comment">     * <span class="doctag">@exception</span>  NullPointerException if &lt;code&gt;libname&lt;/code&gt; is</span></div><div class="line"><span class="comment">     *             &lt;code&gt;null&lt;/code&gt;</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span>        java.lang.SecurityException</span></div><div class="line"><span class="comment">     * <span class="doctag">@see</span>        java.lang.SecurityManager#checkLink(java.lang.String)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@CallerSensitive</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(String libname)</span> </span>&#123;</div><div class="line">        loadLibrary0(Reflection.getCallerClass(), libname);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">loadLibrary0</span><span class="params">(Class&lt;?&gt; fromClass, String libname)</span> </span>&#123;</div><div class="line">        SecurityManager security = System.getSecurityManager();</div><div class="line">        <span class="keyword">if</span> (security != <span class="keyword">null</span>) &#123;</div><div class="line">            security.checkLink(libname);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (libname.indexOf((<span class="keyword">int</span>)File.separatorChar) != -<span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(</div><div class="line">    <span class="string">"Directory separator should not appear in library name: "</span> + libname);</div><div class="line">        &#125;</div><div class="line">        ClassLoader.loadLibrary(fromClass, libname, <span class="keyword">false</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>题外话：<strong>loadLibrary()</strong>,<strong>loadLibrary0()</strong>这两个方法的命名还是挺不符合规范的，历史遗留问题吧。<br>在loadLibrary中我们看到了<strong>ClassLoader.loadLibrary(fromClass, libname, false)</strong>;方法<br>继续追溯<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// Invoked in the java.lang.Runtime class to implement load and loadLibrary.</span></div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadLibrary</span><span class="params">(Class&lt;?&gt; fromClass, String name,</span></span></div><div class="line"><span class="function"><span class="params">                            <span class="keyword">boolean</span> isAbsolute)</span> </span>&#123;</div><div class="line">        ClassLoader loader =</div><div class="line">            (fromClass == <span class="keyword">null</span>) ? <span class="keyword">null</span> : fromClass.getClassLoader();</div><div class="line">        <span class="keyword">if</span> (sys_paths == <span class="keyword">null</span>) &#123;</div><div class="line">            usr_paths = initializePath(<span class="string">"java.library.path"</span>);</div><div class="line">            sys_paths = initializePath(<span class="string">"sun.boot.library.path"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (isAbsolute) &#123;</div><div class="line">            <span class="keyword">if</span> (loadLibrary0(fromClass, <span class="keyword">new</span> File(name))) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(<span class="string">"Can't load library: "</span> + name);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</div><div class="line">            String libfilename = loader.findLibrary(name);</div><div class="line">            <span class="keyword">if</span> (libfilename != <span class="keyword">null</span>) &#123;</div><div class="line">                File libfile = <span class="keyword">new</span> File(libfilename);</div><div class="line">                <span class="keyword">if</span> (!libfile.isAbsolute()) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(</div><div class="line">    <span class="string">"ClassLoader.findLibrary failed to return an absolute path: "</span> + libfilename);</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">if</span> (loadLibrary0(fromClass, libfile)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(<span class="string">"Can't load "</span> + libfilename);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; sys_paths.length ; i++) &#123;</div><div class="line">            File libfile = <span class="keyword">new</span> File(sys_paths[i], System.mapLibraryName(name));</div><div class="line">            <span class="keyword">if</span> (loadLibrary0(fromClass, libfile)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            libfile = ClassLoaderHelper.mapAlternativeName(libfile);</div><div class="line">            <span class="keyword">if</span> (libfile != <span class="keyword">null</span> &amp;&amp; loadLibrary0(fromClass, libfile)) &#123;</div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (loader != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; usr_paths.length ; i++) &#123;</div><div class="line">                File libfile = <span class="keyword">new</span> File(usr_paths[i],</div><div class="line">                                        System.mapLibraryName(name));</div><div class="line">                <span class="keyword">if</span> (loadLibrary0(fromClass, libfile)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                libfile = ClassLoaderHelper.mapAlternativeName(libfile);</div><div class="line">                <span class="keyword">if</span> (libfile != <span class="keyword">null</span> &amp;&amp; loadLibrary0(fromClass, libfile)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// Oops, it failed</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsatisfiedLinkError(<span class="string">"no "</span> + name + <span class="string">" in java.library.path"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>这其中有段代码很重要：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   <span class="keyword">if</span> (sys_paths == <span class="keyword">null</span>) &#123;</div><div class="line">            usr_paths = initializePath(<span class="string">"java.library.path"</span>);</div><div class="line">            sys_paths = initializePath(<span class="string">"sun.boot.library.path"</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>对于上述代码的解释我们可以从这篇博客中获取到答案：</p>
<blockquote>
<p>if you set sys_paths to null, the library path will be re-initialised when you try to load a library. </p>
</blockquote>
<p>意思是说，如果我们通过代码将<strong>sys_paths</strong>，设置为null,那么java.library.path将被重新加载一次。<br>那么问题来了，通过刚才的源代码追溯，我们知道System.loadLibray()调用ClassLoader.loadLibrary()方法，<br>我们应该如何将sys_paths设置为空？<br><img src="http://upload-images.jianshu.io/upload_images/2836699-22eeba75f8fa0d4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 下午2.15.02.png"><br>通过上述情景描述，我们要更改sys_paths的值为null,只能在sys_paths初始化之前做手脚（反射在程序动态运行期间更改程序中的属性值）。<br>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Sets the java library path to the specified path</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> path the new library path</span></div><div class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLibraryPath</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"> System.setProperty(<span class="string">"java.library.path"</span>, path);</div><div class="line"> <span class="comment">//set sys_paths to null</span></div><div class="line"> <span class="keyword">final</span> Field sysPathsField =   ClassLoader.class.getDeclaredField(<span class="string">"sys_paths"</span>);</div><div class="line"> sysPathsField.setAccessible(<span class="keyword">true</span>);</div><div class="line"> sysPathsField.set(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>追溯上述代码，debug结果如下图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-1ee45d6aa1c92109.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 下午2.56.22.png"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-ae1b43a347b8ff79.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 下午2.57.15.png"><br>上图红色注释为<strong>java.library.path</strong>，<strong>注释有误</strong>特此说明。<br>最终程序的正常运行。</p>
<p>在程序中实现了程序运行时动态更改java.library.path并生效的效果。<br>我在web项目中的应用是这样的：<br>程序封装，对JNI的使用封装成jniutil工具类：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-13fcd2df6e35af71.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2016-11-21 下午3.16.18.png"><br>代码如下：<br><strong>GetDownloadID.java</strong> 声明本地方法，依赖底层实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.jniutil;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDownloadID</span></span>&#123;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">getDownloadID</span><span class="params">(String mac)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>GetDownloadIDUtil.java</strong>，工具类，调用上述GetDownloadID类的实例方法<strong>getDownloadID()</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.fxmms.common.jniutil;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.apache.http.util.Asserts;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Field;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * <span class="doctag">@usage</span> JNI调用底层c算法将mac地址转化为downloadid</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetDownloadIDUtil</span> </span>&#123;</div><div class="line"> <span class="keyword">static</span>&#123;</div><div class="line">   <span class="keyword">try</span>&#123;</div><div class="line">    setLibraryPath(<span class="string">"/Users/mark/mms/src/main/java/com/fxmms/common/jniutil"</span>);</div><div class="line">    System.loadLibrary(<span class="string">"GetDownloadID"</span>);</div><div class="line">   &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">    System.err.println(<span class="string">"Native code library failed to load.\n"</span> + e);</div><div class="line">    System.exit(<span class="number">1</span>);</div><div class="line">   &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDownLoadId</span><span class="params">(String mac)</span></span>&#123;</div><div class="line">  GetDownloadID test = <span class="keyword">new</span> GetDownloadID();</div><div class="line">  String downLoadId = test.getDownloadID(mac);</div><div class="line">  <span class="keyword">return</span> downLoadId;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="comment">/**</span></div><div class="line"><span class="comment">  * Sets the java library path to the specified path</span></div><div class="line"><span class="comment">  * <span class="doctag">@usage</span> 动态更改sys_paths,使得usr_paths 重新初始化</span></div><div class="line"><span class="comment">  * <span class="doctag">@param</span> path the new library path</span></div><div class="line"><span class="comment">  * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setLibraryPath</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">  System.setProperty(<span class="string">"java.library.path"</span>, path);</div><div class="line">  <span class="comment">//set sys_paths to null</span></div><div class="line">  <span class="keyword">final</span> Field sysPathsField = ClassLoader.class.getDeclaredField(<span class="string">"sys_paths"</span>);</div><div class="line">  sysPathsField.setAccessible(<span class="keyword">true</span>);</div><div class="line">  sysPathsField.set(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">  <span class="comment">//-Djava.library.path="/Users/mark/mms/src/main/java/com/fxmms/common/jniutil"</span></div><div class="line">  <span class="comment">///Users/mark/mms/src/main/java/com/fxmms/common/jniutil</span></div><div class="line">  System.out.println(System.getProperty(<span class="string">"java.library.path"</span>));</div><div class="line">  String mac = <span class="string">"CC:81:DA:86:42:E7"</span>;</div><div class="line">  Asserts.check(mac!=<span class="keyword">null</span>,<span class="string">"mac  null"</span>);</div><div class="line">  GetDownloadID test = <span class="keyword">new</span> GetDownloadID();</div><div class="line">  System.out.println(test.getDownloadID(mac));</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注意：</strong>对库文件的加载放置在静态代码块中。<br>记录完毕。</p>
]]></content>
      
        <categories>
            
            <category> Java Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 编程实操 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建型设计模式--建造者模式]]></title>
      <url>/2017/11/14/Java-Design-Pattern-Creator/</url>
      <content type="html"><![CDATA[<p>记录结构：</p>
<pre><code>--1.前言
--2.实际问题引入（需求）
--3.使用建造者模式解决问题
   --3.1建造者模式简述
   --3.2建造者模式类图
   --3.3建造者模式完整解决方案
--4.建造者模式总结
</code></pre><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><blockquote>
<p>没有人买车会只买一个轮胎或者方向盘,大家买的都是一辆包含轮胎、方向盘和发动机等多个部件的完整汽车。如何将这些部件组装成一辆完整的汽车并返回给用户,这是建造者模式需要解决的问题。建造者模式又称为生成器模式,它是一种较为复杂、使用频率也相对较低的创建型模式。建造者模式为客户端返回的不是一个简单的产品,而是一个由多个部件组成的复杂产品。<br><a id="more"></a></p>
<h2 id="2-实际问题引入（需求）"><a href="#2-实际问题引入（需求）" class="headerlink" title="2.实际问题引入（需求）"></a>2.实际问题引入（需求）</h2><p><strong>游戏角色设计</strong><br>YY软件公司游戏开发小组决定开发一款名为《 YY群侠传》的网络游戏,该游戏采用主流的 RPG(Role Playing Game,角色扮演游戏)模式,玩家可以在游戏中扮演虚拟世界中的一个特定角色,角色根据不同的游戏情节和统计数据(如力量、魔法、技能等)具有不同的能力,角色也会随着不断升级而拥有更加强大的能力。<br>作为 RPG 游戏的一个重要组成部分,需要对游戏角色进行设计,而且随着该游戏的升级将不断增加新的角色。不同类型的游戏角色,其性别、脸型、服装、发型等外部特性都有所差异,例如“天使”拥有美丽的面容和披肩的长发,并身穿一袭白裙;而“恶魔”极其丑陋,留着光头并穿一件刺眼的黑衣。<br>YY公司决定开发一个小工具来创建游戏角色,可以创建不同类型的角色并可以灵活增加新的角色。</p>
</blockquote>
<p>YY公司的开发人员通过分析发现,游戏角色是一个复杂对象,它包含性别、脸型等多个组成部分,不同的游戏角色其组成部分有所差异,如图所示:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-67978d5076438691.gif?imageMogr2/auto-orient/strip" alt="创建型设计模式.gif (注:本图中的游戏角色造型来源于网络,特此说明)"></p>
<h2 id="3-使用建造者模式解决问题"><a href="#3-使用建造者模式解决问题" class="headerlink" title="3.使用建造者模式解决问题"></a>3.使用建造者模式解决问题</h2><p>3.1.<strong>建造者模式简述：</strong></p>
<blockquote>
<p><strong>建造者模式</strong>是较为复杂的创建型模式，它将客户端与包含多个组成部分（或部件）的复杂对象的创建过程分离，客户端无须知道复杂对象的内部组成部分与装配方式，<strong>只需要知道所需建造者的类型即可</strong>。它关注如何一步一步创建一个的复杂对象，不同的具体建造者定义了不同的创建过程，且具体建造者相互独立，增加新的建造者非常方便，无须修改已有代码，系统具有较好的扩展性。<br>建造者模式（Builder Pattern）：将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。建造者模式是一种对象创建型模式。</p>
</blockquote>
<p>3.2.<strong>建造者模式类图：</strong><br>建造者模式一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节。建造者模式结构如图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-886b2e1cc08177de.gif?imageMogr2/auto-orient/strip" alt="建造者模式类图.gif"><br><strong>各组件详解：</strong></p>
<blockquote>
<p><strong>Builder（抽象建造者):</strong>它为创建一个产品 Product 对象的各个部件指定抽象接口，在该接口中一般声明两类方法，一类方法是 buildPartX()，它们用于创建复杂对象的各个部件；另一类方法是 getResult()，它们用于返回复杂对象。Builder 既可以是抽象类，也可以是接口。<br><strong>ConcreteBuilder（具体建造者):</strong>它实现了 Builder 接口，实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，也可以提供一个方法返回创建好的复杂产品对象。<br><strong>Product（产品角色）:</strong>它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。<br><strong>Director（指挥者）:</strong>指挥者又称为导演类，它负责安排复杂对象的建造次序，指挥者与抽象建造者之间存在聚合关系，可以在其 construct() 建造方法中调用建造者对象(使用多态，其实调用的是具体建造者的对象)的部件构造与装配方法，完成复杂对象的建造。客户端一般只需要与指挥者进行交互，在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），然后通过指挥者类的构造函数或者 Setter 方法将该对象（具体建造者）传入指挥者类中。</p>
</blockquote>
<p><strong>3.3建造者模式完整解决方案</strong><br>YY公司开发人员决定使用建造者模式来实现游戏角色的创建，其基本结构如图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-2fd2852e46c04379.gif?imageMogr2/auto-orient/strip" alt="建造者模式解决游戏人物创建结构类图.gif"><br>在图中，ActorController 充当指挥者，ActorBuilder 充当抽象建造者，HeroBuilder、AngelBuilder 和 DevilBuilder 充当具体建造者，Actor 充当复杂产品。完整代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">//Actor角色类：复杂产品，考虑到代码的可读性，只列出部分成员属性，</div><div class="line">//且成员属性的类型均为String，真实情况下，有些成员属性的类型需自定义</div><div class="line">class Actor</div><div class="line">&#123;</div><div class="line">       private  String type; //角色类型</div><div class="line">       private  String sex; //性别</div><div class="line">       private  String face; //脸型</div><div class="line">       private  String costume; //服装</div><div class="line">       private  String hairstyle; //发型</div><div class="line"></div><div class="line">       public  void setType(String type) &#123;</div><div class="line">              this.type  = type;</div><div class="line">       &#125;</div><div class="line">       public  void setSex(String sex) &#123;</div><div class="line">              this.sex  = sex;</div><div class="line">       &#125;</div><div class="line">       public  void setFace(String face) &#123;</div><div class="line">              this.face  = face;</div><div class="line">       &#125;</div><div class="line">       public  void setCostume(String costume) &#123;</div><div class="line">              this.costume  = costume;</div><div class="line">       &#125;</div><div class="line">       public  void setHairstyle(String hairstyle) &#123;</div><div class="line">              this.hairstyle  = hairstyle;</div><div class="line">       &#125;</div><div class="line">       public  String getType() &#123;</div><div class="line">              return  (this.type);</div><div class="line">       &#125;</div><div class="line">       public  String getSex() &#123;</div><div class="line">              return  (this.sex);</div><div class="line">       &#125;</div><div class="line">       public  String getFace() &#123;</div><div class="line">              return  (this.face);</div><div class="line">       &#125;</div><div class="line">       public  String getCostume() &#123;</div><div class="line">              return  (this.costume);</div><div class="line">       &#125;</div><div class="line">       public  String getHairstyle() &#123;</div><div class="line">              return  (this.hairstyle);</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//角色建造器：抽象建造者</div><div class="line">abstract class ActorBuilder</div><div class="line">&#123;</div><div class="line">       protected  Actor actor = new Actor();</div><div class="line"></div><div class="line">       public  abstract void buildType();</div><div class="line">       public  abstract void buildSex();</div><div class="line">       public  abstract void buildFace();</div><div class="line">       public  abstract void buildCostume();</div><div class="line">       public  abstract void buildHairstyle();</div><div class="line"></div><div class="line">       //工厂方法，返回一个完整的游戏角色对象</div><div class="line">       public Actor createActor()</div><div class="line">       &#123;</div><div class="line">              return actor;</div><div class="line">       &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//英雄角色建造器：具体建造者</div><div class="line">class HeroBuilder extends ActorBuilder</div><div class="line">&#123;</div><div class="line">       public  void buildType()</div><div class="line">       &#123;</div><div class="line">              actor.setType(&quot;英雄&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildSex()</div><div class="line">       &#123;</div><div class="line">              actor.setSex(&quot;男&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildFace()</div><div class="line">       &#123;</div><div class="line">              actor.setFace(&quot;英俊&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildCostume()</div><div class="line">       &#123;</div><div class="line">              actor.setCostume(&quot;盔甲&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildHairstyle()</div><div class="line">       &#123;</div><div class="line">              actor.setHairstyle(&quot;飘逸&quot;);</div><div class="line">       &#125;    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//天使角色建造器：具体建造者</div><div class="line">class AngelBuilder extends ActorBuilder</div><div class="line">&#123;</div><div class="line">       public  void buildType()</div><div class="line">       &#123;</div><div class="line">              actor.setType(&quot;天使&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildSex()</div><div class="line">       &#123;</div><div class="line">              actor.setSex(&quot;女&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildFace()</div><div class="line">       &#123;</div><div class="line">              actor.setFace(&quot;漂亮&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildCostume()</div><div class="line">       &#123;</div><div class="line">              actor.setCostume(&quot;白裙&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildHairstyle()</div><div class="line">       &#123;</div><div class="line">              actor.setHairstyle(&quot;披肩长发&quot;);</div><div class="line">       &#125;    </div><div class="line">&#125;</div><div class="line"></div><div class="line">//恶魔角色建造器：具体建造者</div><div class="line">class DevilBuilder extends ActorBuilder</div><div class="line">&#123;</div><div class="line">       public  void buildType()</div><div class="line">       &#123;</div><div class="line">              actor.setType(&quot;恶魔&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildSex()</div><div class="line">       &#123;</div><div class="line">              actor.setSex(&quot;妖&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildFace()</div><div class="line">       &#123;</div><div class="line">              actor.setFace(&quot;丑陋&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildCostume()</div><div class="line">       &#123;</div><div class="line">              actor.setCostume(&quot;黑衣&quot;);</div><div class="line">       &#125;</div><div class="line">       public  void buildHairstyle()</div><div class="line">       &#123;</div><div class="line">              actor.setHairstyle(&quot;光头&quot;);</div><div class="line">       &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>指挥者类 ActorController 定义了 construct() 方法，该方法拥有一个抽象建造者 ActorBuilder 类型的参数，在该方法内部实现了游戏角色对象的逐步构建，代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">//游戏角色创建控制器：指挥者</div><div class="line">class ActorController</div><div class="line">&#123;</div><div class="line">    //逐步构建复杂产品对象</div><div class="line">       public Actor construct(ActorBuilder ab)</div><div class="line">       &#123;</div><div class="line">              Actor actor;</div><div class="line">              ab.buildType();</div><div class="line">              ab.buildSex();</div><div class="line">              ab.buildFace();</div><div class="line">              ab.buildCostume();</div><div class="line">              ab.buildHairstyle();</div><div class="line">              actor=ab.createActor();</div><div class="line">              return actor;</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>为了提高系统的灵活性和可扩展性，我们将具体建造者类的类名存储在配置文件中，并通过工具类 XMLUtil 来读取配置文件并反射生成对象，XMLUtil 类的代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import javax.xml.parsers.*;</div><div class="line">import org.w3c.dom.*;</div><div class="line">import org.xml.sax.SAXException;</div><div class="line">import java.io.*;</div><div class="line">class XMLUtil</div><div class="line">&#123;</div><div class="line">//该方法用于从XML配置文件中提取具体类类名，并返回一个实例对象</div><div class="line">       public  static Object getBean()</div><div class="line">       &#123;</div><div class="line">              try</div><div class="line">              &#123;</div><div class="line">                     //创建文档对象</div><div class="line">                     DocumentBuilderFactory  dFactory = DocumentBuilderFactory.newInstance();</div><div class="line">                     DocumentBuilder  builder = dFactory.newDocumentBuilder();</div><div class="line">                     Document  doc;                                                </div><div class="line">                     doc  = builder.parse(new File(&quot;config.xml&quot;));</div><div class="line"></div><div class="line">                     //获取包含类名的文本节点</div><div class="line">                     NodeList  nl = doc.getElementsByTagName(&quot;className&quot;);</div><div class="line">            Node  classNode=nl.item(0).getFirstChild();</div><div class="line">            String  cName=classNode.getNodeValue();</div><div class="line"></div><div class="line">            //通过类名生成实例对象并将其返回</div><div class="line">            Class c=Class.forName(cName);</div><div class="line">                 Object obj=c.newInstance();</div><div class="line">            return obj;</div><div class="line">         &#125;  </div><div class="line">         catch(Exception e)</div><div class="line">         &#123;</div><div class="line">              e.printStackTrace();</div><div class="line">              return null;</div><div class="line">          &#125;</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编写如下客户端测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class Client &#123;</div><div class="line">       public  static void main(String args[])</div><div class="line">       &#123;</div><div class="line">              ActorBuilder ab; //针对抽象建造者编程</div><div class="line">              ab =  (ActorBuilder)XMLUtil.getBean(); //反射生成具体建造者对象</div><div class="line"></div><div class="line">         ActorController ac = new  ActorController();</div><div class="line">              Actor actor;</div><div class="line">              actor = ac.construct(ab); //通过指挥者创建完整的建造者对象</div><div class="line"></div><div class="line">              String  type = actor.getType();</div><div class="line">              System.out.println(type  + &quot;的外观：&quot;);</div><div class="line">              System.out.println(&quot;性别：&quot; + actor.getSex());</div><div class="line">              System.out.println(&quot;面容：&quot; + actor.getFace());</div><div class="line">              System.out.println(&quot;服装：&quot; + actor.getCostume());</div><div class="line">              System.out.println(&quot;发型：&quot; + actor.getHairstyle());</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译并运行程序，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">天使的外观：</div><div class="line">性别：女</div><div class="line">面容：漂亮</div><div class="line">服装：白裙</div><div class="line">发型：披肩长发</div></pre></td></tr></table></figure></p>
<p>在建造者模式中，客户端只需实例化指挥者类，指挥者类针对抽象建造者编程，客户端根据需要传入具体的建造者类型，指挥者将指导具体建造者一步一步构造一个完整的产品（逐步调用具体建造者的 buildX() 方法），相同的构造过程可以创建完全不同的产品。在游戏角色实例中，如果需要更换角色，只需要修改配置文件，更换具体角色建造者类即可；如果需要增加新角色，可以增加一个新的具体角色建造者类作为抽象角色建造者的子类，再修改配置文件即可，原有代码无须修改，完全符合“开闭原则”。</p>
<h2 id="4-建造者模式总结"><a href="#4-建造者模式总结" class="headerlink" title="4.建造者模式总结"></a>4.建造者模式总结</h2><p>建造者模式的核心在于如何一步步构建一个包含多个组成部件的完整对象，使用相同的构建过程构建不同的产品，在软件开发中，如果我们需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可以考虑使用建造者模式。</p>
<p><strong>主要优点</strong></p>
<p>建造者模式的主要优点如下：</p>
<p>(1) 在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</p>
<p>(2) 每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”</p>
<p>(3) 可以更加精细地控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</p>
<p><strong>主要缺点</strong></p>
<p>建造者模式的主要缺点如下：</p>
<p>(1) 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。</p>
<p>(2) 如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。</p>
<p><strong>适用场景</strong></p>
<p>在以下情况下可以考虑使用建造者模式：</p>
<p>(1) 需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。</p>
<p>(2) 需要生成的产品对象的属性相互依赖，需要指定其生成顺序。</p>
<p>(3) 对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。</p>
<p>(4) 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。</p>
<p>特此说明：文章引用于<a href="http://wiki.jikexueyuan.com/project/design-pattern-creation/builder-three.html" target="_blank" rel="external">极客学院－－创建型设计模式</a></p>
]]></content>
      
        <categories>
            
            <category> design pattern </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 深克隆与浅克隆]]></title>
      <url>/2017/11/14/java-clone/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Java 深克隆(DeepClone)与浅克隆(ShallowClone)是原型设计模式的灵魂。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">记录结构：</div><div class="line">            --什么是浅克隆？</div><div class="line">            --实现浅克隆</div><div class="line">            --什么是深克隆？</div><div class="line">            --实现深克隆</div></pre></td></tr></table></figure></p>
</blockquote>
<a id="more"></a>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><hr>
<p>Sunny 软件公司 OA 系统支持工作周报的快速克隆，极大提高了工作周报的编写效率，受到员工的一致好评。但有员工又发现一个问题，有些工作周报带有附件，例如经理助理“小龙女”的周报通常附有本周项目进展报告汇总表、本周客户反馈信息汇总表等，如果使用上述原型模式来复制周报，周报虽然可以复制，但是周报的附件并不能复制，这是由于什么原因导致的呢？如何才能实现周报和附件的同时复制呢？<br>在解决问题之前了解一下浅克隆与深克隆。</p>
<h2 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h2><hr>
<p>浅克隆<br>在浅克隆中,如果原型对象的成员变量是值类型,将复制一份给克隆对象;如果原型对象的成员变量是引用类型,则将引用对象的地址复制一份给克隆对象,也就是说原型对象和克隆对象的成员变量指向相同的内存地址。简单来说,在浅克隆中,当对象被复制时只复制它本身和其中包含的值类型的成员变量,而引用类型的成员对象并没有复制,如图所示:<br><img src="http://upload-images.jianshu.io/upload_images/2836699-db392a4168e5d04e.gif?imageMogr2/auto-orient/strip" alt="浅复制示意图.gif"></p>
<p>##实现浅克隆</p>
<hr>
<p>在 Java 语言中，通过覆盖 Object 类的 clone() 方法可以实现浅克隆。为了让大家更好地理解浅克隆和深克隆的区别，我们首先使用浅克隆来实现工作周报和附件类的复制，其结构如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-c1b2f6b7b66c149e.gif?imageMogr2/auto-orient/strip" alt="浅复制实现周报clone.gif"></p>
<p>代码如下所示：<br>Attachement.java(附件实体类)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Attachement &#123;   </div><div class="line">   private  String name; //附件名称   </div><div class="line">   public String getName() &#123;  </div><div class="line">        return name;  </div><div class="line">   &#125;   </div><div class="line">   public void setName(String name) &#123;</div><div class="line">        this.name = name;    </div><div class="line">   &#125;   </div><div class="line">   public void downLoad() &#123;        </div><div class="line">        System.out.println(name+&quot;被下载&quot;);    </div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>WeeklyLog.java(周报类)聚合了Attachement对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">/** * Created by mark on 16/10/19. </div><div class="line">    * @usage 实现浅复制 </div><div class="line">    * 浅复制 实现的是对对象中值类型(基本数据类型)引用类型的复制 </div><div class="line">    * 基本数据类型 全复制 </div><div class="line">    * 引用数据类型 对引用类型对象的地址的复制 </div><div class="line">    * 这样两个对象之间会有关联，没有实现完全的分离，一旦当中的某个引用类型对象发生变化， </div><div class="line">    * 那么这两个对象都会发生变化 </div><div class="line">    */</div><div class="line">public class WeeklyLog implements Cloneable &#123;    </div><div class="line">       private Attachement attachment;    </div><div class="line">       private String date;    </div><div class="line">       private String content;    </div><div class="line">       public Attachement getAttachment() &#123;        </div><div class="line">              return attachment;   </div><div class="line">       &#125;   </div><div class="line">       public void setAttachment(Attachement attachment) &#123;</div><div class="line">             this.attachment = attachment;                           </div><div class="line">       &#125;    </div><div class="line">       public String getDate() &#123;        </div><div class="line">             return date;   </div><div class="line">       &#125;    </div><div class="line">       public void setDate(String date) &#123;        </div><div class="line">             this.date = date;    </div><div class="line">       &#125;    </div><div class="line">       public String getContent() &#123;        </div><div class="line">             return content;    </div><div class="line">       &#125;    </div><div class="line">       public void setContent(String content) &#123;        </div><div class="line">             this.content = content;    </div><div class="line">       &#125;    </div><div class="line">       public WeeklyLog clone() &#123;        </div><div class="line">            Object object = null;       </div><div class="line">            try &#123;           </div><div class="line">                   object = super.clone();//调用Object clone方法            </div><div class="line">                   return (WeeklyLog)object;        </div><div class="line">            &#125;catch (CloneNotSupportedException e) &#123; </div><div class="line">                   e.printStackTrace();                                 </div><div class="line">                   return null;        </div><div class="line">           &#125;   </div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>客户端代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class Client &#123;</div><div class="line">       public  static void main(String args[]) &#123;</div><div class="line">              WeeklyLog  log_previous, log_new;</div><div class="line">              log_previous  = new WeeklyLog(); //创建原型对象</div><div class="line">              Attachment  attachment = new Attachment(); //创建附件对象</div><div class="line">              log_previous.setAttachment(attachment);  //将附件添加到周报中</div><div class="line">              log_new  = log_previous.clone(); //调用克隆方法创建克隆对象</div><div class="line">              //比较周报</div><div class="line">              System.out.println(&quot;周报是否相同？ &quot; + (log_previous ==  log_new));</div><div class="line">              //比较附件</div><div class="line">              System.out.println(&quot;附件是否相同？ &quot; +  (log_previous.getAttachment() == log_new.getAttachment()));</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>编译并运行程序，输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">周报是否相同？  false</div><div class="line">附件是否相同？  true</div></pre></td></tr></table></figure></p>
<p>由于使用的是浅克隆技术，因此工作周报对象复制成功，通过“==”比较原型对象和克隆对象的内存地址时输出 false；但是比较附件对象的内存地址时输出 true，说明它们在内存中是同一个对象。</p>
<h2 id="什么是深克隆？"><a href="#什么是深克隆？" class="headerlink" title="什么是深克隆？"></a>什么是深克隆？</h2><hr>
<p>在深克隆中，无论原型对象的成员变量是值类型还是引用类型，都将复制一份给克隆对象，深克隆将原型对象的所有引用对象也复制一份给克隆对象。简单来说，在深克隆中，除了对象本身被复制外，对象所包含的所有成员变量也将复制，如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-8316332d6723ce04.gif?imageMogr2/auto-orient/strip" alt="深克隆示意图jpg.gif"></p>
<p>在 Java 语言中，如果需要实现深克隆，可以通过序列化（Serialization）等方式来实现。序列化就是将对象写到流的过程，写到流中的对象是原有对象的一个拷贝，而原对象仍然存在于内存中。通过序列化实现的拷贝不仅可以复制对象本身，而且可以复制其引用的成员对象，因此通过序列化将对象写到一个流中，再从流里将其读出来，可以实现深克隆。需要注意的是能够实现序列化的对象其类必须实现 Serializable 接口，否则无法实现序列化操作。下面我们使用深克隆技术来实现工作周报和附件对象的复制，由于要将附件对象和工作周报对象都写入流中，因此两个类均需要实现 Serializable 接口，其结构如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-0160313e55765343.gif?imageMogr2/auto-orient/strip" alt="深克隆实现周报中附件复制.gif"></p>
<p>修改后的附件类 Attachment 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import  java.io.*;</div><div class="line">//附件类</div><div class="line">class  Attachment implements Serializable &#123;</div><div class="line">       private  String name; //附件名</div><div class="line">       public  void setName(String name) &#123;</div><div class="line">              this.name  = name;</div><div class="line">       &#125;</div><div class="line">       public  String getName() &#123;</div><div class="line">              return  this.name;</div><div class="line">       &#125;</div><div class="line">       public void download() &#123;</div><div class="line">            System.out.println(&quot;下载附件，文件名为&quot; + name);</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>工作周报类 WeeklyLog 不再使用 Java 自带的克隆机制，而是通过序列化来从头实现对象的深克隆，我们需要重新编写 clone() 方法，修改后的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">import  java.io.*;</div><div class="line">//工作周报类</div><div class="line">class  WeeklyLog implements Serializable &#123;</div><div class="line">       private  Attachment attachment;</div><div class="line">       private  String name;</div><div class="line">       private  String date;</div><div class="line">       private  String content;</div><div class="line">       public  void setAttachment(Attachment attachment) &#123;</div><div class="line">              this.attachment  = attachment;</div><div class="line">       &#125;</div><div class="line">       public  void setName(String name) &#123;</div><div class="line">              this.name  = name;</div><div class="line">       &#125;</div><div class="line">       public  void setDate(String date) &#123;</div><div class="line">              this.date  = date;</div><div class="line">       &#125;</div><div class="line">       public  void setContent(String content) &#123;</div><div class="line">              this.content  = content;</div><div class="line">       &#125;</div><div class="line">       public  Attachment getAttachment()&#123;</div><div class="line">              return  (this.attachment);</div><div class="line">       &#125;</div><div class="line">       public  String getName() &#123;</div><div class="line">              return  (this.name);</div><div class="line">       &#125;</div><div class="line">       public  String getDate() &#123;</div><div class="line">              return  (this.date);</div><div class="line">       &#125;</div><div class="line">       public  String getContent() &#123;</div><div class="line">              return  (this.content);</div><div class="line">       &#125;</div><div class="line">      //使用序列化技术实现深克隆</div><div class="line">       public WeeklyLog deepClone() throws  IOException, ClassNotFoundException, OptionalDataException &#123;</div><div class="line">              //将对象写入流中 使用了装饰器模式</div><div class="line">              ByteArrayOutputStream bao=new  ByteArrayOutputStream();</div><div class="line">              ObjectOutputStream oos=new  ObjectOutputStream(bao);</div><div class="line">              oos.writeObject(this);</div><div class="line"></div><div class="line">              //将对象从流中取出</div><div class="line">              ByteArrayInputStream bis=new  ByteArrayInputStream(bao.toByteArray());</div><div class="line">              ObjectInputStream ois=new  ObjectInputStream(bis);</div><div class="line">              return  (WeeklyLog)ois.readObject();</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重新编译程序，得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">周报是否相同？  false</div><div class="line">附件是否相同？  false</div></pre></td></tr></table></figure></p>
<p>从输出结果可以看出，由于使用了深克隆技术，附件对象也得以复制，因此用“==”比较原型对象的附件和克隆对象的附件时输出结果均为 false。深克隆技术实现了原型对象和克隆对象的完全独立，对任意克隆对象的修改都不会给其他对象产生影响，是一种更为理想的克隆实现方式。</p>
<p>拓展：<br>Java 语言提供的 Cloneable 接口和 Serializable 接口的代码非常简单，它们都是空接口，这种空接口也称为标识接口，标识接口中没有任何方法的定义，其作用是告诉 JRE 这些接口的实现类是否具有某个功能，如是否支持克隆、是否支持序列化等。</p>
]]></content>
      
        <categories>
            
            <category> design pattern </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[结构型设计模式(一) --适配器模式]]></title>
      <url>/2017/11/14/Java-Design-Pattern-Adapter/</url>
      <content type="html"><![CDATA[<blockquote>
<p><strong>前言：</strong>设计模式之结构型模式<br>软件模式与具体的应用领域无关,也就是说无论你从事的是移动应用开发、桌面应用开发、Web 应用开发还是嵌入式软件的开发,都可以使用软件模式。<br>在软件模式中,设计模式是研究最为深入的分支,设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案,它融合了众多专家的设计经验,已经在成千上万的软件中得以应用。1995 年,GoF 将收集和整理好的 23 种设计模式汇编成《设计模式:可复用面向对象软件的基础》一书,该书的出版也标志着设计模式正式成为面向对象(Object Oriented)软件工程的一个重要研究分支。<br><a id="more"></a><br>结构型设计模式统共七种:<strong>适配器模式、桥接模式、组合模式、装饰模式、外观模式、享元模式和代理模式</strong>。<br>今天来记录<strong>适配器模式</strong>。<br><strong>记录结构</strong><br>     <strong>1.用例引入（要解决的问题)</strong><br>     <strong>2.采用适配器模式解决问题</strong><br>        2.1 适配器模式概念及类图表示（概念，UML类图表示  ）<br>        2.2 适配器模式详细解决方案（代码层面）<br>    <strong>3.适配器模式分类</strong><br>         3.1 对象适配器<br>         3.2 类适配器<br>          3.3 缺省适配器<br>   <strong>4.适配器模式优缺点总结</strong></p>
</blockquote>
<h2 id="1-用例引入（要解决的问题"><a href="#1-用例引入（要解决的问题" class="headerlink" title="1.用例引入（要解决的问题)"></a>1.用例引入（要解决的问题)</h2><hr>
<pre><code>我的笔记本电脑的工作电压是 20 V,而我国的家庭用电是 220 V,如何让 20 V 的笔记本电脑能够在 220 V 的电压下工作?答案是引入一个电源适配器(AC Adapter),俗称充电器或变压器,有了这个电源适配器,生活用电和笔记本电脑即可兼容,如图所示:
</code></pre><p><img src="http://upload-images.jianshu.io/upload_images/2836699-d4a6768de1f67a91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="电脑电源适配器示意图"><br>简单来说：<br>      在软件开发中,有时也存在类似这种不兼容的情况,我们也可以像引入一个电源适配器一样引入一个称之为适配器的角色来协调这些存在不兼容的结构,这种设计方案即为适配器模式。</p>
<p><strong>要解决的问题：</strong><br>没有源码的算法库<br>      YY软件公司在很久以前曾开发了一个算法库,里面包含了一些常用的算法,例如排序算法和查找算法,在进行各类软件开发时经常需要重用该算法库中的算法。在为某学校开发教务管理系统时,开发人员发现需要对学生成绩进行排序和查找,该系统的设计人员已经开发了一个成绩操作接口 ScoreOperation,在该接口中声明了排序方法 sort(int[]) 和查找方法 search(int[], int),为了提高排序和查找的效率,开发人员决定重用算法库中的快速排序算法类 QuickSort 和二分查找算法类 BinarySearch,其中 QuickSort 的 quickSort(int[]) 方法实现了快速排序,BinarySearch 的 binarySearch (int[], int) 方法实现了二分查找。<br>由于某些原因,现在 Y Y公司开发人员已经找不到该算法库的源代码,无法直接通过复制和粘贴操作来重用其中的代码;部分开发人员已经针对 ScoreOperation 接口编程,如果再要求对该接口进行修改或要求大家直接使用 QuickSort 类和 BinarySearch 类将导致大量代码需要修改。<br>Sunny 软件公司开发人员面对这个没有源码的算法库,遇到一个幸福而又烦恼的问题:如何在既不修改现有接口又不需要任何算法库代码的基础上能够实现算法库的重用?<br>      通过分析,我们不难得知,现在 Sunny 软件公司面对的问题有点类似本章最开始所提到的电压问题,成绩操作接口 ScoreOperation 好比只支持 20 V 电压的笔记本,而算法库好比 220 V 的家庭用电,这两部分都没有办法再进行修改,而且它们原本是两个完全不相关的结构,如图所示:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-1c663b26e3d881bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题示意图"><br>现在我们需要 ScoreOperation 接口能够和已有算法库一起工作,让它们在同一个系统中能够兼容,最好的实现方法是增加一个类似电源适配器一样的适配器角色,通过适配器来协调这两个原本不兼容的结构。如何在软件开发中设计和实现适配器是本章我们将要解决的核心问题,下面就让我们正式开始学习这种用于解决不兼容结构问题的适配器模式。</p>
<h2 id="2-采用适配器模式解决问题"><a href="#2-采用适配器模式解决问题" class="headerlink" title="2.采用适配器模式解决问题"></a>2.采用适配器模式解决问题</h2><hr>
<blockquote>
<h4 id="2-1-适配器模式概念及类图表示（概念，UML类图表示"><a href="#2-1-适配器模式概念及类图表示（概念，UML类图表示" class="headerlink" title="2.1 适配器模式概念及类图表示（概念，UML类图表示  )"></a>2.1 适配器模式概念及类图表示（概念，UML类图表示  )</h4><pre><code>与电源适配器相似,在适配器模式中引入了一个被称为适配器(Adapter)的包装类,而它所包装的对象称为适配者(Adaptee),即被适配的类。适配器的实现就是把客户类的请求转化为对适配者的相应接口的调用。也就是说:当客户类调用适配器的方法时,其实在适配器类的内部将调用适配者类的方法,而这个过程对客户类是透明的,客户类并不直接访问适配者类。因此,适配器让那些由于接口不兼容而不能交互的类可以一起工作。
</code></pre><p>适配器模式可以将一个类的接口和另一个类的接口匹配起来,而无须修改原来的适配者接口和抽象目标类接口。适配器模式定义如下:<br><strong>适配器模式(Adapter Pattern):</strong>将一个接口转换成客户希望的另一个接口,使接口不兼容的那些类可以一起工作,其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式,也可以作为对象结构型模式。<br><strong>适配器模式类图表示：</strong><br>在适配器模式中,我们通过增加一个新的适配器类来解决接口不兼容的问题,使得原本没有任何关系的类可以协同工作。根据适配器类与适配者类的关系不同,适配器模式可分为对象适配器和类适配器两种,在对象适配器模式中,适配器与适配者之间是关联关系;在类适配器模式中,适配器与适配者之间是继承(或实现)关系。在实际开发中,对象适配器的使用频率更高,对象适配器模式结构如图所示:<br><img src="http://upload-images.jianshu.io/upload_images/2836699-9cfd9c1bf4da3154.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="对象适配器类图.png"><br>在对象适配器模式结构图中包含如下几个角色:<br>Target(目标抽象类):目标抽象类定义客户所需接口,可以是一个抽象类或接口,也可以是具体类。</p>
<ul>
<li><strong>Target(目标抽象类):</strong>目标抽象类定义客户所需接口,可以是一个抽象类或接口,也可以是具体类。</li>
<li><strong>Adapter(适配器类):</strong>适配器可以调用另一个接口,作为一个转换器,对Adaptee和Target进行适配,适配器类是适配器模式的核心,在对象适配器中,它通过继承Target并关联一个Adaptee对象使二者产生联系。</li>
<li><strong>Adaptee(适配者类):</strong>适配者即被适配的角色,它定义了一个已经存在的接口,这个接口需要适配,适配者类一般是一个具体类,包含了客户希望使用的业务方法,在某些情况下可能没有适配者类的源代码。</li>
</ul>
<hr>
<p><strong>       根据对象适配器模式结构图,在对象适配器中,客户端需要调用 request() 方法,而适配者类 Adaptee 没有该方法,但是它所提供的 specificRequest() 方法却是客户端所需要的。为了使客户端能够使用适配者类,需要提供一个包装类 Adapter,即适配器类。这个包装类包装了一个适配者的实例,从而将客户端与适配者衔接起来,在适配器的 request() 方法中调用适配者的 specificRequest() 方法。因为适配器类与适配者类是关联关系(也可称之为委派关系),所以这种适配器模式称为对象适配器模式。</strong></p>
<h4 id="2-2-适配器模式详细解决方案（代码层面）"><a href="#2-2-适配器模式详细解决方案（代码层面）" class="headerlink" title="2.2 适配器模式详细解决方案（代码层面）"></a>2.2 适配器模式详细解决方案（代码层面）</h4><p>YY软件公司开发人员决定使用适配器模式来重用算法库中的算法,其基本结构如图 9-4 所示:<br><img src="http://upload-images.jianshu.io/upload_images/2836699-121173e1af8246cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="详细解决方案 UML类图--算法库重用.png"><br>       在图中,ScoreOperation 接口充当抽象目标,QuickSort 和 BinarySearch 类充当适配者,OperationAdapter 充当适配器。完整代码如下所示:<br><strong>抽象成绩操作类:目标接口</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ScoreOperation</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span> array[]); <span class="comment">//成绩排序</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> key)</span></span>; <span class="comment">//成绩查找</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<p><strong>快速排序类:适配者= 被适配的类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] quickSort(<span class="keyword">int</span> array[]) &#123;</div><div class="line">        sort(array,<span class="number">0</span>,array.length-<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> array;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> q=<span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span>(p&lt;r) &#123;</div><div class="line">             q=partition(array,p,r);</div><div class="line">             sort(array,p,q-<span class="number">1</span>);</div><div class="line">             sort(array,q+<span class="number">1</span>,r);&#125;</div><div class="line">     &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> p, <span class="keyword">int</span> r)</span> </span>&#123;</div><div class="line">         <span class="keyword">int</span> x=a[r];</div><div class="line">         <span class="keyword">int</span> j=p-<span class="number">1</span>;</div><div class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i=p;i&lt;=r-<span class="number">1</span>;i++) &#123;</div><div class="line">             <span class="keyword">if</span> (a[i]&lt;=x) &#123;</div><div class="line">                 j++;</div><div class="line">                 swap(a,j,i);&#125;</div><div class="line">            &#125;</div><div class="line">         swap(a,j+<span class="number">1</span>,r);<span class="keyword">return</span> j+<span class="number">1</span>;</div><div class="line">     &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</div><div class="line">         <span class="keyword">int</span> t = a[i];</div><div class="line">         a[i] = a[j];</div><div class="line">         a[j] = t;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>二分查找类:适配者=被适配的类</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">            <span class="keyword">int</span> low = <span class="number">0</span>;</div><div class="line">            <span class="keyword">int</span> high = array.length -<span class="number">1</span>;</div><div class="line">            <span class="keyword">while</span>(low &lt;= high) &#123;</div><div class="line">                 <span class="keyword">int</span> mid = (low + high) / <span class="number">2</span>;</div><div class="line">                 <span class="keyword">int</span> midVal = array[mid];</div><div class="line">                 <span class="keyword">if</span>(midVal &lt; key) &#123;</div><div class="line">                     low = mid +<span class="number">1</span>;</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (midVal &gt; key) &#123;</div><div class="line">                    high = mid -<span class="number">1</span>;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//找到元素返回1&#125;</span></div><div class="line">                &#125;</div><div class="line">                    <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">//未找到元素返回-1&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>操作适配器:适配器</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">OperationAdapter</span> <span class="keyword">implements</span> <span class="title">ScoreOperation</span> </span>&#123;</div><div class="line">     <span class="keyword">private</span> QuickSort sortObj; <span class="comment">//定义适配者QuickSort对象private    </span></div><div class="line">     BinarySearch searchObj; <span class="comment">//定义适配者BinarySearch对象</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">OperationAdapter</span><span class="params">()</span> </span>&#123;</div><div class="line">         sortObj = <span class="keyword">new</span> QuickSort();</div><div class="line">         searchObj =    <span class="keyword">new</span> BinarySearch();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span>[] sort(<span class="keyword">int</span> array[]) &#123;</div><div class="line">         <span class="comment">//调用适配者类QuickSort的排序方  法</span></div><div class="line">         <span class="keyword">return</span> sortObj.quickSort(array); </div><div class="line">     &#125;</div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> array[],<span class="keyword">int</span> key)</span> </span>&#123;</div><div class="line">         <span class="keyword">return</span> searchObj.binarySearch(array,key); <span class="comment">//调用适配者类BinarySearch的查找方法</span></div><div class="line">     &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>为了让系统具备良好的灵活性和可扩展性,我们引入了工具类 XMLUtil 和配置文件,其中,XMLUtil 类的代码如下所示:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import javax.xml.parsers.*;</div><div class="line">import org.w3c.dom.*;</div><div class="line">import org.xml.sax.SAXException;</div><div class="line">import java.io.*;</div><div class="line">class XMLUtil &#123;</div><div class="line">     public static Object getBean() &#123;try &#123;</div><div class="line">     //创建文档对象DocumentBuilderFactory dFactory =  DocumentBuilderFactory.newInstance();</div><div class="line">     DocumentBuilder builder = dFactory.newDocumentBuilder();</div><div class="line">     Document doc;</div><div class="line">     doc = builder.parse(new File(&quot;config.xml&quot;));</div><div class="line">     //获取包含类名的文本节点</div><div class="line">     NodeList nl = doc.getElementsByTagName(&quot;className&quot;);</div><div class="line">     Node  classNode=nl.item(0).getFirstChild();</div><div class="line">     String cName=classNode.getNodeValue();</div><div class="line">     //通过类名生成实例对象并将其返回Class c=Class.forName(cName);</div><div class="line">     Object obj=c.newInstance();</div><div class="line">            return obj;</div><div class="line">      &#125;catch(Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">            return null;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置文件 config.xml 中存储了适配器类的类名,代码如下所示:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">className</span>&gt;</span>OperationAdapter<span class="tag">&lt;/<span class="name">className</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>编写如下客户端测试代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">class Client &#123;</div><div class="line">    public static void main(String args[]) &#123;</div><div class="line">        ScoreOperation operation;  //针对抽象目标接口编程</div><div class="line">        operation = (ScoreOperation)XMLUtil.getBean(); //读取配置文件，反射生成对象</div><div class="line">        int scores[] = &#123;84,76,50,69,90,91,88,96&#125;; //定义成绩数组</div><div class="line">        int result[];</div><div class="line">        int score;</div><div class="line">        System.out.println(&quot;成绩排序结果：&quot;);</div><div class="line">        result = operation.sort(scores);</div><div class="line">        //遍历输出成绩</div><div class="line">        for(int i : scores) &#123;</div><div class="line">            System.out.print(i + &quot;,&quot;);</div><div class="line">        &#125;</div><div class="line">        System.out.println();</div><div class="line">        System.out.println(&quot;查找成绩90：&quot;);</div><div class="line">        score = operation.search(result,90);</div><div class="line">        if (score != -1) &#123;</div><div class="line">            System.out.println(&quot;找到成绩90。&quot;);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            System.out.println(&quot;没有找到成绩90。&quot;);</div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;查找成绩92：&quot;);</div><div class="line">        score = operation.search(result,92);</div><div class="line">        if (score != -1) &#123;</div><div class="line">            System.out.println(&quot;找到成绩92。&quot;);</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">            System.out.println(&quot;没有找到成绩92。&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">成绩排序结果：</div><div class="line">50,69,76,84,88,90,91,96,</div><div class="line">查找成绩90：</div><div class="line">找到成绩90。</div><div class="line">查找成绩92：</div><div class="line">没有找到成绩92。</div></pre></td></tr></table></figure></p>
<p>在本实例中使用了对象适配器模式，同时引入了配置文件，将适配器类的类名存储在配置文件中。如果需要使用其他排序算法类和查找算法类，可以增加一个新的适配器类，使用新的适配器来适配新的算法，原有代码无须修改。通过引入配置文件和反射机制，可以在不修改客户端代码的情况下使用新的适配器，无须修改源代码，符合“开闭原则”。</p>
<h2 id="3-适配器模式分类"><a href="#3-适配器模式分类" class="headerlink" title="3.适配器模式分类"></a>3.适配器模式分类</h2><hr>
<p><strong>3.1 对象适配器</strong><br>      上文中记录的便是对象适配器，可以参照上问来进行强化记忆。<br><strong>3.2 类适配器</strong><br>      除了对象适配器模式之外，适配器模式还有一种形式，那就是类适配器模式，类适配器模式和对象适配器模式最大的区别在于适配器和适配者之间的关系不同，对象适配器模式中适配器和适配者之间是关联关系，而类适配器模式中适配器和适配者是继承关系，类适配器模式结构如图所示：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-33f3596ebe76cd16.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="类适配器结构图.jpg"><br>根据类适配器模式结构图，适配器类实现了抽象目标类接口 Target，并继承了适配者类，在适配器类的 request() 方法中调用所继承的适配者类的 specificRequest() 方法，实现了适配。<br>典型的类适配器代码如下所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span> <span class="keyword">extends</span> <span class="title">Adaptee</span> <span class="keyword">implements</span> <span class="title">Target</span> </span>&#123;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">request</span><span class="params">()</span> </span>&#123;  </div><div class="line">        specificRequest();  <span class="comment">//此方法是Adaptee类中定义的实例方法</span></div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由于<a href="http://lib.csdn.net/base/javaee" target="_blank" rel="external">Java</a>、C#等语言不支持多重类继承，因此类适配器的使用受到很多限制，例如如果目标抽象类Target不是接口，而是一个类，就无法使用类适配器；此外，如果适配者Adapter为最终(Final)类，也无法使用类适配器。在Java等面向对象编程语言中，大部分情况下我们使用的是对象适配器，类适配器较少使用。</p>
<p><strong>3.3 缺省适配器</strong><br>      缺省适配器模式是适配器模式的一种变体，其应用也较为广泛。缺省适配器模式的定义如下： 缺省适配器模式(Default Adapter Pattern)：当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可以选择性地覆盖父类的某些方法来实现需求，它适用于不想使用一个接口中的所有方法的情况，又称为单接口适配器模式。<br>缺省适配器模式结构如图所示：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-daaca51fe384f8d1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="缺省适配器.jpg"><br>在缺省适配器模式中，包含如下三个角色：</p>
<ul>
<li><strong>ServiceInterface（适配者接口）</strong>：它是一个接口，通常在该接口中声明了大量的方法。</li>
<li><strong>AbstractServiceClass（缺省适配器类）</strong>：它是缺省适配器模式的核心类，使用空方法的形式实现了在 ServiceInterface 接口中声明的方法。通常将它定义为抽象类，因为对它进行实例化没有任何意义。</li>
<li><strong>ConcreteServiceClass（具体业务类）</strong>：它是缺省适配器类的子类，在没有引入适配器之前，它需要实现适配者接口，因此需要实现在适配者接口中定义的所有方法，而对于一些无须使用的方法也不得不提供空实现。在有了缺省适配器之后，可以直接继承该适配器类，根据需要有选择性地覆盖在适配器类中定义的方法。</li>
</ul>
<h2 id="4-适配器模式优缺点总结"><a href="#4-适配器模式优缺点总结" class="headerlink" title="4.适配器模式优缺点总结"></a>4.适配器模式优缺点总结</h2><hr>
<p><strong>无论是对象适配器模式还是类适配器模式都具有如下优点:</strong></p>
<ul>
<li><p>将目标类和适配者类解耦，通过引入一个适配器类来重用现有的适配者类，无须修改原有结构。</p>
</li>
<li><p>增加了类的透明性和复用性，将具体的业务实现过程封装在适配者类中，对于客户端类而言是透明的，而且提高了适配者的复用性，同一个适配者类可以在多个不同的系统中复用。</p>
</li>
<li><p>灵活性和扩展性都非常好，通过使用配置文件，可以很方便地更换适配器，也可以在不修改原有代码的基础上增加新的适配器类，完全符合“开闭原则”。</p>
</li>
</ul>
<p><strong>类适配器模式还有如下优点：</strong></p>
<ul>
<li>由于适配器类是适配者类的子类，因此可以在适配器类中置换一些适配者的方法，使得适配器的灵活性更强。</li>
</ul>
<p><strong>对象适配器模式还有如下优点:</strong></p>
<ul>
<li><p>一个对象适配器可以把多个不同的适配者适配到同一个目标；</p>
</li>
<li><p>可以适配一个适配者的子类，由于适配器和适配者之间是关联关系，根据“里氏代换原则”，适配者的子类也可通过该适配器进行适配。</p>
</li>
</ul>
<hr>
<p><strong>类适配器模式的缺点：</strong></p>
<ul>
<li><p>对于 Java、C# 等不支持多重类继承的语言，一次最多只能适配一个适配者类，不能同时适配多个适配者；</p>
</li>
<li><p>适配者类不能为最终类，如在 Java 中不能为 final 类，C# 中不能为 sealed 类；</p>
</li>
<li>在 Java、C# 等语言中，类适配器模式中的目标抽象类只能为接口，不能为类，其使用有一定的局限性。</li>
</ul>
<p><strong>对象适配器模式的缺点:</strong></p>
<ul>
<li>与类适配器模式相比，要在适配器中置换适配者类的某些方法比较麻烦。如果一定要置换掉适配者类的一个或多个方法，可以先做一个适配者类的子类，将适配者类的方法置换掉，然后再把适配者类的子类当做真正的适配者进行适配，实现过程较为复杂。</li>
</ul>
<p><strong>适用场景</strong><br>在以下情况下可以考虑使用适配器模式：</p>
<ul>
<li>系统需要使用一些现有的类，而这些类的接口（如方法名）不符合系统的需要，甚至没有这些类的源代码。</li>
<li>想创建一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> design pattern </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[结构型设计模式--代理模式（静态与动态）]]></title>
      <url>/2017/11/14/Java-Design-Patter-proxy/</url>
      <content type="html"><![CDATA[<h2 id="代理简述："><a href="#代理简述：" class="headerlink" title="代理简述："></a>代理简述：</h2><hr>
<p>代理是一个动词，动词之间会有产生关系两者。代理这个词产生关系的两者就是：realSubject(被代理者)，proxySubject（代理者）。举个例子：火车站，与火车站代售点。<br>火车站可以进行售票工作，而火车站代售点可以实现代售车票。但是代售点还有其他的功能，比如说支持预约。这个是火车站所不具有的功能。<br>简单理解<strong>代理模式</strong>就是：<strong>代理者代替被代理者去完成一些功能，在完成一些功能之前可以做一些预处理，完成之后可以做一些后置处理。</strong><br>再看一个程序中的例子：<strong>AOP就是建立在代理的思想之上的，AOP面向切面编程，何为切面，就是你程序中的主要逻辑，在这些主要逻辑产生的地方设置切点，在切点的地方设置一个注入一些非主要功能，这个就是面向切面编程。面向切面编程是以动态代理为底层实现的</strong><br><a id="more"></a></p>
<h2 id="java代理模式应用"><a href="#java代理模式应用" class="headerlink" title="java代理模式应用"></a>java代理模式应用</h2><hr>
<p><strong>&lt;1.静态代理–继承实现：</strong><br>java中静态代理的实现方式有两种：一种基于继承思想，一种基于聚合。<br>首先描述基于继承思想的静态代理：（每段代码下方会有讲解，代码内会有注释）<br>代码如下：<br>1.定义一个接口：Moveable<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public interface Moveable &#123;</div><div class="line">      void move(); //定义抽象方法 move()，表示移动功能</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.定义一个<strong>被代理类</strong>Car类实现这个Moveable接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">public class Car implements Moveable&#123;</div><div class="line">       //实现move方法</div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		try &#123;</div><div class="line">			Thread.sleep(new Random().nextInt(1000));</div><div class="line">			System.out.println(&quot;汽车行驶中&quot;);</div><div class="line">		&#125; catch (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.在定义一个<strong>代理类</strong>Car2继承自Car<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">/**</div><div class="line"> * @author tao.liu</div><div class="line"> * 通过继承实现静态代理 丰富RealSubject的功能，Car2相当于ProxySubject</div><div class="line"> *</div><div class="line"> */</div><div class="line">public class Car2 extends Car&#123;</div><div class="line">    </div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		long starttime = System.currentTimeMillis();</div><div class="line">		System.out.println(&quot;汽车开始行驶&quot;);</div><div class="line">		super.move();</div><div class="line">		long endtime = System.currentTimeMillis();</div><div class="line">		System.out.println(&quot;汽车行驶结束，行驶了&quot;+(endtime-starttime)+&quot; 毫秒&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解释：此程序在调用真实被代理类之前，对move花费的时间进行记录。</p>
<p>4.客户端调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">	 /*采用car2继承car 的方式实现代理 </div><div class="line">	  *随着功能的增加会出现更多的继承才能满足需求</div><div class="line">	  */</div><div class="line">	  Moveable moveable = new Car2();</div><div class="line">	  moveable.move();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>程序输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">汽车开始行驶</div><div class="line">汽车行驶中</div><div class="line">汽车行驶结束，行驶了287 毫秒</div></pre></td></tr></table></figure></p>
<p>此种静态代理采用的是代理类（proxySubject）<strong>继承</strong>被代理类（realSubject）而实现的。<br><strong>分析弊端：</strong><br><strong>1.</strong>假设现在我需要在汽车运行<strong>前后</strong>加上日志记录的功能，在这种方式（继承）下，我需要新建一个（Car3继承Car）的代理类完成这件事情。<br><strong>2.</strong>再假设我现在还需要在运行前加上启动汽车的功能，我们需要再建立一个（Car4继承Car）的代理类来完成这个事情。<br><strong>3.</strong>再假设，我需要在汽车运行之前先启动汽车，再进行日志记录，我们需要再建立一个Car5来继承Car3.<br>综上所述，随着功能的叠加，类的数量也会呈爆炸式增长。<br><strong>解决这个问题就需要用聚合来实现类的代理</strong></p>
<hr>
<p><strong>&lt;2.静态代理–聚合实现：</strong><br>代码如下：<br>建立move功能定义接口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public interface Moveable &#123;</div><div class="line">      void move();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立实现move功能的Car类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">public class Car implements Moveable&#123;</div><div class="line">    </div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		try &#123;</div><div class="line">			Thread.sleep(new Random().nextInt(1000));</div><div class="line">			System.out.println(&quot;汽车行驶中&quot;);</div><div class="line">		&#125; catch (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>建立日志代理类CarLogProxy<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public class CarLogProxy implements Moveable &#123;</div><div class="line">    private Moveable moveable;//将movable 类型的对象聚合进来，其实movable是一个接口，这里用到了多态的概念。</div><div class="line">    </div><div class="line">    public CarLogProxy(Moveable moveable) &#123;</div><div class="line">    	super();</div><div class="line">    	this.moveable = moveable;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		System.out.println(&quot;日志开始...&quot;);</div><div class="line">		moveable.move();</div><div class="line">		System.out.println(&quot;日志结束...&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着建立行驶时间CarTimeProxy代理类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line">//CarTimeProxy 为 属于Moveable 的类型对象的代理类</div><div class="line">//基于聚合的方式</div><div class="line">public class CarTimeProxy implements Moveable&#123;</div><div class="line">    private Moveable moveable;//同上所示</div><div class="line">    </div><div class="line">    public CarTimeProxy(Moveable moveable) &#123;</div><div class="line">    	super();</div><div class="line">    	this.moveable = moveable;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		long starttime = System.currentTimeMillis();</div><div class="line">		System.out.println(&quot;汽车开始行驶&quot;);</div><div class="line">		moveable.move();</div><div class="line">		long endtime = System.currentTimeMillis();</div><div class="line">		System.out.println(&quot;汽车行驶结束，行驶了&quot;+(endtime-starttime)+&quot; 毫秒&quot;);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">	  Car car1 = new Car();</div><div class="line">	  CarLogProxy carLogProxy = new CarLogProxy(car1);</div><div class="line">	  CarTimeProxy carTimeProxy = new CarTimeProxy(carLogProxy);</div><div class="line">	</div><div class="line">	  carTimeProxy.move();</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   //引入问题:如果现在更多的realsubject 需要事件代理，那么现在需要新建多个代理类吗？类膨胀。</div><div class="line">   //动态产生代理，实现对不同类，不同方法的代理。</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">汽车开始行驶</div><div class="line">日志开始...</div><div class="line">汽车行驶中</div><div class="line">日志结束...</div><div class="line">汽车行驶结束，行驶了529 毫秒</div></pre></td></tr></table></figure></p>
<p>现在我们这样测试：（请注意如下程序与上方程序的不同点：）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.static_proxy;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">	 //采用聚合的方式实现的代理，代理之间也可以互相调用</div><div class="line">	  Car car1 = new Car();</div><div class="line">	  CarTimeProxy carTimeProxy = new CarTimeProxy(car1);</div><div class="line">	  CarLogProxy carLogProxy = new CarLogProxy(carTimeProxy);</div><div class="line">	 </div><div class="line">	  carLogProxy.move();</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   //引入问题，如果现在更多的不同类型的realsubject：比如或火车的，汽车的类 需要被代理，那么现在需要新建多个代理类吗？类膨胀。</div><div class="line">   //动态产生代理，实现对不同类，不同方法的代理。</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">日志开始...</div><div class="line">汽车开始行驶</div><div class="line">汽车行驶中</div><div class="line">汽车行驶结束，行驶了649 毫秒</div><div class="line">日志结束...</div></pre></td></tr></table></figure></p>
<p><strong>优点</strong>：这样的话就可以实现多个代理对象之间的相互调用相互聚合。从而比用继承方式实现的静态代理更优。减少了一个维度。</p>
<p><strong>引入问题，如果现在更多的不同类型的realsubject：比如或火车的，汽车的类 需要被代理，那么现在需要新建多个代理类吗？类膨胀问题产生。<br>  动态产生代理，实现对不同类，不同方法的代理。</strong></p>
<hr>
<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>直接上代码：<br>首先建立定义接口的Moveable:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.dynamic_proxy;</div><div class="line"></div><div class="line">public interface Moveable &#123;</div><div class="line">    void move();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着定义realsubject（被代理类）：泛指所有类型的被代理类。可以是Car,Subway，etc.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.dynamic_proxy;</div><div class="line"></div><div class="line">import java.util.Random;</div><div class="line"></div><div class="line">public class Car implements Moveable &#123;</div><div class="line"></div><div class="line">	@Override</div><div class="line">	public void move() &#123;</div><div class="line">		try &#123;</div><div class="line">			Thread.sleep(new Random().nextInt(1000));</div><div class="line">			System.out.println(&quot;汽车行驶中&quot;);</div><div class="line">		&#125; catch (InterruptedException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接着建立实现（implements）InvocationHandler接口的类：<br>InvocationHandler,中定义了Object invoke(Object proxy, Method method, Object[] args) 方法。参数解释如下图代码中注释<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.dynamic_proxy;</div><div class="line"></div><div class="line">import java.lang.reflect.InvocationHandler;</div><div class="line">import java.lang.reflect.Method;</div><div class="line"></div><div class="line">public class MyHandler implements InvocationHandler &#123;</div><div class="line">    private Object target;//被代理对象</div><div class="line">    </div><div class="line">    public MyHandler(Object target) &#123;</div><div class="line">    	this.target = target;</div><div class="line">	&#125;</div><div class="line">    </div><div class="line">	/* (non-Javadoc)</div><div class="line">	 * @see java.lang.reflect.InvocationHandler#invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[])</div><div class="line">	 * proxy--指被代理的对象（感觉java这个参数的名字并不是很好）</div><div class="line">	 * method--被代理对象的方法</div><div class="line">	 * args:被代理对象的方法参数</div><div class="line">	 */</div><div class="line">	@Override</div><div class="line">	public Object invoke(Object proxy, Method method, Object[] args) </div><div class="line">			throws Throwable &#123;</div><div class="line">		System.out.println(&quot;汽车开始运行了...&quot;);</div><div class="line">		method.invoke(target, args);//运行被代理对象的方法，采用反射的机制。</div><div class="line">		System.out.println(&quot;汽车运行结束...&quot;);</div><div class="line">		return null;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这一步只是完成了被代理对象方法的扩充，还没有产生真实的代理对象。<br>再看测试类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">package com.feixun.designerpattern.proxy.dynamic_proxy;</div><div class="line"></div><div class="line">import java.lang.reflect.InvocationHandler;</div><div class="line">import java.lang.reflect.Proxy;</div><div class="line"></div><div class="line">public class TestDynamicProxy &#123;</div><div class="line">   public static void main(String[] args) &#123;</div><div class="line">	  Car car = new Car();</div><div class="line">	  InvocationHandler handler = new MyHandler(car);</div><div class="line">	  Class&lt;?&gt; cs = car.getClass();</div><div class="line">	  /*</div><div class="line">	   * @param ：  classloader 被代理对象的类加载器</div><div class="line">	   * @param : interfaces 被代理对象实现的接口</div><div class="line">	   * @param ：  Invocationhandler handler /子类</div><div class="line">	   */</div><div class="line">	  Moveable moveable=(Moveable)Proxy.newProxyInstance(cs.getClassLoader(),</div><div class="line">			  cs.getInterfaces(), handler);//这一步动态生成代理对象 moveable</div><div class="line">	  moveable.move();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">汽车开始运行了...</div><div class="line">汽车行驶中</div><div class="line">汽车运行结束...</div></pre></td></tr></table></figure></p>
<p><strong>可以看出：动态代理解决了对不同委托类产生代理对象的问题，假设现在我有Subway类，我要实现被代理，我只需要Subway实现Moveable，然后在测试类中更改几行代码就好，所以解决了聚合静态代理产生的问题,又将问题复杂度减少了一个维度。</strong><br><strong>但是jdk动态代理也有问题：委托类想要实现自己的代理类，必须实现接口，如果有类没有实现接口，就不能使用JDK代理。</strong><br>完</p>
]]></content>
      
        <categories>
            
            <category> design pattern </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Node.js EventEmitter (触发器)]]></title>
      <url>/2017/11/14/EventEmitter/</url>
      <content type="html"><![CDATA[<h2 id="Node-js-EventEmitter"><a href="#Node-js-EventEmitter" class="headerlink" title="Node.js EventEmitter"></a>Node.js EventEmitter</h2><hr>
<p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列.<br>Node.js里面的许多对象都会分发事件：一个net.Server对象会在每次有新连接时分发一个事件， 一个fs.readStream对象会在文件被打开的时候发出一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。<br><a id="more"></a></p>
<h2 id="EventEmitter-类"><a href="#EventEmitter-类" class="headerlink" title="EventEmitter 类"></a>EventEmitter 类</h2><hr>
<p>events 模块只提供了一个内部类： events.EventEmitter。EventEmitter 的核心就是事件触发与事件监听器功能的封装。你可以通过require(“events”);来访问该模块。创建一个文件叫做<strong>emitter.js</strong>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//创建EventEmitter类</div><div class="line">var EventEmitter = require(&apos;events&apos;).EventEmitter();</div><div class="line">//创建eventEmitter对象</div><div class="line">var eventEmitter = new EventEmitter();</div><div class="line">eventEmitter.on(&apos;bomb&apos;,function()&#123;</div><div class="line">      //观察者为匿名函数，事件为bomb</div><div class="line">      console.log(&apos;bomb已经引爆&apos;);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">//创建bomb之后就是要引爆它了，这里牵扯到事件的触发</div><div class="line">setTimeout(function()&#123;</div><div class="line">      eventEmitter.emit(&apos;bomb&apos;);</div><div class="line">&#125;,1000)；</div></pre></td></tr></table></figure></p>
<p>执行结果如下：<br>运行这段代码，1 秒后控制台输出了 <strong>‘事件触发’</strong>。其原理是 event 对象注册了事件 bomb 的一个监听器，然后我们通过 setTimeout 在 1000 毫秒以后 event 对象触发事件bomb，此时会调用bomb的监听器(匿名函数)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node emitter.js</div><div class="line">bomb已经引爆</div></pre></td></tr></table></figure></p>
<p>eventEmitter 的每个事件由一个事件名和若干个参数组成，事件名是一个字符串，通常表达一定的语义。对于每个事件，EventEmitter 支持 若干个事件监听器。<br>当事件触发时，注册到这个事件的事件监听器被依次调用，事件参数作为回调函数参数传递。<br>让我们以下面的例子解释这个过程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> var event = require(&apos;events&apos;);</div><div class="line"> var eventEmitter = new event.EventEmitter();</div><div class="line"></div><div class="line"> eventEmitter.on(&apos;bobm&apos;,function(args1,args2)&#123;</div><div class="line">       console.log(&apos;bomb引燃，引燃使用的是:&apos;+args1+&quot; 和&quot;+arg2)；</div><div class="line"> &#125;);</div><div class="line"></div><div class="line">eventEmitter.on(&apos;bobm&apos;,function(args1,args2)&#123;</div><div class="line">       console.log(&apos;bomb引燃，使用的是:&apos;+args1+&quot;或者 &quot;+arg2)；</div><div class="line"> &#125;);</div></pre></td></tr></table></figure></p>
<p>执行以上代码，运行的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ node event.js</div><div class="line">listener1 arg1 参数 arg2 参数</div><div class="line">listener2 arg1 参数 arg2 参数</div></pre></td></tr></table></figure></p>
<p>以上例子中，emitter 为事件 someEvent 注册了两个事件监听器，然后触发了 someEvent 事件。<br>运行结果中可以看到两个事件监听器回调函数被先后调用。 这就是EventEmitter最简单的用法。<br>EventEmitter 提供了多个属性，如 <strong>on</strong> 和 <strong>emit</strong>。<strong>on</strong> 函数用于绑定事件函数，<strong>emit</strong> 属性用于触发一个事件。</p>
]]></content>
      
        <categories>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Node </tag>
            
            <tag> 触发器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[一致性哈希算法在分布式缓存中的应用]]></title>
      <url>/2017/11/14/%E4%B8%80%E8%87%B4%E6%80%A7hash%E9%97%AD%E7%8E%AF%E7%AE%97%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><hr>
<blockquote>
<p>介绍一致性hash算法（Consistent Hashing）及其在分布式缓存中的应用，以及对一致性hash算法原理的介绍。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><hr>
<blockquote>
<p>假设我们有一个网站，最近发现随着流量增加，服务器压力越来越大，之前直接读写数据库的方式不太给力了，于是我们想引入Redis作为缓存机制。现在我们一共有三台机器可以作为Redis服务器，如下图所示。<br><img src="http://upload-images.jianshu.io/upload_images/2836699-18cba017e9d428b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分布式缓存示意图.png"></p>
</blockquote>
<h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><hr>
<p>一般来说我们在大规模访问，大并发流量下都会使用到分布式缓存，即将廉价机器部署在同一个子网内，形成多机器集群，然后通过负载均衡以及一定的路由规则进行读请求的分流，将请求映射到<br>对应的缓存服务器上。如何对<strong>请求与缓存服务器之间进行精准映射,以及优雅的扩展，剔除缓存服务器</strong>是分布式缓存部署的痛点。<br>接下来我们会对解决以上问题的一些传统做法进行分析。<br><a id="more"></a></p>
<blockquote>
<p><strong>1.请求与缓存服务器之间精准映射问题.</strong></p>
<ul>
<li>最简策略-随机选取：<br>含义：将每一次Redis请求随机发送到一台Redis服务器.<br>产生的问题： <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1.同一份数据可能被存在不同的机器上而造成数据冗余。</div><div class="line">2.有可能某数据已经被缓存但是访问却没有命中，因为无法保证对相同key的所有访问都被发送到相同的服务器。</div><div class="line">  因此，随机策略无论是时间效率还是空间效率都非常不好。</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<ul>
<li>解决保证相同key每次访问同一台Redis服务器-计算哈希：<br>含义：保证对相同key的访问会被发送到相同的服务器。<br>方案描述：<br>对于每次访问，可以按如下算法计算其哈希值：<br>h = Hash(key) % 3<br>其中Hash是一个从字符串到正整数的哈希映射函数。这样，如果我们将Redis Server分别编号为0、1、2，那么就可以根据上式和key计算出服务器编号h，然后去访问。<br>这个方法虽然解决了上面提到的两个问题，但是存在一些其它的问题。如果将上述方法抽象，可以认为通过：<br>h = Hash(key) % N<br>这个算式计算每个key的请求应该被发送到哪台服务器，其中N为服务器的台数，并且服务器按照0 – (N-1)编号。</li>
</ul>
<blockquote>
<p><strong>2.优雅的扩展，剔除缓存服务器问题</strong><br>     对于根据请求的key进行hash 运算定位Redis缓存服务器产生的问题： 容错性和扩展性将会变得极差.</p>
<ul>
<li>容错性：指当系统中某一个或几个服务器变得不可用时，整个系统是否可以正确高效运行；</li>
<li>扩展性：指当加入新的服务器后，整个系统是否可以正确高效运行。<br>现假设有一台服务器宕机了，那么为了填补空缺，要将宕机的服务器从编号列表中移除，后面的服务器按顺序前移一位并将其编号<br>值减一，此时每个key就要按h = Hash(key) % (N-1)重新计算；同样，如果新增了一台服务器，虽然原有服务器编号不用改变，<br>但是要按h = Hash(key) % (N+1)重新计算哈希值。因此系统中一旦有服务器变更，大量的key会被<br>重定位到不同的服务器从而造成大量的缓存不命中。<br>而这种情况在分布式系统中是非常糟糕的。</li>
</ul>
</blockquote>
<p>一个设计良好的分布式哈希方案应该具有良好的单调性，即服务节点的增减不会造成大量哈希重定位。一致性hash算法就是这样一种hash方案。</p>
<h2 id="解决方法－一致性hash算法"><a href="#解决方法－一致性hash算法" class="headerlink" title="解决方法－一致性hash算法"></a>解决方法－一致性hash算法</h2><hr>
<p><strong>算法简述</strong><br>一致性哈希算法（Consistent Hashing）最早在论文《<a href="http://www.akamai.com/dl/technical_publications/ConsistenHashingandRandomTreesDistributedCachingprotocolsforrelievingHotSpotsontheworldwideweb.pdf" target="_blank" rel="external">Consistent Hashing and Random Trees: Distributed Caching Protocols for Relieving Hot Spots on the World Wide Web</a>》中被提出。简单来说，一致性哈希将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0 - 2的32次方<br>-1（即哈希值是一个32位无符号整形），整个哈希空间环如下：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-761c7ac38078a2e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间.png"></p>
<p>整个空间按顺时针方向组织。0和232-1在零点中方向重合。</p>
<p>下一步将各个服务器使用H进行一个哈希，具体可以选择服务器的ip或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中三台服务器使用ip地址哈希后在环空间的位置如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-cdb684dc8afcafbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (1).png"></p>
<p>接下来使用如下算法定位数据访问到相应服务器：将数据key使用相同的函数H计算出哈希值h，通根据h确定此数据在环上的位置，<strong>从此位置沿环顺时针“行走”</strong>，第一台遇到的服务器就是其应该定位到的服务器。</p>
<p>例如我们缓存服务器中有A、B、C、D四个key对应的数据对象，经过哈希计算后，在环空间上的位置如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-99c54dadceb7f18b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (2).png"></p>
<p>截止到现在似乎还没有什么觉得神奇的地方，请往下看：<br><strong>容错性与可扩展性分析</strong><br>下面分析一致性哈希算法的容错性和可扩展性。现假设Redis-2宕机了：<br><img src="http://upload-images.jianshu.io/upload_images/2836699-10c77e305faab998.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (3).png"><br>我们可以看到ACD节点并不受影响，只有B节点被重定向至Redis-0。</p>
<p>下面考虑另外一种情况，如果我们在系统中增加一台服务器Redis-3 Server：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-620c26159a2f672d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (4).png"><br>可以发现对于C这个key，重新定位至Redis-3 服务器，其他非C的key均不受影响。</p>
<p>综上所述，一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。</p>
<h2 id="数据倾斜问题"><a href="#数据倾斜问题" class="headerlink" title="数据倾斜问题"></a>数据倾斜问题</h2><hr>
<p><strong>解决办法-虚拟节点</strong><br>一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。例如我们的系统中有两台服务器，其环分布如下：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-c1d68874c041557d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (5).png"></p>
<p>此时必然造成大量数据集中到Redis-1上，而只有极少量会定位到Redis-0上。为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点。具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，我们决定为每台服务器计算三个虚拟节点，于是可以分别计算“Redis-1 #1”、“Redis-1 #2”、“Redis-1 #3”、“Redis-0 #1”、“Redis-0 #2”、“Redis-0 #3”的哈希值，于是形成六个虚拟节点：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-03901e612ee8c8fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一致性hash函数值空间 (6).png"></p>
<p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Redis-1#1”、“Redis-1#2”、“Redis-1#3”三个虚拟节点的数据均定位到Redis-1上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>目前一致性哈希基本成为了分布式系统组件的标准配置，例如Redis的各种客户端都提供内置的一致性哈希支持。本文只是简要介绍了这个算法的思想，以及在分布式应用中的应用场景。</p>
]]></content>
      
        <categories>
            
            <category> 分布式 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 缓存 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NoSQL－Redis入门(二)]]></title>
      <url>/2017/11/04/NoSql-Redis-2/</url>
      <content type="html"><![CDATA[<p><strong>Redis要点：</strong></p>
<blockquote>
<p>1.关键字(keys)用于标识一段数据的字符串<br>2.值(values)是一段任意的字节序列，Redis不会关注他们实质是什么<br>3.Redis展示了5种专门的数据结构<br>4.上面几点使得Redis快速而且容易使用，但Redis不适用于所有的应用场景</p>
</blockquote>
<h2 id="1-Redis的数据结构"><a href="#1-Redis的数据结构" class="headerlink" title="1.Redis的数据结构"></a>1.Redis的数据结构</h2><hr>
<p>每种数据结构的要点包括：</p>
<blockquote>
<p>1.是什么？<br>2.包含的有效方法<br>3.使用这些数据结构能处理哪些类型的特性和数据<br><a id="more"></a><br><strong>1.1 字符串(String)</strong><br>在Redis里,字符串是最基本的数据结构。<br>for example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set users:leto &quot;&#123;name: leto, planet: dune, likes: [spice]&#125;&quot;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>Redis是怎么知道我们是在使用哪个数据结构?其解决方法是,每个命令都相对应于一种特定的数据结构。例如,当你使用 set 命令,你就是将值存储到一个字符串数据结构里。而当你使用 hset 命令,你就是将值存储到一个散列数据结构里。考虑到Redis的关键字集很小,这样的机制具有相当的可管理性。<br>正如上述：<br>我们已经看到了一个常见的字符串使用案例,即通过关键字存储对象的实例。<br>我们可以通过下面的命令进行实操：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; set user:liutao &quot;&#123;name:liutao,age:23,likes[ad,dd]&#125;&quot;</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; get user:liutao</div><div class="line">&quot;&#123;name:liutao,age:23,likes[ad,dd]&#125;&quot;</div><div class="line">127.0.0.1:6379&gt; strlen user:liutao</div><div class="line">(integer) 33</div><div class="line">127.0.0.1:6379&gt; getrange user:liutao 27 40</div><div class="line">&quot;d,dd]&#125;&quot;</div><div class="line">127.0.0.1:6379&gt; append user:liutao &quot;,sex:male&quot;</div><div class="line">(integer) 42</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>get: 根据关键字获取关键字对应的值<br>strlen：获取关键字对应的值的长度<br>getrange：获取关键字对应的值从起始索引到末尾索引的值<br>append： 在关键字对应值末尾添加新的字符串</p>
</blockquote>
<p><strong>string类型是Redis最基本的数据类型，一个键最大能存储512MB。</strong></p>
<p><strong>1.2 Hash（哈希）</strong><br>Redis hash 是一个键值对集合<br>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2836699-aa4c5f6e39ebd3cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br>for example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; hmset user name zhangxiao age 23 sex famale</div><div class="line">OK</div><div class="line">127.0.0.1:6379&gt; hgetall user</div><div class="line">1) &quot;name&quot;</div><div class="line">2) &quot;zhangxiao&quot;</div><div class="line">3) &quot;age&quot;</div><div class="line">4) &quot;23&quot;</div><div class="line">5) &quot;sex&quot;</div><div class="line">6) &quot;famale&quot;</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>以上实例中 hash 数据类型存储了包含用户脚本信息的用户对象。 实例中我们使用了 Redis <strong>hmset,hgetall</strong> 命令，<strong>user</strong> 为键值。<br>每个 hash 可以存储 232<br> -1 键值对（40多亿）。</p>
<p><strong>1.3 List(列表)</strong><br>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。<br>for example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; lpush zhangxiao 13 175cm</div><div class="line">(integer) 4</div><div class="line">127.0.0.1:6379&gt; lrange zhangxiao 0 1</div><div class="line">1) &quot;175cm&quot;</div><div class="line">2) &quot;13&quot;</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>lpush 向redis集合中存储一系列字符串，使用lrange ［start］［end］ 获取相应的元素值。<br>列表最多可存储 232</p>
<ul>
<li>1 元素 (4294967295, 每个列表可存储40多亿)。</li>
</ul>
<p><strong>1.4 Set（集合）</strong><br>Redis的Set是string类型的无序集合。<br>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。<br>for example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; sadd ages 11</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; add ages 12</div><div class="line">(error) ERR unknown command &apos;add&apos;</div><div class="line">127.0.0.1:6379&gt; sadd ages 14</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; sadd ages 14</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; sadd ages 15</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; smembers ages</div><div class="line">1) &quot;11&quot;</div><div class="line">2) &quot;14&quot;</div><div class="line">3) &quot;15&quot;</div><div class="line">127.0.0.1:6379&gt;</div></pre></td></tr></table></figure></p>
<p>可以看到我们为ages集合添加了两次14 ，但是最终set集合中只存在一个14,这是因为set集合中的元素唯一性导致的，第二次插入的元素将被忽略。集合中最大的成员数为  2的32次方 - 1(4294967295, 每个集合可存储40多亿个成员)。</p>
<p><strong> 1.5 zset(sorted set：有序集合)</strong><br>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。<br>for example<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">127.0.0.1:6379&gt; zadd nums 0 11</div><div class="line">(integer) 0</div><div class="line">127.0.0.1:6379&gt; zadd nums 1 12</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zadd nums 2 13</div><div class="line">(integer) 1</div><div class="line">127.0.0.1:6379&gt; zrangebyscore nums 0 2</div><div class="line">1) &quot;11&quot;</div><div class="line">2) &quot;12&quot;</div><div class="line">3) &quot;13&quot;</div></pre></td></tr></table></figure></p>
<p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。<br>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。<br>zset的成员是唯一的,但分数(score)却可以重复。<br>基本的数据结构就是这些，接下来我会更加详细的来进行记录。</p>
]]></content>
      
        
    </entry>
    
  
  
</search>
